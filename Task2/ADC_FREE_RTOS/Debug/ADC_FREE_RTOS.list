
ADC_FREE_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005674  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005804  08005804  00015804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005880  08005880  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005880  08005880  00015880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005888  08005888  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005888  08005888  00015888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800588c  0800588c  0001588c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004098  20000010  080058a0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040a8  080058a0  000240a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144e1  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b7d  00000000  00000000  00034521  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011d0  00000000  00000000  000370a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001088  00000000  00000000  00038270  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022d50  00000000  00000000  000392f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d92b  00000000  00000000  0005c048  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5ebe  00000000  00000000  00069973  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013f831  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a44  00000000  00000000  0013f8ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080057ec 	.word	0x080057ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080057ec 	.word	0x080057ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	2000002c 	.word	0x2000002c
 8000510:	20000080 	.word	0x20000080

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b090      	sub	sp, #64	; 0x40
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fb87 	bl	8000c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f845 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f92b 	bl	800077c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000526:	f000 f8ab 	bl	8000680 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800052a:	f000 f8fd 	bl	8000728 <MX_USART2_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinSem */
  osSemaphoreDef(BinSem);
 800052e:	2300      	movs	r3, #0
 8000530:	63bb      	str	r3, [r7, #56]	; 0x38
 8000532:	2300      	movs	r3, #0
 8000534:	63fb      	str	r3, [r7, #60]	; 0x3c
  BinSemHandle = osSemaphoreCreate(osSemaphore(BinSem), 1);
 8000536:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800053a:	2101      	movs	r1, #1
 800053c:	4618      	mov	r0, r3
 800053e:	f002 fe48 	bl	80031d2 <osSemaphoreCreate>
 8000542:	4602      	mov	r2, r0
 8000544:	4b14      	ldr	r3, [pc, #80]	; (8000598 <main+0x84>)
 8000546:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LEDTask */
  osThreadDef(LEDTask, LEDtask, osPriorityNormal, 0, 128);
 8000548:	4b14      	ldr	r3, [pc, #80]	; (800059c <main+0x88>)
 800054a:	f107 041c 	add.w	r4, r7, #28
 800054e:	461d      	mov	r5, r3
 8000550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000554:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000558:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LEDTaskHandle = osThreadCreate(osThread(LEDTask), NULL);
 800055c:	f107 031c 	add.w	r3, r7, #28
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f002 fdd5 	bl	8003112 <osThreadCreate>
 8000568:	4602      	mov	r2, r0
 800056a:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <main+0x8c>)
 800056c:	601a      	str	r2, [r3, #0]

  /* definition and creation of myADC */
  osThreadDef(myADC, ADCTask, osPriorityAboveNormal, 0, 128);
 800056e:	4b0d      	ldr	r3, [pc, #52]	; (80005a4 <main+0x90>)
 8000570:	463c      	mov	r4, r7
 8000572:	461d      	mov	r5, r3
 8000574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000578:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800057c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myADCHandle = osThreadCreate(osThread(myADC), NULL);
 8000580:	463b      	mov	r3, r7
 8000582:	2100      	movs	r1, #0
 8000584:	4618      	mov	r0, r3
 8000586:	f002 fdc4 	bl	8003112 <osThreadCreate>
 800058a:	4602      	mov	r2, r0
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <main+0x94>)
 800058e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000590:	f002 fdb8 	bl	8003104 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000594:	e7fe      	b.n	8000594 <main+0x80>
 8000596:	bf00      	nop
 8000598:	20004060 	.word	0x20004060
 800059c:	0800580c 	.word	0x0800580c
 80005a0:	20003fcc 	.word	0x20003fcc
 80005a4:	08005830 	.word	0x08005830
 80005a8:	2000401c 	.word	0x2000401c

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	; 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	2230      	movs	r2, #48	; 0x30
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f005 f90d 	bl	80057da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	4b28      	ldr	r3, [pc, #160]	; (8000678 <SystemClock_Config+0xcc>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	4a27      	ldr	r2, [pc, #156]	; (8000678 <SystemClock_Config+0xcc>)
 80005da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005de:	6413      	str	r3, [r2, #64]	; 0x40
 80005e0:	4b25      	ldr	r3, [pc, #148]	; (8000678 <SystemClock_Config+0xcc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ec:	2300      	movs	r3, #0
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	4b22      	ldr	r3, [pc, #136]	; (800067c <SystemClock_Config+0xd0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a21      	ldr	r2, [pc, #132]	; (800067c <SystemClock_Config+0xd0>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <SystemClock_Config+0xd0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000608:	2301      	movs	r3, #1
 800060a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000616:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800061c:	2304      	movs	r3, #4
 800061e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000620:	23a8      	movs	r3, #168	; 0xa8
 8000622:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000628:	2304      	movs	r3, #4
 800062a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 0320 	add.w	r3, r7, #32
 8000630:	4618      	mov	r0, r3
 8000632:	f001 f9bf 	bl	80019b4 <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800063c:	f000 f978 	bl	8000930 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000644:	2302      	movs	r3, #2
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800064c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000650:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000656:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2105      	movs	r1, #5
 800065e:	4618      	mov	r0, r3
 8000660:	f001 fc18 	bl	8001e94 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800066a:	f000 f961 	bl	8000930 <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3750      	adds	r7, #80	; 0x50
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000686:	463b      	mov	r3, r7
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000692:	4b22      	ldr	r3, [pc, #136]	; (800071c <MX_ADC1_Init+0x9c>)
 8000694:	4a22      	ldr	r2, [pc, #136]	; (8000720 <MX_ADC1_Init+0xa0>)
 8000696:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000698:	4b20      	ldr	r3, [pc, #128]	; (800071c <MX_ADC1_Init+0x9c>)
 800069a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800069e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80006a0:	4b1e      	ldr	r3, [pc, #120]	; (800071c <MX_ADC1_Init+0x9c>)
 80006a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80006a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006a8:	4b1c      	ldr	r3, [pc, #112]	; (800071c <MX_ADC1_Init+0x9c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ae:	4b1b      	ldr	r3, [pc, #108]	; (800071c <MX_ADC1_Init+0x9c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006b4:	4b19      	ldr	r3, [pc, #100]	; (800071c <MX_ADC1_Init+0x9c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_ADC1_Init+0x9c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <MX_ADC1_Init+0x9c>)
 80006c4:	4a17      	ldr	r2, [pc, #92]	; (8000724 <MX_ADC1_Init+0xa4>)
 80006c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006c8:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_ADC1_Init+0x9c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006ce:	4b13      	ldr	r3, [pc, #76]	; (800071c <MX_ADC1_Init+0x9c>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_ADC1_Init+0x9c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_ADC1_Init+0x9c>)
 80006de:	2201      	movs	r2, #1
 80006e0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e2:	480e      	ldr	r0, [pc, #56]	; (800071c <MX_ADC1_Init+0x9c>)
 80006e4:	f000 fae4 	bl	8000cb0 <HAL_ADC_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80006ee:	f000 f91f 	bl	8000930 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80006fa:	2302      	movs	r3, #2
 80006fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fe:	463b      	mov	r3, r7
 8000700:	4619      	mov	r1, r3
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <MX_ADC1_Init+0x9c>)
 8000704:	f000 fc70 	bl	8000fe8 <HAL_ADC_ConfigChannel>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800070e:	f000 f90f 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20003fd4 	.word	0x20003fd4
 8000720:	40012000 	.word	0x40012000
 8000724:	0f000001 	.word	0x0f000001

08000728 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800072e:	4a12      	ldr	r2, [pc, #72]	; (8000778 <MX_USART2_UART_Init+0x50>)
 8000730:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000738:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000760:	f001 fffa 	bl	8002758 <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800076a:	f000 f8e1 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20004020 	.word	0x20004020
 8000778:	40004400 	.word	0x40004400

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	4b2b      	ldr	r3, [pc, #172]	; (8000844 <MX_GPIO_Init+0xc8>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a2a      	ldr	r2, [pc, #168]	; (8000844 <MX_GPIO_Init+0xc8>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b28      	ldr	r3, [pc, #160]	; (8000844 <MX_GPIO_Init+0xc8>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b24      	ldr	r3, [pc, #144]	; (8000844 <MX_GPIO_Init+0xc8>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a23      	ldr	r2, [pc, #140]	; (8000844 <MX_GPIO_Init+0xc8>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b21      	ldr	r3, [pc, #132]	; (8000844 <MX_GPIO_Init+0xc8>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_GPIO_Init+0xc8>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a1c      	ldr	r2, [pc, #112]	; (8000844 <MX_GPIO_Init+0xc8>)
 80007d4:	f043 0308 	orr.w	r3, r3, #8
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_GPIO_Init+0xc8>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0308 	and.w	r3, r3, #8
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ec:	4816      	ldr	r0, [pc, #88]	; (8000848 <MX_GPIO_Init+0xcc>)
 80007ee:	f001 f895 	bl	800191c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_GPIO_Init+0xd0>)
 80007fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4619      	mov	r1, r3
 8000806:	4810      	ldr	r0, [pc, #64]	; (8000848 <MX_GPIO_Init+0xcc>)
 8000808:	f000 feee 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800080c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000810:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	4619      	mov	r1, r3
 8000824:	4808      	ldr	r0, [pc, #32]	; (8000848 <MX_GPIO_Init+0xcc>)
 8000826:	f000 fedf 	bl	80015e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2100      	movs	r1, #0
 800082e:	2028      	movs	r0, #40	; 0x28
 8000830:	f000 feb0 	bl	8001594 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000834:	2028      	movs	r0, #40	; 0x28
 8000836:	f000 fec9 	bl	80015cc <HAL_NVIC_EnableIRQ>

}
 800083a:	bf00      	nop
 800083c:	3720      	adds	r7, #32
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40020c00 	.word	0x40020c00
 800084c:	10110000 	.word	0x10110000

08000850 <LEDtask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_LEDtask */
void LEDtask(void const * argument)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//  char *str1= "Switch on and off LED Task\n";
//  HAL_UART_Transmit(&huart2, (uint8_t *) str1,strlen(str1),100);
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000858:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800085c:	4803      	ldr	r0, [pc, #12]	; (800086c <LEDtask+0x1c>)
 800085e:	f001 f876 	bl	800194e <HAL_GPIO_TogglePin>



    osDelay(50);
 8000862:	2032      	movs	r0, #50	; 0x32
 8000864:	f002 fca1 	bl	80031aa <osDelay>
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000868:	e7f6      	b.n	8000858 <LEDtask+0x8>
 800086a:	bf00      	nop
 800086c:	40020c00 	.word	0x40020c00

08000870 <ADCTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ADCTask */
void ADCTask(void const * argument)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  //HAL_UART_Transmit(&huart2, (uint8_t *) str1,strlen(str1),100);

	  	  osSemaphoreWait(BinSemHandle, osWaitForever);
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <ADCTask+0x68>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f04f 31ff 	mov.w	r1, #4294967295
 8000880:	4618      	mov	r0, r3
 8000882:	f002 fcd9 	bl	8003238 <osSemaphoreWait>

	  HAL_ADC_Start(&hadc1);
 8000886:	4815      	ldr	r0, [pc, #84]	; (80008dc <ADCTask+0x6c>)
 8000888:	f000 fa56 	bl	8000d38 <HAL_ADC_Start>
	 	  if(HAL_ADC_PollForConversion(&hadc1, 1000)== HAL_OK)
 800088c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000890:	4812      	ldr	r0, [pc, #72]	; (80008dc <ADCTask+0x6c>)
 8000892:	f000 fb17 	bl	8000ec4 <HAL_ADC_PollForConversion>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d105      	bne.n	80008a8 <ADCTask+0x38>
	 	  {
	 		  adcVal0=HAL_ADC_GetValue(&hadc1);
 800089c:	480f      	ldr	r0, [pc, #60]	; (80008dc <ADCTask+0x6c>)
 800089e:	f000 fb95 	bl	8000fcc <HAL_ADC_GetValue>
 80008a2:	4602      	mov	r2, r0
 80008a4:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <ADCTask+0x70>)
 80008a6:	601a      	str	r2, [r3, #0]
	 	  }
	 	 char *str2= "ADC is working \n";
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <ADCTask+0x74>)
 80008aa:	60fb      	str	r3, [r7, #12]
	 	   HAL_UART_Transmit(&huart2, (uint8_t *) str2,strlen(str2),100);
 80008ac:	68f8      	ldr	r0, [r7, #12]
 80008ae:	f7ff fc8f 	bl	80001d0 <strlen>
 80008b2:	4603      	mov	r3, r0
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	2364      	movs	r3, #100	; 0x64
 80008b8:	68f9      	ldr	r1, [r7, #12]
 80008ba:	480b      	ldr	r0, [pc, #44]	; (80008e8 <ADCTask+0x78>)
 80008bc:	f001 ff99 	bl	80027f2 <HAL_UART_Transmit>
	 	  HAL_UART_Transmit(&huart2, (uint32_t)adcVal0,sizeof(uint32_t),100);
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <ADCTask+0x70>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4619      	mov	r1, r3
 80008c6:	2364      	movs	r3, #100	; 0x64
 80008c8:	2204      	movs	r2, #4
 80008ca:	4807      	ldr	r0, [pc, #28]	; (80008e8 <ADCTask+0x78>)
 80008cc:	f001 ff91 	bl	80027f2 <HAL_UART_Transmit>
	 	//  osSemaphoreRelease(BinSemHandle);
    osDelay(50);
 80008d0:	2032      	movs	r0, #50	; 0x32
 80008d2:	f002 fc6a 	bl	80031aa <osDelay>
  {
 80008d6:	e7cf      	b.n	8000878 <ADCTask+0x8>
 80008d8:	20004060 	.word	0x20004060
 80008dc:	20003fd4 	.word	0x20003fd4
 80008e0:	20003fd0 	.word	0x20003fd0
 80008e4:	0800584c 	.word	0x0800584c
 80008e8:	20004020 	.word	0x20004020

080008ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d101      	bne.n	8000902 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008fe:	f000 f9b7 	bl	8000c70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40010000 	.word	0x40010000

08000910 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	80fb      	strh	r3, [r7, #6]
	osSemaphoreRelease(BinSemHandle);
 800091a:	4b04      	ldr	r3, [pc, #16]	; (800092c <HAL_GPIO_EXTI_Callback+0x1c>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	f002 fcd8 	bl	80032d4 <osSemaphoreRelease>
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20004060 	.word	0x20004060

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000936:	e7fe      	b.n	8000936 <Error_Handler+0x6>

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b12      	ldr	r3, [pc, #72]	; (800098c <HAL_MspInit+0x54>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	4a11      	ldr	r2, [pc, #68]	; (800098c <HAL_MspInit+0x54>)
 8000948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094c:	6453      	str	r3, [r2, #68]	; 0x44
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <HAL_MspInit+0x54>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <HAL_MspInit+0x54>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	4a0a      	ldr	r2, [pc, #40]	; (800098c <HAL_MspInit+0x54>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000968:	6413      	str	r3, [r2, #64]	; 0x40
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <HAL_MspInit+0x54>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	210f      	movs	r1, #15
 800097a:	f06f 0001 	mvn.w	r0, #1
 800097e:	f000 fe09 	bl	8001594 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a17      	ldr	r2, [pc, #92]	; (8000a0c <HAL_ADC_MspInit+0x7c>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d127      	bne.n	8000a02 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <HAL_ADC_MspInit+0x80>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	4a15      	ldr	r2, [pc, #84]	; (8000a10 <HAL_ADC_MspInit+0x80>)
 80009bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009c0:	6453      	str	r3, [r2, #68]	; 0x44
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <HAL_ADC_MspInit+0x80>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <HAL_ADC_MspInit+0x80>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <HAL_ADC_MspInit+0x80>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <HAL_ADC_MspInit+0x80>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009ea:	2301      	movs	r3, #1
 80009ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ee:	2303      	movs	r3, #3
 80009f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	4805      	ldr	r0, [pc, #20]	; (8000a14 <HAL_ADC_MspInit+0x84>)
 80009fe:	f000 fdf3 	bl	80015e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a02:	bf00      	nop
 8000a04:	3728      	adds	r7, #40	; 0x28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40012000 	.word	0x40012000
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020000 	.word	0x40020000

08000a18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	; 0x28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a19      	ldr	r2, [pc, #100]	; (8000a9c <HAL_UART_MspInit+0x84>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d12b      	bne.n	8000a92 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	4a17      	ldr	r2, [pc, #92]	; (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a48:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a10      	ldr	r2, [pc, #64]	; (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a72:	230c      	movs	r3, #12
 8000a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a82:	2307      	movs	r3, #7
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <HAL_UART_MspInit+0x8c>)
 8000a8e:	f000 fdab 	bl	80015e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a92:	bf00      	nop
 8000a94:	3728      	adds	r7, #40	; 0x28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40004400 	.word	0x40004400
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020000 	.word	0x40020000

08000aa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08c      	sub	sp, #48	; 0x30
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	6879      	ldr	r1, [r7, #4]
 8000abc:	2019      	movs	r0, #25
 8000abe:	f000 fd69 	bl	8001594 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ac2:	2019      	movs	r0, #25
 8000ac4:	f000 fd82 	bl	80015cc <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <HAL_InitTick+0xa4>)
 8000ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad0:	4a1e      	ldr	r2, [pc, #120]	; (8000b4c <HAL_InitTick+0xa4>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <HAL_InitTick+0xa4>)
 8000ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ae4:	f107 0210 	add.w	r2, r7, #16
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4611      	mov	r1, r2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f001 fbc2 	bl	8002278 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000af4:	f001 fbac 	bl	8002250 <HAL_RCC_GetPCLK2Freq>
 8000af8:	4603      	mov	r3, r0
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b00:	4a13      	ldr	r2, [pc, #76]	; (8000b50 <HAL_InitTick+0xa8>)
 8000b02:	fba2 2303 	umull	r2, r3, r2, r3
 8000b06:	0c9b      	lsrs	r3, r3, #18
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <HAL_InitTick+0xac>)
 8000b0e:	4a12      	ldr	r2, [pc, #72]	; (8000b58 <HAL_InitTick+0xb0>)
 8000b10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <HAL_InitTick+0xac>)
 8000b14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b18:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b1a:	4a0e      	ldr	r2, [pc, #56]	; (8000b54 <HAL_InitTick+0xac>)
 8000b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b1e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <HAL_InitTick+0xac>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <HAL_InitTick+0xac>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b2c:	4809      	ldr	r0, [pc, #36]	; (8000b54 <HAL_InitTick+0xac>)
 8000b2e:	f001 fbd5 	bl	80022dc <HAL_TIM_Base_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d104      	bne.n	8000b42 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b38:	4806      	ldr	r0, [pc, #24]	; (8000b54 <HAL_InitTick+0xac>)
 8000b3a:	f001 fc04 	bl	8002346 <HAL_TIM_Base_Start_IT>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	e000      	b.n	8000b44 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3730      	adds	r7, #48	; 0x30
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	431bde83 	.word	0x431bde83
 8000b54:	20004064 	.word	0x20004064
 8000b58:	40010000 	.word	0x40010000

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <NMI_Handler+0x4>

08000b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <MemManage_Handler+0x4>

08000b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b8c:	4802      	ldr	r0, [pc, #8]	; (8000b98 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b8e:	f001 fbfe 	bl	800238e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20004064 	.word	0x20004064

08000b9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000ba0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000ba4:	f000 feee 	bl	8001984 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <SystemInit+0x28>)
 8000bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb6:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <SystemInit+0x28>)
 8000bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <SystemInit+0x28>)
 8000bc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bc6:	609a      	str	r2, [r3, #8]
#endif
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000bdc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bde:	e003      	b.n	8000be8 <LoopCopyDataInit>

08000be0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000be2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000be4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000be6:	3104      	adds	r1, #4

08000be8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000be8:	480b      	ldr	r0, [pc, #44]	; (8000c18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bf0:	d3f6      	bcc.n	8000be0 <CopyDataInit>
  ldr  r2, =_sbss
 8000bf2:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bf4:	e002      	b.n	8000bfc <LoopFillZerobss>

08000bf6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bf6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bf8:	f842 3b04 	str.w	r3, [r2], #4

08000bfc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bfe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c00:	d3f9      	bcc.n	8000bf6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c02:	f7ff ffd3 	bl	8000bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c06:	f004 fdb9 	bl	800577c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0a:	f7ff fc83 	bl	8000514 <main>
  bx  lr    
 8000c0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c10:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c14:	08005890 	.word	0x08005890
  ldr  r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c1c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000c20:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000c24:	200040a8 	.word	0x200040a8

08000c28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c28:	e7fe      	b.n	8000c28 <ADC_IRQHandler>
	...

08000c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <HAL_Init+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <HAL_Init+0x40>)
 8000c36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <HAL_Init+0x40>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <HAL_Init+0x40>)
 8000c42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_Init+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <HAL_Init+0x40>)
 8000c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c54:	2003      	movs	r0, #3
 8000c56:	f000 fc92 	bl	800157e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f7ff ff24 	bl	8000aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c60:	f7ff fe6a 	bl	8000938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023c00 	.word	0x40023c00

08000c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_IncTick+0x20>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x24>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <HAL_IncTick+0x24>)
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	20000008 	.word	0x20000008
 8000c94:	200040a4 	.word	0x200040a4

08000c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <HAL_GetTick+0x14>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	200040a4 	.word	0x200040a4

08000cb0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d101      	bne.n	8000cc6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e033      	b.n	8000d2e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d109      	bne.n	8000ce2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff fe5e 	bl	8000990 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f003 0310 	and.w	r3, r3, #16
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d118      	bne.n	8000d20 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000cf6:	f023 0302 	bic.w	r3, r3, #2
 8000cfa:	f043 0202 	orr.w	r2, r3, #2
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f000 fa92 	bl	800122c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f023 0303 	bic.w	r3, r3, #3
 8000d16:	f043 0201 	orr.w	r2, r3, #1
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	641a      	str	r2, [r3, #64]	; 0x40
 8000d1e:	e001      	b.n	8000d24 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d101      	bne.n	8000d52 <HAL_ADC_Start+0x1a>
 8000d4e:	2302      	movs	r3, #2
 8000d50:	e0a5      	b.n	8000e9e <HAL_ADC_Start+0x166>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2201      	movs	r2, #1
 8000d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d018      	beq.n	8000d9a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	689a      	ldr	r2, [r3, #8]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f042 0201 	orr.w	r2, r2, #1
 8000d76:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d78:	4b4c      	ldr	r3, [pc, #304]	; (8000eac <HAL_ADC_Start+0x174>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a4c      	ldr	r2, [pc, #304]	; (8000eb0 <HAL_ADC_Start+0x178>)
 8000d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d82:	0c9a      	lsrs	r2, r3, #18
 8000d84:	4613      	mov	r3, r2
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	4413      	add	r3, r2
 8000d8a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000d8c:	e002      	b.n	8000d94 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1f9      	bne.n	8000d8e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d179      	bne.n	8000e9c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000db0:	f023 0301 	bic.w	r3, r3, #1
 8000db4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d007      	beq.n	8000dda <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dd2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000de6:	d106      	bne.n	8000df6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dec:	f023 0206 	bic.w	r2, r3, #6
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	645a      	str	r2, [r3, #68]	; 0x44
 8000df4:	e002      	b.n	8000dfc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e04:	4b2b      	ldr	r3, [pc, #172]	; (8000eb4 <HAL_ADC_Start+0x17c>)
 8000e06:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000e10:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 031f 	and.w	r3, r3, #31
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d12a      	bne.n	8000e74 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a25      	ldr	r2, [pc, #148]	; (8000eb8 <HAL_ADC_Start+0x180>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d015      	beq.n	8000e54 <HAL_ADC_Start+0x11c>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a23      	ldr	r2, [pc, #140]	; (8000ebc <HAL_ADC_Start+0x184>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d105      	bne.n	8000e3e <HAL_ADC_Start+0x106>
 8000e32:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <HAL_ADC_Start+0x17c>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 031f 	and.w	r3, r3, #31
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d00a      	beq.n	8000e54 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a1f      	ldr	r2, [pc, #124]	; (8000ec0 <HAL_ADC_Start+0x188>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d129      	bne.n	8000e9c <HAL_ADC_Start+0x164>
 8000e48:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <HAL_ADC_Start+0x17c>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 031f 	and.w	r3, r3, #31
 8000e50:	2b0f      	cmp	r3, #15
 8000e52:	d823      	bhi.n	8000e9c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d11c      	bne.n	8000e9c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	689a      	ldr	r2, [r3, #8]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	e013      	b.n	8000e9c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0f      	ldr	r2, [pc, #60]	; (8000eb8 <HAL_ADC_Start+0x180>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d10e      	bne.n	8000e9c <HAL_ADC_Start+0x164>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d107      	bne.n	8000e9c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e9a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	431bde83 	.word	0x431bde83
 8000eb4:	40012300 	.word	0x40012300
 8000eb8:	40012000 	.word	0x40012000
 8000ebc:	40012100 	.word	0x40012100
 8000ec0:	40012200 	.word	0x40012200

08000ec4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ee0:	d113      	bne.n	8000f0a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ef0:	d10b      	bne.n	8000f0a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f043 0220 	orr.w	r2, r3, #32
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e05c      	b.n	8000fc4 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000f0a:	f7ff fec5 	bl	8000c98 <HAL_GetTick>
 8000f0e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f10:	e01a      	b.n	8000f48 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f18:	d016      	beq.n	8000f48 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d007      	beq.n	8000f30 <HAL_ADC_PollForConversion+0x6c>
 8000f20:	f7ff feba 	bl	8000c98 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	683a      	ldr	r2, [r7, #0]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d20b      	bcs.n	8000f48 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	f043 0204 	orr.w	r2, r3, #4
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e03d      	b.n	8000fc4 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d1dd      	bne.n	8000f12 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f06f 0212 	mvn.w	r2, #18
 8000f5e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d123      	bne.n	8000fc2 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d11f      	bne.n	8000fc2 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f88:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d006      	beq.n	8000f9e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d111      	bne.n	8000fc2 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d105      	bne.n	8000fc2 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	f043 0201 	orr.w	r2, r3, #1
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d101      	bne.n	8001004 <HAL_ADC_ConfigChannel+0x1c>
 8001000:	2302      	movs	r3, #2
 8001002:	e105      	b.n	8001210 <HAL_ADC_ConfigChannel+0x228>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2201      	movs	r2, #1
 8001008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b09      	cmp	r3, #9
 8001012:	d925      	bls.n	8001060 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	68d9      	ldr	r1, [r3, #12]
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	b29b      	uxth	r3, r3
 8001020:	461a      	mov	r2, r3
 8001022:	4613      	mov	r3, r2
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	4413      	add	r3, r2
 8001028:	3b1e      	subs	r3, #30
 800102a:	2207      	movs	r2, #7
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43da      	mvns	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	400a      	ands	r2, r1
 8001038:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	68d9      	ldr	r1, [r3, #12]
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	b29b      	uxth	r3, r3
 800104a:	4618      	mov	r0, r3
 800104c:	4603      	mov	r3, r0
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	4403      	add	r3, r0
 8001052:	3b1e      	subs	r3, #30
 8001054:	409a      	lsls	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	430a      	orrs	r2, r1
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	e022      	b.n	80010a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6919      	ldr	r1, [r3, #16]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	b29b      	uxth	r3, r3
 800106c:	461a      	mov	r2, r3
 800106e:	4613      	mov	r3, r2
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	4413      	add	r3, r2
 8001074:	2207      	movs	r2, #7
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43da      	mvns	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	400a      	ands	r2, r1
 8001082:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	6919      	ldr	r1, [r3, #16]
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	b29b      	uxth	r3, r3
 8001094:	4618      	mov	r0, r3
 8001096:	4603      	mov	r3, r0
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	4403      	add	r3, r0
 800109c:	409a      	lsls	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	430a      	orrs	r2, r1
 80010a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d824      	bhi.n	80010f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	3b05      	subs	r3, #5
 80010c0:	221f      	movs	r2, #31
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43da      	mvns	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	400a      	ands	r2, r1
 80010ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	4613      	mov	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	3b05      	subs	r3, #5
 80010ea:	fa00 f203 	lsl.w	r2, r0, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	430a      	orrs	r2, r1
 80010f4:	635a      	str	r2, [r3, #52]	; 0x34
 80010f6:	e04c      	b.n	8001192 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b0c      	cmp	r3, #12
 80010fe:	d824      	bhi.n	800114a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	3b23      	subs	r3, #35	; 0x23
 8001112:	221f      	movs	r2, #31
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43da      	mvns	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	400a      	ands	r2, r1
 8001120:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	b29b      	uxth	r3, r3
 800112e:	4618      	mov	r0, r3
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	4613      	mov	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	3b23      	subs	r3, #35	; 0x23
 800113c:	fa00 f203 	lsl.w	r2, r0, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	430a      	orrs	r2, r1
 8001146:	631a      	str	r2, [r3, #48]	; 0x30
 8001148:	e023      	b.n	8001192 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	3b41      	subs	r3, #65	; 0x41
 800115c:	221f      	movs	r2, #31
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	400a      	ands	r2, r1
 800116a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	b29b      	uxth	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	3b41      	subs	r3, #65	; 0x41
 8001186:	fa00 f203 	lsl.w	r2, r0, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	430a      	orrs	r2, r1
 8001190:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001192:	4b22      	ldr	r3, [pc, #136]	; (800121c <HAL_ADC_ConfigChannel+0x234>)
 8001194:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a21      	ldr	r2, [pc, #132]	; (8001220 <HAL_ADC_ConfigChannel+0x238>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d109      	bne.n	80011b4 <HAL_ADC_ConfigChannel+0x1cc>
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b12      	cmp	r3, #18
 80011a6:	d105      	bne.n	80011b4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a19      	ldr	r2, [pc, #100]	; (8001220 <HAL_ADC_ConfigChannel+0x238>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d123      	bne.n	8001206 <HAL_ADC_ConfigChannel+0x21e>
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b10      	cmp	r3, #16
 80011c4:	d003      	beq.n	80011ce <HAL_ADC_ConfigChannel+0x1e6>
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b11      	cmp	r3, #17
 80011cc:	d11b      	bne.n	8001206 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b10      	cmp	r3, #16
 80011e0:	d111      	bne.n	8001206 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_ADC_ConfigChannel+0x23c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a10      	ldr	r2, [pc, #64]	; (8001228 <HAL_ADC_ConfigChannel+0x240>)
 80011e8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ec:	0c9a      	lsrs	r2, r3, #18
 80011ee:	4613      	mov	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011f8:	e002      	b.n	8001200 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f9      	bne.n	80011fa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	40012300 	.word	0x40012300
 8001220:	40012000 	.word	0x40012000
 8001224:	20000000 	.word	0x20000000
 8001228:	431bde83 	.word	0x431bde83

0800122c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001234:	4b79      	ldr	r3, [pc, #484]	; (800141c <ADC_Init+0x1f0>)
 8001236:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	431a      	orrs	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001260:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6859      	ldr	r1, [r3, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	021a      	lsls	r2, r3, #8
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	430a      	orrs	r2, r1
 8001274:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001284:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6859      	ldr	r1, [r3, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6899      	ldr	r1, [r3, #8]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68da      	ldr	r2, [r3, #12]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012be:	4a58      	ldr	r2, [pc, #352]	; (8001420 <ADC_Init+0x1f4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d022      	beq.n	800130a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6899      	ldr	r1, [r3, #8]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6899      	ldr	r1, [r3, #8]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	e00f      	b.n	800132a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001318:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001328:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0202 	bic.w	r2, r2, #2
 8001338:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6899      	ldr	r1, [r3, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	7e1b      	ldrb	r3, [r3, #24]
 8001344:	005a      	lsls	r2, r3, #1
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	430a      	orrs	r2, r1
 800134c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d01b      	beq.n	8001390 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001366:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001376:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6859      	ldr	r1, [r3, #4]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001382:	3b01      	subs	r3, #1
 8001384:	035a      	lsls	r2, r3, #13
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	e007      	b.n	80013a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800139e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80013ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	051a      	lsls	r2, r3, #20
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6899      	ldr	r1, [r3, #8]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013e2:	025a      	lsls	r2, r3, #9
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6899      	ldr	r1, [r3, #8]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	029a      	lsls	r2, r3, #10
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	430a      	orrs	r2, r1
 800140e:	609a      	str	r2, [r3, #8]
}
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	40012300 	.word	0x40012300
 8001420:	0f000001 	.word	0x0f000001

08001424 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001440:	4013      	ands	r3, r2
 8001442:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800144c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001456:	4a04      	ldr	r2, [pc, #16]	; (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	60d3      	str	r3, [r2, #12]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <__NVIC_GetPriorityGrouping+0x18>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	0a1b      	lsrs	r3, r3, #8
 8001476:	f003 0307 	and.w	r3, r3, #7
}
 800147a:	4618      	mov	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	2b00      	cmp	r3, #0
 8001498:	db0b      	blt.n	80014b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	f003 021f 	and.w	r2, r3, #31
 80014a0:	4907      	ldr	r1, [pc, #28]	; (80014c0 <__NVIC_EnableIRQ+0x38>)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	095b      	lsrs	r3, r3, #5
 80014a8:	2001      	movs	r0, #1
 80014aa:	fa00 f202 	lsl.w	r2, r0, r2
 80014ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000e100 	.word	0xe000e100

080014c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	db0a      	blt.n	80014ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	490c      	ldr	r1, [pc, #48]	; (8001510 <__NVIC_SetPriority+0x4c>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	0112      	lsls	r2, r2, #4
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	440b      	add	r3, r1
 80014e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ec:	e00a      	b.n	8001504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4908      	ldr	r1, [pc, #32]	; (8001514 <__NVIC_SetPriority+0x50>)
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	3b04      	subs	r3, #4
 80014fc:	0112      	lsls	r2, r2, #4
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	440b      	add	r3, r1
 8001502:	761a      	strb	r2, [r3, #24]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000e100 	.word	0xe000e100
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001518:	b480      	push	{r7}
 800151a:	b089      	sub	sp, #36	; 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f1c3 0307 	rsb	r3, r3, #7
 8001532:	2b04      	cmp	r3, #4
 8001534:	bf28      	it	cs
 8001536:	2304      	movcs	r3, #4
 8001538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3304      	adds	r3, #4
 800153e:	2b06      	cmp	r3, #6
 8001540:	d902      	bls.n	8001548 <NVIC_EncodePriority+0x30>
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3b03      	subs	r3, #3
 8001546:	e000      	b.n	800154a <NVIC_EncodePriority+0x32>
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	f04f 32ff 	mov.w	r2, #4294967295
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43da      	mvns	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	401a      	ands	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001560:	f04f 31ff 	mov.w	r1, #4294967295
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	43d9      	mvns	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	4313      	orrs	r3, r2
         );
}
 8001572:	4618      	mov	r0, r3
 8001574:	3724      	adds	r7, #36	; 0x24
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ff4c 	bl	8001424 <__NVIC_SetPriorityGrouping>
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a6:	f7ff ff61 	bl	800146c <__NVIC_GetPriorityGrouping>
 80015aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	68b9      	ldr	r1, [r7, #8]
 80015b0:	6978      	ldr	r0, [r7, #20]
 80015b2:	f7ff ffb1 	bl	8001518 <NVIC_EncodePriority>
 80015b6:	4602      	mov	r2, r0
 80015b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015bc:	4611      	mov	r1, r2
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff ff80 	bl	80014c4 <__NVIC_SetPriority>
}
 80015c4:	bf00      	nop
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff ff54 	bl	8001488 <__NVIC_EnableIRQ>
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
 8001602:	e16b      	b.n	80018dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001604:	2201      	movs	r2, #1
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	429a      	cmp	r2, r3
 800161e:	f040 815a 	bne.w	80018d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d00b      	beq.n	8001642 <HAL_GPIO_Init+0x5a>
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b02      	cmp	r3, #2
 8001630:	d007      	beq.n	8001642 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001636:	2b11      	cmp	r3, #17
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b12      	cmp	r3, #18
 8001640:	d130      	bne.n	80016a4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	2203      	movs	r2, #3
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001678:	2201      	movs	r2, #1
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	091b      	lsrs	r3, r3, #4
 800168e:	f003 0201 	and.w	r2, r3, #1
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	2203      	movs	r2, #3
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0xfc>
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b12      	cmp	r3, #18
 80016e2:	d123      	bne.n	800172c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	08da      	lsrs	r2, r3, #3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3208      	adds	r2, #8
 80016ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	f003 0307 	and.w	r3, r3, #7
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	220f      	movs	r2, #15
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	691a      	ldr	r2, [r3, #16]
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	08da      	lsrs	r2, r3, #3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3208      	adds	r2, #8
 8001726:	69b9      	ldr	r1, [r7, #24]
 8001728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	2203      	movs	r2, #3
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0203 	and.w	r2, r3, #3
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 80b4 	beq.w	80018d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	4b5f      	ldr	r3, [pc, #380]	; (80018f0 <HAL_GPIO_Init+0x308>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	4a5e      	ldr	r2, [pc, #376]	; (80018f0 <HAL_GPIO_Init+0x308>)
 8001778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800177c:	6453      	str	r3, [r2, #68]	; 0x44
 800177e:	4b5c      	ldr	r3, [pc, #368]	; (80018f0 <HAL_GPIO_Init+0x308>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800178a:	4a5a      	ldr	r2, [pc, #360]	; (80018f4 <HAL_GPIO_Init+0x30c>)
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	089b      	lsrs	r3, r3, #2
 8001790:	3302      	adds	r3, #2
 8001792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	220f      	movs	r2, #15
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a51      	ldr	r2, [pc, #324]	; (80018f8 <HAL_GPIO_Init+0x310>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d02b      	beq.n	800180e <HAL_GPIO_Init+0x226>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a50      	ldr	r2, [pc, #320]	; (80018fc <HAL_GPIO_Init+0x314>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d025      	beq.n	800180a <HAL_GPIO_Init+0x222>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a4f      	ldr	r2, [pc, #316]	; (8001900 <HAL_GPIO_Init+0x318>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d01f      	beq.n	8001806 <HAL_GPIO_Init+0x21e>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4e      	ldr	r2, [pc, #312]	; (8001904 <HAL_GPIO_Init+0x31c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d019      	beq.n	8001802 <HAL_GPIO_Init+0x21a>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4d      	ldr	r2, [pc, #308]	; (8001908 <HAL_GPIO_Init+0x320>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d013      	beq.n	80017fe <HAL_GPIO_Init+0x216>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a4c      	ldr	r2, [pc, #304]	; (800190c <HAL_GPIO_Init+0x324>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d00d      	beq.n	80017fa <HAL_GPIO_Init+0x212>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a4b      	ldr	r2, [pc, #300]	; (8001910 <HAL_GPIO_Init+0x328>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d007      	beq.n	80017f6 <HAL_GPIO_Init+0x20e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a4a      	ldr	r2, [pc, #296]	; (8001914 <HAL_GPIO_Init+0x32c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d101      	bne.n	80017f2 <HAL_GPIO_Init+0x20a>
 80017ee:	2307      	movs	r3, #7
 80017f0:	e00e      	b.n	8001810 <HAL_GPIO_Init+0x228>
 80017f2:	2308      	movs	r3, #8
 80017f4:	e00c      	b.n	8001810 <HAL_GPIO_Init+0x228>
 80017f6:	2306      	movs	r3, #6
 80017f8:	e00a      	b.n	8001810 <HAL_GPIO_Init+0x228>
 80017fa:	2305      	movs	r3, #5
 80017fc:	e008      	b.n	8001810 <HAL_GPIO_Init+0x228>
 80017fe:	2304      	movs	r3, #4
 8001800:	e006      	b.n	8001810 <HAL_GPIO_Init+0x228>
 8001802:	2303      	movs	r3, #3
 8001804:	e004      	b.n	8001810 <HAL_GPIO_Init+0x228>
 8001806:	2302      	movs	r3, #2
 8001808:	e002      	b.n	8001810 <HAL_GPIO_Init+0x228>
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <HAL_GPIO_Init+0x228>
 800180e:	2300      	movs	r3, #0
 8001810:	69fa      	ldr	r2, [r7, #28]
 8001812:	f002 0203 	and.w	r2, r2, #3
 8001816:	0092      	lsls	r2, r2, #2
 8001818:	4093      	lsls	r3, r2
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001820:	4934      	ldr	r1, [pc, #208]	; (80018f4 <HAL_GPIO_Init+0x30c>)
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	089b      	lsrs	r3, r3, #2
 8001826:	3302      	adds	r3, #2
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800182e:	4b3a      	ldr	r3, [pc, #232]	; (8001918 <HAL_GPIO_Init+0x330>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001852:	4a31      	ldr	r2, [pc, #196]	; (8001918 <HAL_GPIO_Init+0x330>)
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001858:	4b2f      	ldr	r3, [pc, #188]	; (8001918 <HAL_GPIO_Init+0x330>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800187c:	4a26      	ldr	r2, [pc, #152]	; (8001918 <HAL_GPIO_Init+0x330>)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001882:	4b25      	ldr	r3, [pc, #148]	; (8001918 <HAL_GPIO_Init+0x330>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018a6:	4a1c      	ldr	r2, [pc, #112]	; (8001918 <HAL_GPIO_Init+0x330>)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018ac:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <HAL_GPIO_Init+0x330>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018d0:	4a11      	ldr	r2, [pc, #68]	; (8001918 <HAL_GPIO_Init+0x330>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3301      	adds	r3, #1
 80018da:	61fb      	str	r3, [r7, #28]
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	2b0f      	cmp	r3, #15
 80018e0:	f67f ae90 	bls.w	8001604 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018e4:	bf00      	nop
 80018e6:	3724      	adds	r7, #36	; 0x24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40013800 	.word	0x40013800
 80018f8:	40020000 	.word	0x40020000
 80018fc:	40020400 	.word	0x40020400
 8001900:	40020800 	.word	0x40020800
 8001904:	40020c00 	.word	0x40020c00
 8001908:	40021000 	.word	0x40021000
 800190c:	40021400 	.word	0x40021400
 8001910:	40021800 	.word	0x40021800
 8001914:	40021c00 	.word	0x40021c00
 8001918:	40013c00 	.word	0x40013c00

0800191c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	807b      	strh	r3, [r7, #2]
 8001928:	4613      	mov	r3, r2
 800192a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800192c:	787b      	ldrb	r3, [r7, #1]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001932:	887a      	ldrh	r2, [r7, #2]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001938:	e003      	b.n	8001942 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800193a:	887b      	ldrh	r3, [r7, #2]
 800193c:	041a      	lsls	r2, r3, #16
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	619a      	str	r2, [r3, #24]
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	460b      	mov	r3, r1
 8001958:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	695a      	ldr	r2, [r3, #20]
 800195e:	887b      	ldrh	r3, [r7, #2]
 8001960:	401a      	ands	r2, r3
 8001962:	887b      	ldrh	r3, [r7, #2]
 8001964:	429a      	cmp	r2, r3
 8001966:	d104      	bne.n	8001972 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001968:	887b      	ldrh	r3, [r7, #2]
 800196a:	041a      	lsls	r2, r3, #16
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001970:	e002      	b.n	8001978 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001972:	887a      	ldrh	r2, [r7, #2]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	619a      	str	r2, [r3, #24]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001990:	695a      	ldr	r2, [r3, #20]
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	4013      	ands	r3, r2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d006      	beq.n	80019a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800199a:	4a05      	ldr	r2, [pc, #20]	; (80019b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe ffb4 	bl	8000910 <HAL_GPIO_EXTI_Callback>
  }
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40013c00 	.word	0x40013c00

080019b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e25b      	b.n	8001e7e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d075      	beq.n	8001abe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019d2:	4ba3      	ldr	r3, [pc, #652]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d00c      	beq.n	80019f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019de:	4ba0      	ldr	r3, [pc, #640]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d112      	bne.n	8001a10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ea:	4b9d      	ldr	r3, [pc, #628]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019f6:	d10b      	bne.n	8001a10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f8:	4b99      	ldr	r3, [pc, #612]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d05b      	beq.n	8001abc <HAL_RCC_OscConfig+0x108>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d157      	bne.n	8001abc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e236      	b.n	8001e7e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a18:	d106      	bne.n	8001a28 <HAL_RCC_OscConfig+0x74>
 8001a1a:	4b91      	ldr	r3, [pc, #580]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a90      	ldr	r2, [pc, #576]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	e01d      	b.n	8001a64 <HAL_RCC_OscConfig+0xb0>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a30:	d10c      	bne.n	8001a4c <HAL_RCC_OscConfig+0x98>
 8001a32:	4b8b      	ldr	r3, [pc, #556]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a8a      	ldr	r2, [pc, #552]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 8001a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	4b88      	ldr	r3, [pc, #544]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a87      	ldr	r2, [pc, #540]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 8001a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	e00b      	b.n	8001a64 <HAL_RCC_OscConfig+0xb0>
 8001a4c:	4b84      	ldr	r3, [pc, #528]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a83      	ldr	r2, [pc, #524]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 8001a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	4b81      	ldr	r3, [pc, #516]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a80      	ldr	r2, [pc, #512]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 8001a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d013      	beq.n	8001a94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7ff f914 	bl	8000c98 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a74:	f7ff f910 	bl	8000c98 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b64      	cmp	r3, #100	; 0x64
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e1fb      	b.n	8001e7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	4b76      	ldr	r3, [pc, #472]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f0      	beq.n	8001a74 <HAL_RCC_OscConfig+0xc0>
 8001a92:	e014      	b.n	8001abe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a94:	f7ff f900 	bl	8000c98 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a9c:	f7ff f8fc 	bl	8000c98 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b64      	cmp	r3, #100	; 0x64
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e1e7      	b.n	8001e7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aae:	4b6c      	ldr	r3, [pc, #432]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0xe8>
 8001aba:	e000      	b.n	8001abe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d063      	beq.n	8001b92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aca:	4b65      	ldr	r3, [pc, #404]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00b      	beq.n	8001aee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ad6:	4b62      	ldr	r3, [pc, #392]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ade:	2b08      	cmp	r3, #8
 8001ae0:	d11c      	bne.n	8001b1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ae2:	4b5f      	ldr	r3, [pc, #380]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d116      	bne.n	8001b1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aee:	4b5c      	ldr	r3, [pc, #368]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d005      	beq.n	8001b06 <HAL_RCC_OscConfig+0x152>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d001      	beq.n	8001b06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e1bb      	b.n	8001e7e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b06:	4b56      	ldr	r3, [pc, #344]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	4952      	ldr	r1, [pc, #328]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b1a:	e03a      	b.n	8001b92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d020      	beq.n	8001b66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b24:	4b4f      	ldr	r3, [pc, #316]	; (8001c64 <HAL_RCC_OscConfig+0x2b0>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2a:	f7ff f8b5 	bl	8000c98 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b32:	f7ff f8b1 	bl	8000c98 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e19c      	b.n	8001e7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b44:	4b46      	ldr	r3, [pc, #280]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b50:	4b43      	ldr	r3, [pc, #268]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4940      	ldr	r1, [pc, #256]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	600b      	str	r3, [r1, #0]
 8001b64:	e015      	b.n	8001b92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b66:	4b3f      	ldr	r3, [pc, #252]	; (8001c64 <HAL_RCC_OscConfig+0x2b0>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6c:	f7ff f894 	bl	8000c98 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b74:	f7ff f890 	bl	8000c98 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e17b      	b.n	8001e7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b86:	4b36      	ldr	r3, [pc, #216]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d030      	beq.n	8001c00 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d016      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ba6:	4b30      	ldr	r3, [pc, #192]	; (8001c68 <HAL_RCC_OscConfig+0x2b4>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff f874 	bl	8000c98 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff f870 	bl	8000c98 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e15b      	b.n	8001e7e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc6:	4b26      	ldr	r3, [pc, #152]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x200>
 8001bd2:	e015      	b.n	8001c00 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd4:	4b24      	ldr	r3, [pc, #144]	; (8001c68 <HAL_RCC_OscConfig+0x2b4>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bda:	f7ff f85d 	bl	8000c98 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001be2:	f7ff f859 	bl	8000c98 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e144      	b.n	8001e7e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 8001bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1f0      	bne.n	8001be2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80a0 	beq.w	8001d4e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c12:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10f      	bne.n	8001c3e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	4a0e      	ldr	r2, [pc, #56]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <HAL_RCC_OscConfig+0x2ac>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <HAL_RCC_OscConfig+0x2b8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d121      	bne.n	8001c8e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <HAL_RCC_OscConfig+0x2b8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a07      	ldr	r2, [pc, #28]	; (8001c6c <HAL_RCC_OscConfig+0x2b8>)
 8001c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c56:	f7ff f81f 	bl	8000c98 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5c:	e011      	b.n	8001c82 <HAL_RCC_OscConfig+0x2ce>
 8001c5e:	bf00      	nop
 8001c60:	40023800 	.word	0x40023800
 8001c64:	42470000 	.word	0x42470000
 8001c68:	42470e80 	.word	0x42470e80
 8001c6c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c70:	f7ff f812 	bl	8000c98 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e0fd      	b.n	8001e7e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c82:	4b81      	ldr	r3, [pc, #516]	; (8001e88 <HAL_RCC_OscConfig+0x4d4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d106      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x2f0>
 8001c96:	4b7d      	ldr	r3, [pc, #500]	; (8001e8c <HAL_RCC_OscConfig+0x4d8>)
 8001c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9a:	4a7c      	ldr	r2, [pc, #496]	; (8001e8c <HAL_RCC_OscConfig+0x4d8>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca2:	e01c      	b.n	8001cde <HAL_RCC_OscConfig+0x32a>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b05      	cmp	r3, #5
 8001caa:	d10c      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x312>
 8001cac:	4b77      	ldr	r3, [pc, #476]	; (8001e8c <HAL_RCC_OscConfig+0x4d8>)
 8001cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb0:	4a76      	ldr	r2, [pc, #472]	; (8001e8c <HAL_RCC_OscConfig+0x4d8>)
 8001cb2:	f043 0304 	orr.w	r3, r3, #4
 8001cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb8:	4b74      	ldr	r3, [pc, #464]	; (8001e8c <HAL_RCC_OscConfig+0x4d8>)
 8001cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbc:	4a73      	ldr	r2, [pc, #460]	; (8001e8c <HAL_RCC_OscConfig+0x4d8>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc4:	e00b      	b.n	8001cde <HAL_RCC_OscConfig+0x32a>
 8001cc6:	4b71      	ldr	r3, [pc, #452]	; (8001e8c <HAL_RCC_OscConfig+0x4d8>)
 8001cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cca:	4a70      	ldr	r2, [pc, #448]	; (8001e8c <HAL_RCC_OscConfig+0x4d8>)
 8001ccc:	f023 0301 	bic.w	r3, r3, #1
 8001cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd2:	4b6e      	ldr	r3, [pc, #440]	; (8001e8c <HAL_RCC_OscConfig+0x4d8>)
 8001cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd6:	4a6d      	ldr	r2, [pc, #436]	; (8001e8c <HAL_RCC_OscConfig+0x4d8>)
 8001cd8:	f023 0304 	bic.w	r3, r3, #4
 8001cdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d015      	beq.n	8001d12 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce6:	f7fe ffd7 	bl	8000c98 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cec:	e00a      	b.n	8001d04 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cee:	f7fe ffd3 	bl	8000c98 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e0bc      	b.n	8001e7e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d04:	4b61      	ldr	r3, [pc, #388]	; (8001e8c <HAL_RCC_OscConfig+0x4d8>)
 8001d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0ee      	beq.n	8001cee <HAL_RCC_OscConfig+0x33a>
 8001d10:	e014      	b.n	8001d3c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d12:	f7fe ffc1 	bl	8000c98 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d18:	e00a      	b.n	8001d30 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d1a:	f7fe ffbd 	bl	8000c98 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e0a6      	b.n	8001e7e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d30:	4b56      	ldr	r3, [pc, #344]	; (8001e8c <HAL_RCC_OscConfig+0x4d8>)
 8001d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1ee      	bne.n	8001d1a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d3c:	7dfb      	ldrb	r3, [r7, #23]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d105      	bne.n	8001d4e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d42:	4b52      	ldr	r3, [pc, #328]	; (8001e8c <HAL_RCC_OscConfig+0x4d8>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	4a51      	ldr	r2, [pc, #324]	; (8001e8c <HAL_RCC_OscConfig+0x4d8>)
 8001d48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 8092 	beq.w	8001e7c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d58:	4b4c      	ldr	r3, [pc, #304]	; (8001e8c <HAL_RCC_OscConfig+0x4d8>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 030c 	and.w	r3, r3, #12
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d05c      	beq.n	8001e1e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d141      	bne.n	8001df0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6c:	4b48      	ldr	r3, [pc, #288]	; (8001e90 <HAL_RCC_OscConfig+0x4dc>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d72:	f7fe ff91 	bl	8000c98 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d7a:	f7fe ff8d 	bl	8000c98 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e078      	b.n	8001e7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d8c:	4b3f      	ldr	r3, [pc, #252]	; (8001e8c <HAL_RCC_OscConfig+0x4d8>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f0      	bne.n	8001d7a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69da      	ldr	r2, [r3, #28]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	431a      	orrs	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	019b      	lsls	r3, r3, #6
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dae:	085b      	lsrs	r3, r3, #1
 8001db0:	3b01      	subs	r3, #1
 8001db2:	041b      	lsls	r3, r3, #16
 8001db4:	431a      	orrs	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	061b      	lsls	r3, r3, #24
 8001dbc:	4933      	ldr	r1, [pc, #204]	; (8001e8c <HAL_RCC_OscConfig+0x4d8>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dc2:	4b33      	ldr	r3, [pc, #204]	; (8001e90 <HAL_RCC_OscConfig+0x4dc>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7fe ff66 	bl	8000c98 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd0:	f7fe ff62 	bl	8000c98 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e04d      	b.n	8001e7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de2:	4b2a      	ldr	r3, [pc, #168]	; (8001e8c <HAL_RCC_OscConfig+0x4d8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x41c>
 8001dee:	e045      	b.n	8001e7c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df0:	4b27      	ldr	r3, [pc, #156]	; (8001e90 <HAL_RCC_OscConfig+0x4dc>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df6:	f7fe ff4f 	bl	8000c98 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dfe:	f7fe ff4b 	bl	8000c98 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e036      	b.n	8001e7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e10:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <HAL_RCC_OscConfig+0x4d8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1f0      	bne.n	8001dfe <HAL_RCC_OscConfig+0x44a>
 8001e1c:	e02e      	b.n	8001e7c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d101      	bne.n	8001e2a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e029      	b.n	8001e7e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e2a:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <HAL_RCC_OscConfig+0x4d8>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d11c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d115      	bne.n	8001e78 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e52:	4013      	ands	r3, r2
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d10d      	bne.n	8001e78 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d106      	bne.n	8001e78 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d001      	beq.n	8001e7c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40007000 	.word	0x40007000
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	42470060 	.word	0x42470060

08001e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e0cc      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea8:	4b68      	ldr	r3, [pc, #416]	; (800204c <HAL_RCC_ClockConfig+0x1b8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 030f 	and.w	r3, r3, #15
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d90c      	bls.n	8001ed0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb6:	4b65      	ldr	r3, [pc, #404]	; (800204c <HAL_RCC_ClockConfig+0x1b8>)
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebe:	4b63      	ldr	r3, [pc, #396]	; (800204c <HAL_RCC_ClockConfig+0x1b8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0b8      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d020      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee8:	4b59      	ldr	r3, [pc, #356]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4a58      	ldr	r2, [pc, #352]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ef2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f00:	4b53      	ldr	r3, [pc, #332]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	4a52      	ldr	r2, [pc, #328]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f0c:	4b50      	ldr	r3, [pc, #320]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	494d      	ldr	r1, [pc, #308]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d044      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d107      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	4b47      	ldr	r3, [pc, #284]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d119      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e07f      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d003      	beq.n	8001f52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d107      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f52:	4b3f      	ldr	r3, [pc, #252]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d109      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e06f      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f62:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e067      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f72:	4b37      	ldr	r3, [pc, #220]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f023 0203 	bic.w	r2, r3, #3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	4934      	ldr	r1, [pc, #208]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f84:	f7fe fe88 	bl	8000c98 <HAL_GetTick>
 8001f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8a:	e00a      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f8c:	f7fe fe84 	bl	8000c98 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e04f      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa2:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 020c 	and.w	r2, r3, #12
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d1eb      	bne.n	8001f8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb4:	4b25      	ldr	r3, [pc, #148]	; (800204c <HAL_RCC_ClockConfig+0x1b8>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 030f 	and.w	r3, r3, #15
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d20c      	bcs.n	8001fdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc2:	4b22      	ldr	r3, [pc, #136]	; (800204c <HAL_RCC_ClockConfig+0x1b8>)
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fca:	4b20      	ldr	r3, [pc, #128]	; (800204c <HAL_RCC_ClockConfig+0x1b8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d001      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e032      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d008      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe8:	4b19      	ldr	r3, [pc, #100]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4916      	ldr	r1, [pc, #88]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d009      	beq.n	800201a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002006:	4b12      	ldr	r3, [pc, #72]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	490e      	ldr	r1, [pc, #56]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	4313      	orrs	r3, r2
 8002018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800201a:	f000 f821 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 800201e:	4601      	mov	r1, r0
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <HAL_RCC_ClockConfig+0x1c0>)
 800202c:	5cd3      	ldrb	r3, [r2, r3]
 800202e:	fa21 f303 	lsr.w	r3, r1, r3
 8002032:	4a09      	ldr	r2, [pc, #36]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002036:	4b09      	ldr	r3, [pc, #36]	; (800205c <HAL_RCC_ClockConfig+0x1c8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fd34 	bl	8000aa8 <HAL_InitTick>

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023c00 	.word	0x40023c00
 8002050:	40023800 	.word	0x40023800
 8002054:	08005868 	.word	0x08005868
 8002058:	20000000 	.word	0x20000000
 800205c:	20000004 	.word	0x20000004

08002060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	2300      	movs	r3, #0
 8002070:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002072:	2300      	movs	r3, #0
 8002074:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002076:	4b63      	ldr	r3, [pc, #396]	; (8002204 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b04      	cmp	r3, #4
 8002080:	d007      	beq.n	8002092 <HAL_RCC_GetSysClockFreq+0x32>
 8002082:	2b08      	cmp	r3, #8
 8002084:	d008      	beq.n	8002098 <HAL_RCC_GetSysClockFreq+0x38>
 8002086:	2b00      	cmp	r3, #0
 8002088:	f040 80b4 	bne.w	80021f4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800208c:	4b5e      	ldr	r3, [pc, #376]	; (8002208 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800208e:	60bb      	str	r3, [r7, #8]
       break;
 8002090:	e0b3      	b.n	80021fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002092:	4b5e      	ldr	r3, [pc, #376]	; (800220c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002094:	60bb      	str	r3, [r7, #8]
      break;
 8002096:	e0b0      	b.n	80021fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002098:	4b5a      	ldr	r3, [pc, #360]	; (8002204 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020a2:	4b58      	ldr	r3, [pc, #352]	; (8002204 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d04a      	beq.n	8002144 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ae:	4b55      	ldr	r3, [pc, #340]	; (8002204 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	099b      	lsrs	r3, r3, #6
 80020b4:	f04f 0400 	mov.w	r4, #0
 80020b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020bc:	f04f 0200 	mov.w	r2, #0
 80020c0:	ea03 0501 	and.w	r5, r3, r1
 80020c4:	ea04 0602 	and.w	r6, r4, r2
 80020c8:	4629      	mov	r1, r5
 80020ca:	4632      	mov	r2, r6
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	f04f 0400 	mov.w	r4, #0
 80020d4:	0154      	lsls	r4, r2, #5
 80020d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020da:	014b      	lsls	r3, r1, #5
 80020dc:	4619      	mov	r1, r3
 80020de:	4622      	mov	r2, r4
 80020e0:	1b49      	subs	r1, r1, r5
 80020e2:	eb62 0206 	sbc.w	r2, r2, r6
 80020e6:	f04f 0300 	mov.w	r3, #0
 80020ea:	f04f 0400 	mov.w	r4, #0
 80020ee:	0194      	lsls	r4, r2, #6
 80020f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020f4:	018b      	lsls	r3, r1, #6
 80020f6:	1a5b      	subs	r3, r3, r1
 80020f8:	eb64 0402 	sbc.w	r4, r4, r2
 80020fc:	f04f 0100 	mov.w	r1, #0
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	00e2      	lsls	r2, r4, #3
 8002106:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800210a:	00d9      	lsls	r1, r3, #3
 800210c:	460b      	mov	r3, r1
 800210e:	4614      	mov	r4, r2
 8002110:	195b      	adds	r3, r3, r5
 8002112:	eb44 0406 	adc.w	r4, r4, r6
 8002116:	f04f 0100 	mov.w	r1, #0
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	0262      	lsls	r2, r4, #9
 8002120:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002124:	0259      	lsls	r1, r3, #9
 8002126:	460b      	mov	r3, r1
 8002128:	4614      	mov	r4, r2
 800212a:	4618      	mov	r0, r3
 800212c:	4621      	mov	r1, r4
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f04f 0400 	mov.w	r4, #0
 8002134:	461a      	mov	r2, r3
 8002136:	4623      	mov	r3, r4
 8002138:	f7fe f852 	bl	80001e0 <__aeabi_uldivmod>
 800213c:	4603      	mov	r3, r0
 800213e:	460c      	mov	r4, r1
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	e049      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002144:	4b2f      	ldr	r3, [pc, #188]	; (8002204 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	099b      	lsrs	r3, r3, #6
 800214a:	f04f 0400 	mov.w	r4, #0
 800214e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	ea03 0501 	and.w	r5, r3, r1
 800215a:	ea04 0602 	and.w	r6, r4, r2
 800215e:	4629      	mov	r1, r5
 8002160:	4632      	mov	r2, r6
 8002162:	f04f 0300 	mov.w	r3, #0
 8002166:	f04f 0400 	mov.w	r4, #0
 800216a:	0154      	lsls	r4, r2, #5
 800216c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002170:	014b      	lsls	r3, r1, #5
 8002172:	4619      	mov	r1, r3
 8002174:	4622      	mov	r2, r4
 8002176:	1b49      	subs	r1, r1, r5
 8002178:	eb62 0206 	sbc.w	r2, r2, r6
 800217c:	f04f 0300 	mov.w	r3, #0
 8002180:	f04f 0400 	mov.w	r4, #0
 8002184:	0194      	lsls	r4, r2, #6
 8002186:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800218a:	018b      	lsls	r3, r1, #6
 800218c:	1a5b      	subs	r3, r3, r1
 800218e:	eb64 0402 	sbc.w	r4, r4, r2
 8002192:	f04f 0100 	mov.w	r1, #0
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	00e2      	lsls	r2, r4, #3
 800219c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021a0:	00d9      	lsls	r1, r3, #3
 80021a2:	460b      	mov	r3, r1
 80021a4:	4614      	mov	r4, r2
 80021a6:	195b      	adds	r3, r3, r5
 80021a8:	eb44 0406 	adc.w	r4, r4, r6
 80021ac:	f04f 0100 	mov.w	r1, #0
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	02a2      	lsls	r2, r4, #10
 80021b6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80021ba:	0299      	lsls	r1, r3, #10
 80021bc:	460b      	mov	r3, r1
 80021be:	4614      	mov	r4, r2
 80021c0:	4618      	mov	r0, r3
 80021c2:	4621      	mov	r1, r4
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f04f 0400 	mov.w	r4, #0
 80021ca:	461a      	mov	r2, r3
 80021cc:	4623      	mov	r3, r4
 80021ce:	f7fe f807 	bl	80001e0 <__aeabi_uldivmod>
 80021d2:	4603      	mov	r3, r0
 80021d4:	460c      	mov	r4, r1
 80021d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021d8:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	0c1b      	lsrs	r3, r3, #16
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	3301      	adds	r3, #1
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f0:	60bb      	str	r3, [r7, #8]
      break;
 80021f2:	e002      	b.n	80021fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021f4:	4b04      	ldr	r3, [pc, #16]	; (8002208 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80021f6:	60bb      	str	r3, [r7, #8]
      break;
 80021f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021fa:	68bb      	ldr	r3, [r7, #8]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002204:	40023800 	.word	0x40023800
 8002208:	00f42400 	.word	0x00f42400
 800220c:	007a1200 	.word	0x007a1200

08002210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002214:	4b03      	ldr	r3, [pc, #12]	; (8002224 <HAL_RCC_GetHCLKFreq+0x14>)
 8002216:	681b      	ldr	r3, [r3, #0]
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	20000000 	.word	0x20000000

08002228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800222c:	f7ff fff0 	bl	8002210 <HAL_RCC_GetHCLKFreq>
 8002230:	4601      	mov	r1, r0
 8002232:	4b05      	ldr	r3, [pc, #20]	; (8002248 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	0a9b      	lsrs	r3, r3, #10
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	4a03      	ldr	r2, [pc, #12]	; (800224c <HAL_RCC_GetPCLK1Freq+0x24>)
 800223e:	5cd3      	ldrb	r3, [r2, r3]
 8002240:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002244:	4618      	mov	r0, r3
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40023800 	.word	0x40023800
 800224c:	08005878 	.word	0x08005878

08002250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002254:	f7ff ffdc 	bl	8002210 <HAL_RCC_GetHCLKFreq>
 8002258:	4601      	mov	r1, r0
 800225a:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_RCC_GetPCLK2Freq+0x20>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	0b5b      	lsrs	r3, r3, #13
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	4a03      	ldr	r2, [pc, #12]	; (8002274 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002266:	5cd3      	ldrb	r3, [r2, r3]
 8002268:	fa21 f303 	lsr.w	r3, r1, r3
}
 800226c:	4618      	mov	r0, r3
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40023800 	.word	0x40023800
 8002274:	08005878 	.word	0x08005878

08002278 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	220f      	movs	r2, #15
 8002286:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002288:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <HAL_RCC_GetClockConfig+0x5c>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 0203 	and.w	r2, r3, #3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002294:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <HAL_RCC_GetClockConfig+0x5c>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <HAL_RCC_GetClockConfig+0x5c>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80022ac:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_RCC_GetClockConfig+0x5c>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	08db      	lsrs	r3, r3, #3
 80022b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80022ba:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <HAL_RCC_GetClockConfig+0x60>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 020f 	and.w	r2, r3, #15
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	601a      	str	r2, [r3, #0]
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40023c00 	.word	0x40023c00

080022dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e01d      	b.n	800232a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d106      	bne.n	8002308 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f815 	bl	8002332 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3304      	adds	r3, #4
 8002318:	4619      	mov	r1, r3
 800231a:	4610      	mov	r0, r2
 800231c:	f000 f968 	bl	80025f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002346:	b480      	push	{r7}
 8002348:	b085      	sub	sp, #20
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 0201 	orr.w	r2, r2, #1
 800235c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b06      	cmp	r3, #6
 800236e:	d007      	beq.n	8002380 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0201 	orr.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d122      	bne.n	80023ea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d11b      	bne.n	80023ea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f06f 0202 	mvn.w	r2, #2
 80023ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f8ee 	bl	80025b2 <HAL_TIM_IC_CaptureCallback>
 80023d6:	e005      	b.n	80023e4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f8e0 	bl	800259e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f8f1 	bl	80025c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d122      	bne.n	800243e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	2b04      	cmp	r3, #4
 8002404:	d11b      	bne.n	800243e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f06f 0204 	mvn.w	r2, #4
 800240e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2202      	movs	r2, #2
 8002414:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f8c4 	bl	80025b2 <HAL_TIM_IC_CaptureCallback>
 800242a:	e005      	b.n	8002438 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f8b6 	bl	800259e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f8c7 	bl	80025c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b08      	cmp	r3, #8
 800244a:	d122      	bne.n	8002492 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b08      	cmp	r3, #8
 8002458:	d11b      	bne.n	8002492 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f06f 0208 	mvn.w	r2, #8
 8002462:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2204      	movs	r2, #4
 8002468:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f89a 	bl	80025b2 <HAL_TIM_IC_CaptureCallback>
 800247e:	e005      	b.n	800248c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f88c 	bl	800259e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f89d 	bl	80025c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	2b10      	cmp	r3, #16
 800249e:	d122      	bne.n	80024e6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	2b10      	cmp	r3, #16
 80024ac:	d11b      	bne.n	80024e6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f06f 0210 	mvn.w	r2, #16
 80024b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2208      	movs	r2, #8
 80024bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f870 	bl	80025b2 <HAL_TIM_IC_CaptureCallback>
 80024d2:	e005      	b.n	80024e0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f862 	bl	800259e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f873 	bl	80025c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d10e      	bne.n	8002512 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d107      	bne.n	8002512 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f06f 0201 	mvn.w	r2, #1
 800250a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7fe f9ed 	bl	80008ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251c:	2b80      	cmp	r3, #128	; 0x80
 800251e:	d10e      	bne.n	800253e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252a:	2b80      	cmp	r3, #128	; 0x80
 800252c:	d107      	bne.n	800253e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f903 	bl	8002744 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002548:	2b40      	cmp	r3, #64	; 0x40
 800254a:	d10e      	bne.n	800256a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002556:	2b40      	cmp	r3, #64	; 0x40
 8002558:	d107      	bne.n	800256a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f838 	bl	80025da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	f003 0320 	and.w	r3, r3, #32
 8002574:	2b20      	cmp	r3, #32
 8002576:	d10e      	bne.n	8002596 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f003 0320 	and.w	r3, r3, #32
 8002582:	2b20      	cmp	r3, #32
 8002584:	d107      	bne.n	8002596 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f06f 0220 	mvn.w	r2, #32
 800258e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 f8cd 	bl	8002730 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
	...

080025f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a40      	ldr	r2, [pc, #256]	; (8002704 <TIM_Base_SetConfig+0x114>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d013      	beq.n	8002630 <TIM_Base_SetConfig+0x40>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800260e:	d00f      	beq.n	8002630 <TIM_Base_SetConfig+0x40>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a3d      	ldr	r2, [pc, #244]	; (8002708 <TIM_Base_SetConfig+0x118>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d00b      	beq.n	8002630 <TIM_Base_SetConfig+0x40>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a3c      	ldr	r2, [pc, #240]	; (800270c <TIM_Base_SetConfig+0x11c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d007      	beq.n	8002630 <TIM_Base_SetConfig+0x40>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a3b      	ldr	r2, [pc, #236]	; (8002710 <TIM_Base_SetConfig+0x120>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d003      	beq.n	8002630 <TIM_Base_SetConfig+0x40>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a3a      	ldr	r2, [pc, #232]	; (8002714 <TIM_Base_SetConfig+0x124>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d108      	bne.n	8002642 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	4313      	orrs	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a2f      	ldr	r2, [pc, #188]	; (8002704 <TIM_Base_SetConfig+0x114>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d02b      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002650:	d027      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a2c      	ldr	r2, [pc, #176]	; (8002708 <TIM_Base_SetConfig+0x118>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d023      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a2b      	ldr	r2, [pc, #172]	; (800270c <TIM_Base_SetConfig+0x11c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d01f      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a2a      	ldr	r2, [pc, #168]	; (8002710 <TIM_Base_SetConfig+0x120>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d01b      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a29      	ldr	r2, [pc, #164]	; (8002714 <TIM_Base_SetConfig+0x124>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d017      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a28      	ldr	r2, [pc, #160]	; (8002718 <TIM_Base_SetConfig+0x128>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d013      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a27      	ldr	r2, [pc, #156]	; (800271c <TIM_Base_SetConfig+0x12c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00f      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a26      	ldr	r2, [pc, #152]	; (8002720 <TIM_Base_SetConfig+0x130>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d00b      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a25      	ldr	r2, [pc, #148]	; (8002724 <TIM_Base_SetConfig+0x134>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d007      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a24      	ldr	r2, [pc, #144]	; (8002728 <TIM_Base_SetConfig+0x138>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d003      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a23      	ldr	r2, [pc, #140]	; (800272c <TIM_Base_SetConfig+0x13c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d108      	bne.n	80026b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	4313      	orrs	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <TIM_Base_SetConfig+0x114>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d003      	beq.n	80026e8 <TIM_Base_SetConfig+0xf8>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a0c      	ldr	r2, [pc, #48]	; (8002714 <TIM_Base_SetConfig+0x124>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d103      	bne.n	80026f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	615a      	str	r2, [r3, #20]
}
 80026f6:	bf00      	nop
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	40010000 	.word	0x40010000
 8002708:	40000400 	.word	0x40000400
 800270c:	40000800 	.word	0x40000800
 8002710:	40000c00 	.word	0x40000c00
 8002714:	40010400 	.word	0x40010400
 8002718:	40014000 	.word	0x40014000
 800271c:	40014400 	.word	0x40014400
 8002720:	40014800 	.word	0x40014800
 8002724:	40001800 	.word	0x40001800
 8002728:	40001c00 	.word	0x40001c00
 800272c:	40002000 	.word	0x40002000

08002730 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e03f      	b.n	80027ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d106      	bne.n	8002784 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fe f94a 	bl	8000a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2224      	movs	r2, #36	; 0x24
 8002788:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800279a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f90b 	bl	80029b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695a      	ldr	r2, [r3, #20]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68da      	ldr	r2, [r3, #12]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b088      	sub	sp, #32
 80027f6:	af02      	add	r7, sp, #8
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	603b      	str	r3, [r7, #0]
 80027fe:	4613      	mov	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b20      	cmp	r3, #32
 8002810:	f040 8083 	bne.w	800291a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d002      	beq.n	8002820 <HAL_UART_Transmit+0x2e>
 800281a:	88fb      	ldrh	r3, [r7, #6]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e07b      	b.n	800291c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_UART_Transmit+0x40>
 800282e:	2302      	movs	r3, #2
 8002830:	e074      	b.n	800291c <HAL_UART_Transmit+0x12a>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2221      	movs	r2, #33	; 0x21
 8002844:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002848:	f7fe fa26 	bl	8000c98 <HAL_GetTick>
 800284c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	88fa      	ldrh	r2, [r7, #6]
 8002852:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	88fa      	ldrh	r2, [r7, #6]
 8002858:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002862:	e042      	b.n	80028ea <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002868:	b29b      	uxth	r3, r3
 800286a:	3b01      	subs	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800287a:	d122      	bne.n	80028c2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	2200      	movs	r2, #0
 8002884:	2180      	movs	r1, #128	; 0x80
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 f84c 	bl	8002924 <UART_WaitOnFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e042      	b.n	800291c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028a8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d103      	bne.n	80028ba <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	3302      	adds	r3, #2
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	e017      	b.n	80028ea <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	3301      	adds	r3, #1
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	e013      	b.n	80028ea <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2200      	movs	r2, #0
 80028ca:	2180      	movs	r1, #128	; 0x80
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 f829 	bl	8002924 <UART_WaitOnFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e01f      	b.n	800291c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	60ba      	str	r2, [r7, #8]
 80028e2:	781a      	ldrb	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1b7      	bne.n	8002864 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	2200      	movs	r2, #0
 80028fc:	2140      	movs	r1, #64	; 0x40
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 f810 	bl	8002924 <UART_WaitOnFlagUntilTimeout>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e006      	b.n	800291c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2220      	movs	r2, #32
 8002912:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	e000      	b.n	800291c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800291a:	2302      	movs	r3, #2
  }
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	603b      	str	r3, [r7, #0]
 8002930:	4613      	mov	r3, r2
 8002932:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002934:	e02c      	b.n	8002990 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293c:	d028      	beq.n	8002990 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d007      	beq.n	8002954 <UART_WaitOnFlagUntilTimeout+0x30>
 8002944:	f7fe f9a8 	bl	8000c98 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	429a      	cmp	r2, r3
 8002952:	d21d      	bcs.n	8002990 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002962:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695a      	ldr	r2, [r3, #20]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0201 	bic.w	r2, r2, #1
 8002972:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e00f      	b.n	80029b0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	4013      	ands	r3, r2
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	429a      	cmp	r2, r3
 800299e:	bf0c      	ite	eq
 80029a0:	2301      	moveq	r3, #1
 80029a2:	2300      	movne	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	461a      	mov	r2, r3
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d0c3      	beq.n	8002936 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029bc:	b085      	sub	sp, #20
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80029fa:	f023 030c 	bic.w	r3, r3, #12
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	68f9      	ldr	r1, [r7, #12]
 8002a04:	430b      	orrs	r3, r1
 8002a06:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699a      	ldr	r2, [r3, #24]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a26:	f040 818b 	bne.w	8002d40 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4ac1      	ldr	r2, [pc, #772]	; (8002d34 <UART_SetConfig+0x37c>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d005      	beq.n	8002a40 <UART_SetConfig+0x88>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4abf      	ldr	r2, [pc, #764]	; (8002d38 <UART_SetConfig+0x380>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	f040 80bd 	bne.w	8002bba <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a40:	f7ff fc06 	bl	8002250 <HAL_RCC_GetPCLK2Freq>
 8002a44:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	461d      	mov	r5, r3
 8002a4a:	f04f 0600 	mov.w	r6, #0
 8002a4e:	46a8      	mov	r8, r5
 8002a50:	46b1      	mov	r9, r6
 8002a52:	eb18 0308 	adds.w	r3, r8, r8
 8002a56:	eb49 0409 	adc.w	r4, r9, r9
 8002a5a:	4698      	mov	r8, r3
 8002a5c:	46a1      	mov	r9, r4
 8002a5e:	eb18 0805 	adds.w	r8, r8, r5
 8002a62:	eb49 0906 	adc.w	r9, r9, r6
 8002a66:	f04f 0100 	mov.w	r1, #0
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a72:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a76:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a7a:	4688      	mov	r8, r1
 8002a7c:	4691      	mov	r9, r2
 8002a7e:	eb18 0005 	adds.w	r0, r8, r5
 8002a82:	eb49 0106 	adc.w	r1, r9, r6
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	461d      	mov	r5, r3
 8002a8c:	f04f 0600 	mov.w	r6, #0
 8002a90:	196b      	adds	r3, r5, r5
 8002a92:	eb46 0406 	adc.w	r4, r6, r6
 8002a96:	461a      	mov	r2, r3
 8002a98:	4623      	mov	r3, r4
 8002a9a:	f7fd fba1 	bl	80001e0 <__aeabi_uldivmod>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	460c      	mov	r4, r1
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	4ba5      	ldr	r3, [pc, #660]	; (8002d3c <UART_SetConfig+0x384>)
 8002aa6:	fba3 2302 	umull	r2, r3, r3, r2
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	461d      	mov	r5, r3
 8002ab4:	f04f 0600 	mov.w	r6, #0
 8002ab8:	46a9      	mov	r9, r5
 8002aba:	46b2      	mov	sl, r6
 8002abc:	eb19 0309 	adds.w	r3, r9, r9
 8002ac0:	eb4a 040a 	adc.w	r4, sl, sl
 8002ac4:	4699      	mov	r9, r3
 8002ac6:	46a2      	mov	sl, r4
 8002ac8:	eb19 0905 	adds.w	r9, r9, r5
 8002acc:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ad0:	f04f 0100 	mov.w	r1, #0
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002adc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ae0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ae4:	4689      	mov	r9, r1
 8002ae6:	4692      	mov	sl, r2
 8002ae8:	eb19 0005 	adds.w	r0, r9, r5
 8002aec:	eb4a 0106 	adc.w	r1, sl, r6
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	461d      	mov	r5, r3
 8002af6:	f04f 0600 	mov.w	r6, #0
 8002afa:	196b      	adds	r3, r5, r5
 8002afc:	eb46 0406 	adc.w	r4, r6, r6
 8002b00:	461a      	mov	r2, r3
 8002b02:	4623      	mov	r3, r4
 8002b04:	f7fd fb6c 	bl	80001e0 <__aeabi_uldivmod>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	460c      	mov	r4, r1
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4b8b      	ldr	r3, [pc, #556]	; (8002d3c <UART_SetConfig+0x384>)
 8002b10:	fba3 1302 	umull	r1, r3, r3, r2
 8002b14:	095b      	lsrs	r3, r3, #5
 8002b16:	2164      	movs	r1, #100	; 0x64
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	3332      	adds	r3, #50	; 0x32
 8002b22:	4a86      	ldr	r2, [pc, #536]	; (8002d3c <UART_SetConfig+0x384>)
 8002b24:	fba2 2303 	umull	r2, r3, r2, r3
 8002b28:	095b      	lsrs	r3, r3, #5
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b30:	4498      	add	r8, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	461d      	mov	r5, r3
 8002b36:	f04f 0600 	mov.w	r6, #0
 8002b3a:	46a9      	mov	r9, r5
 8002b3c:	46b2      	mov	sl, r6
 8002b3e:	eb19 0309 	adds.w	r3, r9, r9
 8002b42:	eb4a 040a 	adc.w	r4, sl, sl
 8002b46:	4699      	mov	r9, r3
 8002b48:	46a2      	mov	sl, r4
 8002b4a:	eb19 0905 	adds.w	r9, r9, r5
 8002b4e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002b52:	f04f 0100 	mov.w	r1, #0
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b66:	4689      	mov	r9, r1
 8002b68:	4692      	mov	sl, r2
 8002b6a:	eb19 0005 	adds.w	r0, r9, r5
 8002b6e:	eb4a 0106 	adc.w	r1, sl, r6
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	461d      	mov	r5, r3
 8002b78:	f04f 0600 	mov.w	r6, #0
 8002b7c:	196b      	adds	r3, r5, r5
 8002b7e:	eb46 0406 	adc.w	r4, r6, r6
 8002b82:	461a      	mov	r2, r3
 8002b84:	4623      	mov	r3, r4
 8002b86:	f7fd fb2b 	bl	80001e0 <__aeabi_uldivmod>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	460c      	mov	r4, r1
 8002b8e:	461a      	mov	r2, r3
 8002b90:	4b6a      	ldr	r3, [pc, #424]	; (8002d3c <UART_SetConfig+0x384>)
 8002b92:	fba3 1302 	umull	r1, r3, r3, r2
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	2164      	movs	r1, #100	; 0x64
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	3332      	adds	r3, #50	; 0x32
 8002ba4:	4a65      	ldr	r2, [pc, #404]	; (8002d3c <UART_SetConfig+0x384>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	f003 0207 	and.w	r2, r3, #7
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4442      	add	r2, r8
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	e26f      	b.n	800309a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bba:	f7ff fb35 	bl	8002228 <HAL_RCC_GetPCLK1Freq>
 8002bbe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	461d      	mov	r5, r3
 8002bc4:	f04f 0600 	mov.w	r6, #0
 8002bc8:	46a8      	mov	r8, r5
 8002bca:	46b1      	mov	r9, r6
 8002bcc:	eb18 0308 	adds.w	r3, r8, r8
 8002bd0:	eb49 0409 	adc.w	r4, r9, r9
 8002bd4:	4698      	mov	r8, r3
 8002bd6:	46a1      	mov	r9, r4
 8002bd8:	eb18 0805 	adds.w	r8, r8, r5
 8002bdc:	eb49 0906 	adc.w	r9, r9, r6
 8002be0:	f04f 0100 	mov.w	r1, #0
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002bec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002bf0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002bf4:	4688      	mov	r8, r1
 8002bf6:	4691      	mov	r9, r2
 8002bf8:	eb18 0005 	adds.w	r0, r8, r5
 8002bfc:	eb49 0106 	adc.w	r1, r9, r6
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	461d      	mov	r5, r3
 8002c06:	f04f 0600 	mov.w	r6, #0
 8002c0a:	196b      	adds	r3, r5, r5
 8002c0c:	eb46 0406 	adc.w	r4, r6, r6
 8002c10:	461a      	mov	r2, r3
 8002c12:	4623      	mov	r3, r4
 8002c14:	f7fd fae4 	bl	80001e0 <__aeabi_uldivmod>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	460c      	mov	r4, r1
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b47      	ldr	r3, [pc, #284]	; (8002d3c <UART_SetConfig+0x384>)
 8002c20:	fba3 2302 	umull	r2, r3, r3, r2
 8002c24:	095b      	lsrs	r3, r3, #5
 8002c26:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	461d      	mov	r5, r3
 8002c2e:	f04f 0600 	mov.w	r6, #0
 8002c32:	46a9      	mov	r9, r5
 8002c34:	46b2      	mov	sl, r6
 8002c36:	eb19 0309 	adds.w	r3, r9, r9
 8002c3a:	eb4a 040a 	adc.w	r4, sl, sl
 8002c3e:	4699      	mov	r9, r3
 8002c40:	46a2      	mov	sl, r4
 8002c42:	eb19 0905 	adds.w	r9, r9, r5
 8002c46:	eb4a 0a06 	adc.w	sl, sl, r6
 8002c4a:	f04f 0100 	mov.w	r1, #0
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c5e:	4689      	mov	r9, r1
 8002c60:	4692      	mov	sl, r2
 8002c62:	eb19 0005 	adds.w	r0, r9, r5
 8002c66:	eb4a 0106 	adc.w	r1, sl, r6
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	461d      	mov	r5, r3
 8002c70:	f04f 0600 	mov.w	r6, #0
 8002c74:	196b      	adds	r3, r5, r5
 8002c76:	eb46 0406 	adc.w	r4, r6, r6
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	4623      	mov	r3, r4
 8002c7e:	f7fd faaf 	bl	80001e0 <__aeabi_uldivmod>
 8002c82:	4603      	mov	r3, r0
 8002c84:	460c      	mov	r4, r1
 8002c86:	461a      	mov	r2, r3
 8002c88:	4b2c      	ldr	r3, [pc, #176]	; (8002d3c <UART_SetConfig+0x384>)
 8002c8a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c8e:	095b      	lsrs	r3, r3, #5
 8002c90:	2164      	movs	r1, #100	; 0x64
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	3332      	adds	r3, #50	; 0x32
 8002c9c:	4a27      	ldr	r2, [pc, #156]	; (8002d3c <UART_SetConfig+0x384>)
 8002c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca2:	095b      	lsrs	r3, r3, #5
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002caa:	4498      	add	r8, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	461d      	mov	r5, r3
 8002cb0:	f04f 0600 	mov.w	r6, #0
 8002cb4:	46a9      	mov	r9, r5
 8002cb6:	46b2      	mov	sl, r6
 8002cb8:	eb19 0309 	adds.w	r3, r9, r9
 8002cbc:	eb4a 040a 	adc.w	r4, sl, sl
 8002cc0:	4699      	mov	r9, r3
 8002cc2:	46a2      	mov	sl, r4
 8002cc4:	eb19 0905 	adds.w	r9, r9, r5
 8002cc8:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ccc:	f04f 0100 	mov.w	r1, #0
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cd8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cdc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ce0:	4689      	mov	r9, r1
 8002ce2:	4692      	mov	sl, r2
 8002ce4:	eb19 0005 	adds.w	r0, r9, r5
 8002ce8:	eb4a 0106 	adc.w	r1, sl, r6
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	461d      	mov	r5, r3
 8002cf2:	f04f 0600 	mov.w	r6, #0
 8002cf6:	196b      	adds	r3, r5, r5
 8002cf8:	eb46 0406 	adc.w	r4, r6, r6
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4623      	mov	r3, r4
 8002d00:	f7fd fa6e 	bl	80001e0 <__aeabi_uldivmod>
 8002d04:	4603      	mov	r3, r0
 8002d06:	460c      	mov	r4, r1
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <UART_SetConfig+0x384>)
 8002d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d10:	095b      	lsrs	r3, r3, #5
 8002d12:	2164      	movs	r1, #100	; 0x64
 8002d14:	fb01 f303 	mul.w	r3, r1, r3
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	3332      	adds	r3, #50	; 0x32
 8002d1e:	4a07      	ldr	r2, [pc, #28]	; (8002d3c <UART_SetConfig+0x384>)
 8002d20:	fba2 2303 	umull	r2, r3, r2, r3
 8002d24:	095b      	lsrs	r3, r3, #5
 8002d26:	f003 0207 	and.w	r2, r3, #7
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4442      	add	r2, r8
 8002d30:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002d32:	e1b2      	b.n	800309a <UART_SetConfig+0x6e2>
 8002d34:	40011000 	.word	0x40011000
 8002d38:	40011400 	.word	0x40011400
 8002d3c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4ad7      	ldr	r2, [pc, #860]	; (80030a4 <UART_SetConfig+0x6ec>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d005      	beq.n	8002d56 <UART_SetConfig+0x39e>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4ad6      	ldr	r2, [pc, #856]	; (80030a8 <UART_SetConfig+0x6f0>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	f040 80d1 	bne.w	8002ef8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d56:	f7ff fa7b 	bl	8002250 <HAL_RCC_GetPCLK2Freq>
 8002d5a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	469a      	mov	sl, r3
 8002d60:	f04f 0b00 	mov.w	fp, #0
 8002d64:	46d0      	mov	r8, sl
 8002d66:	46d9      	mov	r9, fp
 8002d68:	eb18 0308 	adds.w	r3, r8, r8
 8002d6c:	eb49 0409 	adc.w	r4, r9, r9
 8002d70:	4698      	mov	r8, r3
 8002d72:	46a1      	mov	r9, r4
 8002d74:	eb18 080a 	adds.w	r8, r8, sl
 8002d78:	eb49 090b 	adc.w	r9, r9, fp
 8002d7c:	f04f 0100 	mov.w	r1, #0
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d88:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d8c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d90:	4688      	mov	r8, r1
 8002d92:	4691      	mov	r9, r2
 8002d94:	eb1a 0508 	adds.w	r5, sl, r8
 8002d98:	eb4b 0609 	adc.w	r6, fp, r9
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	4619      	mov	r1, r3
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	f04f 0400 	mov.w	r4, #0
 8002dae:	0094      	lsls	r4, r2, #2
 8002db0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002db4:	008b      	lsls	r3, r1, #2
 8002db6:	461a      	mov	r2, r3
 8002db8:	4623      	mov	r3, r4
 8002dba:	4628      	mov	r0, r5
 8002dbc:	4631      	mov	r1, r6
 8002dbe:	f7fd fa0f 	bl	80001e0 <__aeabi_uldivmod>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	460c      	mov	r4, r1
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	4bb8      	ldr	r3, [pc, #736]	; (80030ac <UART_SetConfig+0x6f4>)
 8002dca:	fba3 2302 	umull	r2, r3, r3, r2
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	469b      	mov	fp, r3
 8002dd8:	f04f 0c00 	mov.w	ip, #0
 8002ddc:	46d9      	mov	r9, fp
 8002dde:	46e2      	mov	sl, ip
 8002de0:	eb19 0309 	adds.w	r3, r9, r9
 8002de4:	eb4a 040a 	adc.w	r4, sl, sl
 8002de8:	4699      	mov	r9, r3
 8002dea:	46a2      	mov	sl, r4
 8002dec:	eb19 090b 	adds.w	r9, r9, fp
 8002df0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002df4:	f04f 0100 	mov.w	r1, #0
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e08:	4689      	mov	r9, r1
 8002e0a:	4692      	mov	sl, r2
 8002e0c:	eb1b 0509 	adds.w	r5, fp, r9
 8002e10:	eb4c 060a 	adc.w	r6, ip, sl
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	f04f 0400 	mov.w	r4, #0
 8002e26:	0094      	lsls	r4, r2, #2
 8002e28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e2c:	008b      	lsls	r3, r1, #2
 8002e2e:	461a      	mov	r2, r3
 8002e30:	4623      	mov	r3, r4
 8002e32:	4628      	mov	r0, r5
 8002e34:	4631      	mov	r1, r6
 8002e36:	f7fd f9d3 	bl	80001e0 <__aeabi_uldivmod>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	460c      	mov	r4, r1
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4b9a      	ldr	r3, [pc, #616]	; (80030ac <UART_SetConfig+0x6f4>)
 8002e42:	fba3 1302 	umull	r1, r3, r3, r2
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	2164      	movs	r1, #100	; 0x64
 8002e4a:	fb01 f303 	mul.w	r3, r1, r3
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	3332      	adds	r3, #50	; 0x32
 8002e54:	4a95      	ldr	r2, [pc, #596]	; (80030ac <UART_SetConfig+0x6f4>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e60:	4498      	add	r8, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	469b      	mov	fp, r3
 8002e66:	f04f 0c00 	mov.w	ip, #0
 8002e6a:	46d9      	mov	r9, fp
 8002e6c:	46e2      	mov	sl, ip
 8002e6e:	eb19 0309 	adds.w	r3, r9, r9
 8002e72:	eb4a 040a 	adc.w	r4, sl, sl
 8002e76:	4699      	mov	r9, r3
 8002e78:	46a2      	mov	sl, r4
 8002e7a:	eb19 090b 	adds.w	r9, r9, fp
 8002e7e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e82:	f04f 0100 	mov.w	r1, #0
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e96:	4689      	mov	r9, r1
 8002e98:	4692      	mov	sl, r2
 8002e9a:	eb1b 0509 	adds.w	r5, fp, r9
 8002e9e:	eb4c 060a 	adc.w	r6, ip, sl
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	f04f 0400 	mov.w	r4, #0
 8002eb4:	0094      	lsls	r4, r2, #2
 8002eb6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002eba:	008b      	lsls	r3, r1, #2
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4623      	mov	r3, r4
 8002ec0:	4628      	mov	r0, r5
 8002ec2:	4631      	mov	r1, r6
 8002ec4:	f7fd f98c 	bl	80001e0 <__aeabi_uldivmod>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	460c      	mov	r4, r1
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4b77      	ldr	r3, [pc, #476]	; (80030ac <UART_SetConfig+0x6f4>)
 8002ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ed4:	095b      	lsrs	r3, r3, #5
 8002ed6:	2164      	movs	r1, #100	; 0x64
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	3332      	adds	r3, #50	; 0x32
 8002ee2:	4a72      	ldr	r2, [pc, #456]	; (80030ac <UART_SetConfig+0x6f4>)
 8002ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee8:	095b      	lsrs	r3, r3, #5
 8002eea:	f003 020f 	and.w	r2, r3, #15
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4442      	add	r2, r8
 8002ef4:	609a      	str	r2, [r3, #8]
 8002ef6:	e0d0      	b.n	800309a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ef8:	f7ff f996 	bl	8002228 <HAL_RCC_GetPCLK1Freq>
 8002efc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	469a      	mov	sl, r3
 8002f02:	f04f 0b00 	mov.w	fp, #0
 8002f06:	46d0      	mov	r8, sl
 8002f08:	46d9      	mov	r9, fp
 8002f0a:	eb18 0308 	adds.w	r3, r8, r8
 8002f0e:	eb49 0409 	adc.w	r4, r9, r9
 8002f12:	4698      	mov	r8, r3
 8002f14:	46a1      	mov	r9, r4
 8002f16:	eb18 080a 	adds.w	r8, r8, sl
 8002f1a:	eb49 090b 	adc.w	r9, r9, fp
 8002f1e:	f04f 0100 	mov.w	r1, #0
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f2a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f2e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f32:	4688      	mov	r8, r1
 8002f34:	4691      	mov	r9, r2
 8002f36:	eb1a 0508 	adds.w	r5, sl, r8
 8002f3a:	eb4b 0609 	adc.w	r6, fp, r9
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4619      	mov	r1, r3
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	f04f 0300 	mov.w	r3, #0
 8002f4c:	f04f 0400 	mov.w	r4, #0
 8002f50:	0094      	lsls	r4, r2, #2
 8002f52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f56:	008b      	lsls	r3, r1, #2
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4623      	mov	r3, r4
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	4631      	mov	r1, r6
 8002f60:	f7fd f93e 	bl	80001e0 <__aeabi_uldivmod>
 8002f64:	4603      	mov	r3, r0
 8002f66:	460c      	mov	r4, r1
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4b50      	ldr	r3, [pc, #320]	; (80030ac <UART_SetConfig+0x6f4>)
 8002f6c:	fba3 2302 	umull	r2, r3, r3, r2
 8002f70:	095b      	lsrs	r3, r3, #5
 8002f72:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	469b      	mov	fp, r3
 8002f7a:	f04f 0c00 	mov.w	ip, #0
 8002f7e:	46d9      	mov	r9, fp
 8002f80:	46e2      	mov	sl, ip
 8002f82:	eb19 0309 	adds.w	r3, r9, r9
 8002f86:	eb4a 040a 	adc.w	r4, sl, sl
 8002f8a:	4699      	mov	r9, r3
 8002f8c:	46a2      	mov	sl, r4
 8002f8e:	eb19 090b 	adds.w	r9, r9, fp
 8002f92:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f96:	f04f 0100 	mov.w	r1, #0
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fa2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002fa6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002faa:	4689      	mov	r9, r1
 8002fac:	4692      	mov	sl, r2
 8002fae:	eb1b 0509 	adds.w	r5, fp, r9
 8002fb2:	eb4c 060a 	adc.w	r6, ip, sl
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	f04f 0400 	mov.w	r4, #0
 8002fc8:	0094      	lsls	r4, r2, #2
 8002fca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002fce:	008b      	lsls	r3, r1, #2
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4623      	mov	r3, r4
 8002fd4:	4628      	mov	r0, r5
 8002fd6:	4631      	mov	r1, r6
 8002fd8:	f7fd f902 	bl	80001e0 <__aeabi_uldivmod>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	460c      	mov	r4, r1
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4b32      	ldr	r3, [pc, #200]	; (80030ac <UART_SetConfig+0x6f4>)
 8002fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	2164      	movs	r1, #100	; 0x64
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	3332      	adds	r3, #50	; 0x32
 8002ff6:	4a2d      	ldr	r2, [pc, #180]	; (80030ac <UART_SetConfig+0x6f4>)
 8002ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffc:	095b      	lsrs	r3, r3, #5
 8002ffe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003002:	4498      	add	r8, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	469b      	mov	fp, r3
 8003008:	f04f 0c00 	mov.w	ip, #0
 800300c:	46d9      	mov	r9, fp
 800300e:	46e2      	mov	sl, ip
 8003010:	eb19 0309 	adds.w	r3, r9, r9
 8003014:	eb4a 040a 	adc.w	r4, sl, sl
 8003018:	4699      	mov	r9, r3
 800301a:	46a2      	mov	sl, r4
 800301c:	eb19 090b 	adds.w	r9, r9, fp
 8003020:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003024:	f04f 0100 	mov.w	r1, #0
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003030:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003034:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003038:	4689      	mov	r9, r1
 800303a:	4692      	mov	sl, r2
 800303c:	eb1b 0509 	adds.w	r5, fp, r9
 8003040:	eb4c 060a 	adc.w	r6, ip, sl
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	4619      	mov	r1, r3
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	f04f 0400 	mov.w	r4, #0
 8003056:	0094      	lsls	r4, r2, #2
 8003058:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800305c:	008b      	lsls	r3, r1, #2
 800305e:	461a      	mov	r2, r3
 8003060:	4623      	mov	r3, r4
 8003062:	4628      	mov	r0, r5
 8003064:	4631      	mov	r1, r6
 8003066:	f7fd f8bb 	bl	80001e0 <__aeabi_uldivmod>
 800306a:	4603      	mov	r3, r0
 800306c:	460c      	mov	r4, r1
 800306e:	461a      	mov	r2, r3
 8003070:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <UART_SetConfig+0x6f4>)
 8003072:	fba3 1302 	umull	r1, r3, r3, r2
 8003076:	095b      	lsrs	r3, r3, #5
 8003078:	2164      	movs	r1, #100	; 0x64
 800307a:	fb01 f303 	mul.w	r3, r1, r3
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	3332      	adds	r3, #50	; 0x32
 8003084:	4a09      	ldr	r2, [pc, #36]	; (80030ac <UART_SetConfig+0x6f4>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	f003 020f 	and.w	r2, r3, #15
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4442      	add	r2, r8
 8003096:	609a      	str	r2, [r3, #8]
}
 8003098:	e7ff      	b.n	800309a <UART_SetConfig+0x6e2>
 800309a:	bf00      	nop
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030a4:	40011000 	.word	0x40011000
 80030a8:	40011400 	.word	0x40011400
 80030ac:	51eb851f 	.word	0x51eb851f

080030b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80030be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030c2:	2b84      	cmp	r3, #132	; 0x84
 80030c4:	d005      	beq.n	80030d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80030c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4413      	add	r3, r2
 80030ce:	3303      	adds	r3, #3
 80030d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80030d2:	68fb      	ldr	r3, [r7, #12]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030e6:	f3ef 8305 	mrs	r3, IPSR
 80030ea:	607b      	str	r3, [r7, #4]
  return(result);
 80030ec:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	bf14      	ite	ne
 80030f2:	2301      	movne	r3, #1
 80030f4:	2300      	moveq	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003108:	f001 f8fc 	bl	8004304 <vTaskStartScheduler>
  
  return osOK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	bd80      	pop	{r7, pc}

08003112 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003112:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003114:	b089      	sub	sp, #36	; 0x24
 8003116:	af04      	add	r7, sp, #16
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d020      	beq.n	8003166 <osThreadCreate+0x54>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d01c      	beq.n	8003166 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685c      	ldr	r4, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681d      	ldr	r5, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691e      	ldr	r6, [r3, #16]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff ffb6 	bl	80030b0 <makeFreeRtosPriority>
 8003144:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800314e:	9202      	str	r2, [sp, #8]
 8003150:	9301      	str	r3, [sp, #4]
 8003152:	9100      	str	r1, [sp, #0]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	4632      	mov	r2, r6
 8003158:	4629      	mov	r1, r5
 800315a:	4620      	mov	r0, r4
 800315c:	f000 ff0f 	bl	8003f7e <xTaskCreateStatic>
 8003160:	4603      	mov	r3, r0
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	e01c      	b.n	80031a0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685c      	ldr	r4, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003172:	b29e      	uxth	r6, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff ff98 	bl	80030b0 <makeFreeRtosPriority>
 8003180:	4602      	mov	r2, r0
 8003182:	f107 030c 	add.w	r3, r7, #12
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	9200      	str	r2, [sp, #0]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	4632      	mov	r2, r6
 800318e:	4629      	mov	r1, r5
 8003190:	4620      	mov	r0, r4
 8003192:	f000 ff4e 	bl	8004032 <xTaskCreate>
 8003196:	4603      	mov	r3, r0
 8003198:	2b01      	cmp	r3, #1
 800319a:	d001      	beq.n	80031a0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800319c:	2300      	movs	r3, #0
 800319e:	e000      	b.n	80031a2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80031a0:	68fb      	ldr	r3, [r7, #12]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031aa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b084      	sub	sp, #16
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <osDelay+0x16>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	e000      	b.n	80031c2 <osDelay+0x18>
 80031c0:	2301      	movs	r3, #1
 80031c2:	4618      	mov	r0, r3
 80031c4:	f001 f86a 	bl	800429c <vTaskDelay>
  
  return osOK;
 80031c8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b086      	sub	sp, #24
 80031d6:	af02      	add	r7, sp, #8
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d010      	beq.n	8003206 <osSemaphoreCreate+0x34>
    if (count == 1) {
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d10b      	bne.n	8003202 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	2303      	movs	r3, #3
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	4613      	mov	r3, r2
 80031f4:	2200      	movs	r2, #0
 80031f6:	2100      	movs	r1, #0
 80031f8:	2001      	movs	r0, #1
 80031fa:	f000 f9bd 	bl	8003578 <xQueueGenericCreateStatic>
 80031fe:	4603      	mov	r3, r0
 8003200:	e016      	b.n	8003230 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8003202:	2300      	movs	r3, #0
 8003204:	e014      	b.n	8003230 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d110      	bne.n	800322e <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800320c:	2203      	movs	r2, #3
 800320e:	2100      	movs	r1, #0
 8003210:	2001      	movs	r0, #1
 8003212:	f000 fa24 	bl	800365e <xQueueGenericCreate>
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d005      	beq.n	800322a <osSemaphoreCreate+0x58>
 800321e:	2300      	movs	r3, #0
 8003220:	2200      	movs	r2, #0
 8003222:	2100      	movs	r1, #0
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 fa79 	bl	800371c <xQueueGenericSend>
      return sema;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	e000      	b.n	8003230 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800322e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003242:	2300      	movs	r3, #0
 8003244:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	e03a      	b.n	80032c6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325a:	d103      	bne.n	8003264 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800325c:	f04f 33ff 	mov.w	r3, #4294967295
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	e009      	b.n	8003278 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d006      	beq.n	8003278 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <osSemaphoreWait+0x40>
      ticks = 1;
 8003274:	2301      	movs	r3, #1
 8003276:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003278:	f7ff ff32 	bl	80030e0 <inHandlerMode>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d017      	beq.n	80032b2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003282:	f107 0308 	add.w	r3, r7, #8
 8003286:	461a      	mov	r2, r3
 8003288:	2100      	movs	r1, #0
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 fcd2 	bl	8003c34 <xQueueReceiveFromISR>
 8003290:	4603      	mov	r3, r0
 8003292:	2b01      	cmp	r3, #1
 8003294:	d001      	beq.n	800329a <osSemaphoreWait+0x62>
      return osErrorOS;
 8003296:	23ff      	movs	r3, #255	; 0xff
 8003298:	e015      	b.n	80032c6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d011      	beq.n	80032c4 <osSemaphoreWait+0x8c>
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <osSemaphoreWait+0x98>)
 80032a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	e008      	b.n	80032c4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80032b2:	68f9      	ldr	r1, [r7, #12]
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 fbb5 	bl	8003a24 <xQueueSemaphoreTake>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d001      	beq.n	80032c4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80032c0:	23ff      	movs	r3, #255	; 0xff
 80032c2:	e000      	b.n	80032c6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	e000ed04 	.word	0xe000ed04

080032d4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80032e4:	f7ff fefc 	bl	80030e0 <inHandlerMode>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d016      	beq.n	800331c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80032ee:	f107 0308 	add.w	r3, r7, #8
 80032f2:	4619      	mov	r1, r3
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 fb0b 	bl	8003910 <xQueueGiveFromISR>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d001      	beq.n	8003304 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003300:	23ff      	movs	r3, #255	; 0xff
 8003302:	e017      	b.n	8003334 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d013      	beq.n	8003332 <osSemaphoreRelease+0x5e>
 800330a:	4b0c      	ldr	r3, [pc, #48]	; (800333c <osSemaphoreRelease+0x68>)
 800330c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	f3bf 8f4f 	dsb	sy
 8003316:	f3bf 8f6f 	isb	sy
 800331a:	e00a      	b.n	8003332 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800331c:	2300      	movs	r3, #0
 800331e:	2200      	movs	r2, #0
 8003320:	2100      	movs	r1, #0
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f9fa 	bl	800371c <xQueueGenericSend>
 8003328:	4603      	mov	r3, r0
 800332a:	2b01      	cmp	r3, #1
 800332c:	d001      	beq.n	8003332 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800332e:	23ff      	movs	r3, #255	; 0xff
 8003330:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8003332:	68fb      	ldr	r3, [r7, #12]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	e000ed04 	.word	0xe000ed04

08003340 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f103 0208 	add.w	r2, r3, #8
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f04f 32ff 	mov.w	r2, #4294967295
 8003358:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f103 0208 	add.w	r2, r3, #8
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f103 0208 	add.w	r2, r3, #8
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800339a:	b480      	push	{r7}
 800339c:	b085      	sub	sp, #20
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	601a      	str	r2, [r3, #0]
}
 80033d6:	bf00      	nop
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033e2:	b480      	push	{r7}
 80033e4:	b085      	sub	sp, #20
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f8:	d103      	bne.n	8003402 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	e00c      	b.n	800341c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3308      	adds	r3, #8
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	e002      	b.n	8003410 <vListInsert+0x2e>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	429a      	cmp	r2, r3
 800341a:	d2f6      	bcs.n	800340a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	601a      	str	r2, [r3, #0]
}
 8003448:	bf00      	nop
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6892      	ldr	r2, [r2, #8]
 800346a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6852      	ldr	r2, [r2, #4]
 8003474:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	429a      	cmp	r2, r3
 800347e:	d103      	bne.n	8003488 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	1e5a      	subs	r2, r3, #1
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d109      	bne.n	80034d0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	e7fe      	b.n	80034ce <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80034d0:	f001 fe64 	bl	800519c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034dc:	68f9      	ldr	r1, [r7, #12]
 80034de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034e0:	fb01 f303 	mul.w	r3, r1, r3
 80034e4:	441a      	add	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003500:	3b01      	subs	r3, #1
 8003502:	68f9      	ldr	r1, [r7, #12]
 8003504:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003506:	fb01 f303 	mul.w	r3, r1, r3
 800350a:	441a      	add	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	22ff      	movs	r2, #255	; 0xff
 8003514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	22ff      	movs	r2, #255	; 0xff
 800351c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d114      	bne.n	8003550 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d01a      	beq.n	8003564 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	3310      	adds	r3, #16
 8003532:	4618      	mov	r0, r3
 8003534:	f001 f924 	bl	8004780 <xTaskRemoveFromEventList>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d012      	beq.n	8003564 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800353e:	4b0d      	ldr	r3, [pc, #52]	; (8003574 <xQueueGenericReset+0xcc>)
 8003540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	f3bf 8f4f 	dsb	sy
 800354a:	f3bf 8f6f 	isb	sy
 800354e:	e009      	b.n	8003564 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	3310      	adds	r3, #16
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff fef3 	bl	8003340 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	3324      	adds	r3, #36	; 0x24
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff feee 	bl	8003340 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003564:	f001 fe48 	bl	80051f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003568:	2301      	movs	r3, #1
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	e000ed04 	.word	0xe000ed04

08003578 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08e      	sub	sp, #56	; 0x38
 800357c:	af02      	add	r7, sp, #8
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d109      	bne.n	80035a0 <xQueueGenericCreateStatic+0x28>
 800358c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003590:	f383 8811 	msr	BASEPRI, r3
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	f3bf 8f4f 	dsb	sy
 800359c:	62bb      	str	r3, [r7, #40]	; 0x28
 800359e:	e7fe      	b.n	800359e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d109      	bne.n	80035ba <xQueueGenericCreateStatic+0x42>
 80035a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035aa:	f383 8811 	msr	BASEPRI, r3
 80035ae:	f3bf 8f6f 	isb	sy
 80035b2:	f3bf 8f4f 	dsb	sy
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24
 80035b8:	e7fe      	b.n	80035b8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <xQueueGenericCreateStatic+0x4e>
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <xQueueGenericCreateStatic+0x52>
 80035c6:	2301      	movs	r3, #1
 80035c8:	e000      	b.n	80035cc <xQueueGenericCreateStatic+0x54>
 80035ca:	2300      	movs	r3, #0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d109      	bne.n	80035e4 <xQueueGenericCreateStatic+0x6c>
 80035d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d4:	f383 8811 	msr	BASEPRI, r3
 80035d8:	f3bf 8f6f 	isb	sy
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	623b      	str	r3, [r7, #32]
 80035e2:	e7fe      	b.n	80035e2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d102      	bne.n	80035f0 <xQueueGenericCreateStatic+0x78>
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <xQueueGenericCreateStatic+0x7c>
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <xQueueGenericCreateStatic+0x7e>
 80035f4:	2300      	movs	r3, #0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <xQueueGenericCreateStatic+0x96>
 80035fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fe:	f383 8811 	msr	BASEPRI, r3
 8003602:	f3bf 8f6f 	isb	sy
 8003606:	f3bf 8f4f 	dsb	sy
 800360a:	61fb      	str	r3, [r7, #28]
 800360c:	e7fe      	b.n	800360c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800360e:	2348      	movs	r3, #72	; 0x48
 8003610:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2b48      	cmp	r3, #72	; 0x48
 8003616:	d009      	beq.n	800362c <xQueueGenericCreateStatic+0xb4>
 8003618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	61bb      	str	r3, [r7, #24]
 800362a:	e7fe      	b.n	800362a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800362c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00d      	beq.n	8003654 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003640:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	4613      	mov	r3, r2
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	68b9      	ldr	r1, [r7, #8]
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 f844 	bl	80036dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003656:	4618      	mov	r0, r3
 8003658:	3730      	adds	r7, #48	; 0x30
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800365e:	b580      	push	{r7, lr}
 8003660:	b08a      	sub	sp, #40	; 0x28
 8003662:	af02      	add	r7, sp, #8
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	4613      	mov	r3, r2
 800366a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <xQueueGenericCreate+0x28>
 8003672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003676:	f383 8811 	msr	BASEPRI, r3
 800367a:	f3bf 8f6f 	isb	sy
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	e7fe      	b.n	8003684 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d102      	bne.n	8003692 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800368c:	2300      	movs	r3, #0
 800368e:	61fb      	str	r3, [r7, #28]
 8003690:	e004      	b.n	800369c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	fb02 f303 	mul.w	r3, r2, r3
 800369a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	3348      	adds	r3, #72	; 0x48
 80036a0:	4618      	mov	r0, r3
 80036a2:	f001 fe95 	bl	80053d0 <pvPortMalloc>
 80036a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d011      	beq.n	80036d2 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	3348      	adds	r3, #72	; 0x48
 80036b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036c0:	79fa      	ldrb	r2, [r7, #7]
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	4613      	mov	r3, r2
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	68b9      	ldr	r1, [r7, #8]
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 f805 	bl	80036dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80036d2:	69bb      	ldr	r3, [r7, #24]
	}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3720      	adds	r7, #32
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d103      	bne.n	80036f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	e002      	b.n	80036fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800370a:	2101      	movs	r1, #1
 800370c:	69b8      	ldr	r0, [r7, #24]
 800370e:	f7ff fecb 	bl	80034a8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003712:	bf00      	nop
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08e      	sub	sp, #56	; 0x38
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
 8003728:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800372a:	2300      	movs	r3, #0
 800372c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003734:	2b00      	cmp	r3, #0
 8003736:	d109      	bne.n	800374c <xQueueGenericSend+0x30>
 8003738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373c:	f383 8811 	msr	BASEPRI, r3
 8003740:	f3bf 8f6f 	isb	sy
 8003744:	f3bf 8f4f 	dsb	sy
 8003748:	62bb      	str	r3, [r7, #40]	; 0x28
 800374a:	e7fe      	b.n	800374a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d103      	bne.n	800375a <xQueueGenericSend+0x3e>
 8003752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <xQueueGenericSend+0x42>
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <xQueueGenericSend+0x44>
 800375e:	2300      	movs	r3, #0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d109      	bne.n	8003778 <xQueueGenericSend+0x5c>
 8003764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003768:	f383 8811 	msr	BASEPRI, r3
 800376c:	f3bf 8f6f 	isb	sy
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
 8003776:	e7fe      	b.n	8003776 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	2b02      	cmp	r3, #2
 800377c:	d103      	bne.n	8003786 <xQueueGenericSend+0x6a>
 800377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <xQueueGenericSend+0x6e>
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <xQueueGenericSend+0x70>
 800378a:	2300      	movs	r3, #0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d109      	bne.n	80037a4 <xQueueGenericSend+0x88>
 8003790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003794:	f383 8811 	msr	BASEPRI, r3
 8003798:	f3bf 8f6f 	isb	sy
 800379c:	f3bf 8f4f 	dsb	sy
 80037a0:	623b      	str	r3, [r7, #32]
 80037a2:	e7fe      	b.n	80037a2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037a4:	f001 f9a2 	bl	8004aec <xTaskGetSchedulerState>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d102      	bne.n	80037b4 <xQueueGenericSend+0x98>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <xQueueGenericSend+0x9c>
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <xQueueGenericSend+0x9e>
 80037b8:	2300      	movs	r3, #0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d109      	bne.n	80037d2 <xQueueGenericSend+0xb6>
 80037be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c2:	f383 8811 	msr	BASEPRI, r3
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	61fb      	str	r3, [r7, #28]
 80037d0:	e7fe      	b.n	80037d0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037d2:	f001 fce3 	bl	800519c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037de:	429a      	cmp	r2, r3
 80037e0:	d302      	bcc.n	80037e8 <xQueueGenericSend+0xcc>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d129      	bne.n	800383c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	68b9      	ldr	r1, [r7, #8]
 80037ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037ee:	f000 fab6 	bl	8003d5e <prvCopyDataToQueue>
 80037f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d010      	beq.n	800381e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fe:	3324      	adds	r3, #36	; 0x24
 8003800:	4618      	mov	r0, r3
 8003802:	f000 ffbd 	bl	8004780 <xTaskRemoveFromEventList>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d013      	beq.n	8003834 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800380c:	4b3f      	ldr	r3, [pc, #252]	; (800390c <xQueueGenericSend+0x1f0>)
 800380e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	e00a      	b.n	8003834 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800381e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003820:	2b00      	cmp	r3, #0
 8003822:	d007      	beq.n	8003834 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003824:	4b39      	ldr	r3, [pc, #228]	; (800390c <xQueueGenericSend+0x1f0>)
 8003826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003834:	f001 fce0 	bl	80051f8 <vPortExitCritical>
				return pdPASS;
 8003838:	2301      	movs	r3, #1
 800383a:	e063      	b.n	8003904 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d103      	bne.n	800384a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003842:	f001 fcd9 	bl	80051f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003846:	2300      	movs	r3, #0
 8003848:	e05c      	b.n	8003904 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800384a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384c:	2b00      	cmp	r3, #0
 800384e:	d106      	bne.n	800385e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003850:	f107 0314 	add.w	r3, r7, #20
 8003854:	4618      	mov	r0, r3
 8003856:	f000 fff5 	bl	8004844 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800385a:	2301      	movs	r3, #1
 800385c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800385e:	f001 fccb 	bl	80051f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003862:	f000 fdad 	bl	80043c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003866:	f001 fc99 	bl	800519c <vPortEnterCritical>
 800386a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003870:	b25b      	sxtb	r3, r3
 8003872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003876:	d103      	bne.n	8003880 <xQueueGenericSend+0x164>
 8003878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003882:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003886:	b25b      	sxtb	r3, r3
 8003888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388c:	d103      	bne.n	8003896 <xQueueGenericSend+0x17a>
 800388e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003896:	f001 fcaf 	bl	80051f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800389a:	1d3a      	adds	r2, r7, #4
 800389c:	f107 0314 	add.w	r3, r7, #20
 80038a0:	4611      	mov	r1, r2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 ffe4 	bl	8004870 <xTaskCheckForTimeOut>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d124      	bne.n	80038f8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80038ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038b0:	f000 fb4d 	bl	8003f4e <prvIsQueueFull>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d018      	beq.n	80038ec <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80038ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038bc:	3310      	adds	r3, #16
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	4611      	mov	r1, r2
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 ff38 	bl	8004738 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80038c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038ca:	f000 fad8 	bl	8003e7e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80038ce:	f000 fd85 	bl	80043dc <xTaskResumeAll>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f47f af7c 	bne.w	80037d2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80038da:	4b0c      	ldr	r3, [pc, #48]	; (800390c <xQueueGenericSend+0x1f0>)
 80038dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	f3bf 8f4f 	dsb	sy
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	e772      	b.n	80037d2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80038ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038ee:	f000 fac6 	bl	8003e7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038f2:	f000 fd73 	bl	80043dc <xTaskResumeAll>
 80038f6:	e76c      	b.n	80037d2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80038f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038fa:	f000 fac0 	bl	8003e7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038fe:	f000 fd6d 	bl	80043dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003902:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003904:	4618      	mov	r0, r3
 8003906:	3738      	adds	r7, #56	; 0x38
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	e000ed04 	.word	0xe000ed04

08003910 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b08e      	sub	sp, #56	; 0x38
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003920:	2b00      	cmp	r3, #0
 8003922:	d109      	bne.n	8003938 <xQueueGiveFromISR+0x28>
 8003924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003928:	f383 8811 	msr	BASEPRI, r3
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	623b      	str	r3, [r7, #32]
 8003936:	e7fe      	b.n	8003936 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	2b00      	cmp	r3, #0
 800393e:	d009      	beq.n	8003954 <xQueueGiveFromISR+0x44>
 8003940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	61fb      	str	r3, [r7, #28]
 8003952:	e7fe      	b.n	8003952 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d103      	bne.n	8003964 <xQueueGiveFromISR+0x54>
 800395c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <xQueueGiveFromISR+0x58>
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <xQueueGiveFromISR+0x5a>
 8003968:	2300      	movs	r3, #0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d109      	bne.n	8003982 <xQueueGiveFromISR+0x72>
 800396e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003972:	f383 8811 	msr	BASEPRI, r3
 8003976:	f3bf 8f6f 	isb	sy
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	61bb      	str	r3, [r7, #24]
 8003980:	e7fe      	b.n	8003980 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003982:	f001 fce7 	bl	8005354 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003986:	f3ef 8211 	mrs	r2, BASEPRI
 800398a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398e:	f383 8811 	msr	BASEPRI, r3
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	617a      	str	r2, [r7, #20]
 800399c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800399e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80039a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80039a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d22b      	bcs.n	8003a0a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80039c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80039c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039cc:	d112      	bne.n	80039f4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d016      	beq.n	8003a04 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d8:	3324      	adds	r3, #36	; 0x24
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fed0 	bl	8004780 <xTaskRemoveFromEventList>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00e      	beq.n	8003a04 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00b      	beq.n	8003a04 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2201      	movs	r2, #1
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	e007      	b.n	8003a04 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80039f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039f8:	3301      	adds	r3, #1
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	b25a      	sxtb	r2, r3
 80039fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003a04:	2301      	movs	r3, #1
 8003a06:	637b      	str	r3, [r7, #52]	; 0x34
 8003a08:	e001      	b.n	8003a0e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a10:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3738      	adds	r7, #56	; 0x38
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08e      	sub	sp, #56	; 0x38
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003a36:	2300      	movs	r3, #0
 8003a38:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d109      	bne.n	8003a54 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8003a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a44:	f383 8811 	msr	BASEPRI, r3
 8003a48:	f3bf 8f6f 	isb	sy
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	623b      	str	r3, [r7, #32]
 8003a52:	e7fe      	b.n	8003a52 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d009      	beq.n	8003a70 <xQueueSemaphoreTake+0x4c>
 8003a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a60:	f383 8811 	msr	BASEPRI, r3
 8003a64:	f3bf 8f6f 	isb	sy
 8003a68:	f3bf 8f4f 	dsb	sy
 8003a6c:	61fb      	str	r3, [r7, #28]
 8003a6e:	e7fe      	b.n	8003a6e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a70:	f001 f83c 	bl	8004aec <xTaskGetSchedulerState>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d102      	bne.n	8003a80 <xQueueSemaphoreTake+0x5c>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <xQueueSemaphoreTake+0x60>
 8003a80:	2301      	movs	r3, #1
 8003a82:	e000      	b.n	8003a86 <xQueueSemaphoreTake+0x62>
 8003a84:	2300      	movs	r3, #0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <xQueueSemaphoreTake+0x7a>
 8003a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8e:	f383 8811 	msr	BASEPRI, r3
 8003a92:	f3bf 8f6f 	isb	sy
 8003a96:	f3bf 8f4f 	dsb	sy
 8003a9a:	61bb      	str	r3, [r7, #24]
 8003a9c:	e7fe      	b.n	8003a9c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a9e:	f001 fb7d 	bl	800519c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d024      	beq.n	8003af8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab0:	1e5a      	subs	r2, r3, #1
 8003ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d104      	bne.n	8003ac8 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003abe:	f001 f9cf 	bl	8004e60 <pvTaskIncrementMutexHeldCount>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00f      	beq.n	8003af0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad2:	3310      	adds	r3, #16
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 fe53 	bl	8004780 <xTaskRemoveFromEventList>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d007      	beq.n	8003af0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ae0:	4b53      	ldr	r3, [pc, #332]	; (8003c30 <xQueueSemaphoreTake+0x20c>)
 8003ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003af0:	f001 fb82 	bl	80051f8 <vPortExitCritical>
				return pdPASS;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e096      	b.n	8003c26 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d110      	bne.n	8003b20 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d009      	beq.n	8003b18 <xQueueSemaphoreTake+0xf4>
 8003b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b08:	f383 8811 	msr	BASEPRI, r3
 8003b0c:	f3bf 8f6f 	isb	sy
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	e7fe      	b.n	8003b16 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003b18:	f001 fb6e 	bl	80051f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	e082      	b.n	8003c26 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b26:	f107 030c 	add.w	r3, r7, #12
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 fe8a 	bl	8004844 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b30:	2301      	movs	r3, #1
 8003b32:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b34:	f001 fb60 	bl	80051f8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b38:	f000 fc42 	bl	80043c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b3c:	f001 fb2e 	bl	800519c <vPortEnterCritical>
 8003b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b46:	b25b      	sxtb	r3, r3
 8003b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4c:	d103      	bne.n	8003b56 <xQueueSemaphoreTake+0x132>
 8003b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b5c:	b25b      	sxtb	r3, r3
 8003b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b62:	d103      	bne.n	8003b6c <xQueueSemaphoreTake+0x148>
 8003b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b6c:	f001 fb44 	bl	80051f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b70:	463a      	mov	r2, r7
 8003b72:	f107 030c 	add.w	r3, r7, #12
 8003b76:	4611      	mov	r1, r2
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 fe79 	bl	8004870 <xTaskCheckForTimeOut>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d132      	bne.n	8003bea <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b86:	f000 f9cc 	bl	8003f22 <prvIsQueueEmpty>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d026      	beq.n	8003bde <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d109      	bne.n	8003bac <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8003b98:	f001 fb00 	bl	800519c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 ffc1 	bl	8004b28 <xTaskPriorityInherit>
 8003ba6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003ba8:	f001 fb26 	bl	80051f8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bae:	3324      	adds	r3, #36	; 0x24
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 fdbf 	bl	8004738 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003bba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003bbc:	f000 f95f 	bl	8003e7e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003bc0:	f000 fc0c 	bl	80043dc <xTaskResumeAll>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f47f af69 	bne.w	8003a9e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8003bcc:	4b18      	ldr	r3, [pc, #96]	; (8003c30 <xQueueSemaphoreTake+0x20c>)
 8003bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	f3bf 8f6f 	isb	sy
 8003bdc:	e75f      	b.n	8003a9e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003bde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003be0:	f000 f94d 	bl	8003e7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003be4:	f000 fbfa 	bl	80043dc <xTaskResumeAll>
 8003be8:	e759      	b.n	8003a9e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003bea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003bec:	f000 f947 	bl	8003e7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bf0:	f000 fbf4 	bl	80043dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003bf6:	f000 f994 	bl	8003f22 <prvIsQueueEmpty>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f43f af4e 	beq.w	8003a9e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00d      	beq.n	8003c24 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8003c08:	f001 fac8 	bl	800519c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003c0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c0e:	f000 f88e 	bl	8003d2e <prvGetDisinheritPriorityAfterTimeout>
 8003c12:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f001 f888 	bl	8004d30 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003c20:	f001 faea 	bl	80051f8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003c24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3738      	adds	r7, #56	; 0x38
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	e000ed04 	.word	0xe000ed04

08003c34 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08e      	sub	sp, #56	; 0x38
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d109      	bne.n	8003c5e <xQueueReceiveFromISR+0x2a>
 8003c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4e:	f383 8811 	msr	BASEPRI, r3
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	623b      	str	r3, [r7, #32]
 8003c5c:	e7fe      	b.n	8003c5c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d103      	bne.n	8003c6c <xQueueReceiveFromISR+0x38>
 8003c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <xQueueReceiveFromISR+0x3c>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <xQueueReceiveFromISR+0x3e>
 8003c70:	2300      	movs	r3, #0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d109      	bne.n	8003c8a <xQueueReceiveFromISR+0x56>
 8003c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	61fb      	str	r3, [r7, #28]
 8003c88:	e7fe      	b.n	8003c88 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c8a:	f001 fb63 	bl	8005354 <vPortValidateInterruptPriority>
	__asm volatile
 8003c8e:	f3ef 8211 	mrs	r2, BASEPRI
 8003c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	61ba      	str	r2, [r7, #24]
 8003ca4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003ca6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d02f      	beq.n	8003d16 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003cc0:	68b9      	ldr	r1, [r7, #8]
 8003cc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cc4:	f000 f8b5 	bl	8003e32 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cca:	1e5a      	subs	r2, r3, #1
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003cd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd8:	d112      	bne.n	8003d00 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d016      	beq.n	8003d10 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce4:	3310      	adds	r3, #16
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 fd4a 	bl	8004780 <xTaskRemoveFromEventList>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00e      	beq.n	8003d10 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00b      	beq.n	8003d10 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	e007      	b.n	8003d10 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003d00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d04:	3301      	adds	r3, #1
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	b25a      	sxtb	r2, r3
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003d10:	2301      	movs	r3, #1
 8003d12:	637b      	str	r3, [r7, #52]	; 0x34
 8003d14:	e001      	b.n	8003d1a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	637b      	str	r3, [r7, #52]	; 0x34
 8003d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3738      	adds	r7, #56	; 0x38
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003d2e:	b480      	push	{r7}
 8003d30:	b085      	sub	sp, #20
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d006      	beq.n	8003d4c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f1c3 0307 	rsb	r3, r3, #7
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	e001      	b.n	8003d50 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003d50:	68fb      	ldr	r3, [r7, #12]
	}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3714      	adds	r7, #20
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b086      	sub	sp, #24
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d72:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10d      	bne.n	8003d98 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d14d      	bne.n	8003e20 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 ff4d 	bl	8004c28 <xTaskPriorityDisinherit>
 8003d8e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	609a      	str	r2, [r3, #8]
 8003d96:	e043      	b.n	8003e20 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d119      	bne.n	8003dd2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6858      	ldr	r0, [r3, #4]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	461a      	mov	r2, r3
 8003da8:	68b9      	ldr	r1, [r7, #8]
 8003daa:	f001 fd0b 	bl	80057c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	441a      	add	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d32b      	bcc.n	8003e20 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	605a      	str	r2, [r3, #4]
 8003dd0:	e026      	b.n	8003e20 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	68d8      	ldr	r0, [r3, #12]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	461a      	mov	r2, r3
 8003ddc:	68b9      	ldr	r1, [r7, #8]
 8003dde:	f001 fcf1 	bl	80057c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	425b      	negs	r3, r3
 8003dec:	441a      	add	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d207      	bcs.n	8003e0e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	425b      	negs	r3, r3
 8003e08:	441a      	add	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d105      	bne.n	8003e20 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e28:	697b      	ldr	r3, [r7, #20]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d018      	beq.n	8003e76 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	441a      	add	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d303      	bcc.n	8003e66 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68d9      	ldr	r1, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	461a      	mov	r2, r3
 8003e70:	6838      	ldr	r0, [r7, #0]
 8003e72:	f001 fca7 	bl	80057c4 <memcpy>
	}
}
 8003e76:	bf00      	nop
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b084      	sub	sp, #16
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e86:	f001 f989 	bl	800519c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e90:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e92:	e011      	b.n	8003eb8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d012      	beq.n	8003ec2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3324      	adds	r3, #36	; 0x24
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 fc6d 	bl	8004780 <xTaskRemoveFromEventList>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003eac:	f000 fd40 	bl	8004930 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	dce9      	bgt.n	8003e94 <prvUnlockQueue+0x16>
 8003ec0:	e000      	b.n	8003ec4 <prvUnlockQueue+0x46>
					break;
 8003ec2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	22ff      	movs	r2, #255	; 0xff
 8003ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003ecc:	f001 f994 	bl	80051f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ed0:	f001 f964 	bl	800519c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003eda:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003edc:	e011      	b.n	8003f02 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d012      	beq.n	8003f0c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	3310      	adds	r3, #16
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fc48 	bl	8004780 <xTaskRemoveFromEventList>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ef6:	f000 fd1b 	bl	8004930 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003efa:	7bbb      	ldrb	r3, [r7, #14]
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	dce9      	bgt.n	8003ede <prvUnlockQueue+0x60>
 8003f0a:	e000      	b.n	8003f0e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f0c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	22ff      	movs	r2, #255	; 0xff
 8003f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f16:	f001 f96f 	bl	80051f8 <vPortExitCritical>
}
 8003f1a:	bf00      	nop
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b084      	sub	sp, #16
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f2a:	f001 f937 	bl	800519c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d102      	bne.n	8003f3c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f36:	2301      	movs	r3, #1
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	e001      	b.n	8003f40 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f40:	f001 f95a 	bl	80051f8 <vPortExitCritical>

	return xReturn;
 8003f44:	68fb      	ldr	r3, [r7, #12]
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b084      	sub	sp, #16
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f56:	f001 f921 	bl	800519c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d102      	bne.n	8003f6c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f66:	2301      	movs	r3, #1
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	e001      	b.n	8003f70 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f70:	f001 f942 	bl	80051f8 <vPortExitCritical>

	return xReturn;
 8003f74:	68fb      	ldr	r3, [r7, #12]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b08e      	sub	sp, #56	; 0x38
 8003f82:	af04      	add	r7, sp, #16
 8003f84:	60f8      	str	r0, [r7, #12]
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	607a      	str	r2, [r7, #4]
 8003f8a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d109      	bne.n	8003fa6 <xTaskCreateStatic+0x28>
	__asm volatile
 8003f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f96:	f383 8811 	msr	BASEPRI, r3
 8003f9a:	f3bf 8f6f 	isb	sy
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	623b      	str	r3, [r7, #32]
 8003fa4:	e7fe      	b.n	8003fa4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d109      	bne.n	8003fc0 <xTaskCreateStatic+0x42>
 8003fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	61fb      	str	r3, [r7, #28]
 8003fbe:	e7fe      	b.n	8003fbe <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003fc0:	2354      	movs	r3, #84	; 0x54
 8003fc2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	2b54      	cmp	r3, #84	; 0x54
 8003fc8:	d009      	beq.n	8003fde <xTaskCreateStatic+0x60>
 8003fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	61bb      	str	r3, [r7, #24]
 8003fdc:	e7fe      	b.n	8003fdc <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003fde:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d01e      	beq.n	8004024 <xTaskCreateStatic+0xa6>
 8003fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d01b      	beq.n	8004024 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ff4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ffe:	2300      	movs	r3, #0
 8004000:	9303      	str	r3, [sp, #12]
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	9302      	str	r3, [sp, #8]
 8004006:	f107 0314 	add.w	r3, r7, #20
 800400a:	9301      	str	r3, [sp, #4]
 800400c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	68b9      	ldr	r1, [r7, #8]
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 f850 	bl	80040bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800401c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800401e:	f000 f8d3 	bl	80041c8 <prvAddNewTaskToReadyList>
 8004022:	e001      	b.n	8004028 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004024:	2300      	movs	r3, #0
 8004026:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004028:	697b      	ldr	r3, [r7, #20]
	}
 800402a:	4618      	mov	r0, r3
 800402c:	3728      	adds	r7, #40	; 0x28
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004032:	b580      	push	{r7, lr}
 8004034:	b08c      	sub	sp, #48	; 0x30
 8004036:	af04      	add	r7, sp, #16
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	603b      	str	r3, [r7, #0]
 800403e:	4613      	mov	r3, r2
 8004040:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004042:	88fb      	ldrh	r3, [r7, #6]
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4618      	mov	r0, r3
 8004048:	f001 f9c2 	bl	80053d0 <pvPortMalloc>
 800404c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00e      	beq.n	8004072 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004054:	2054      	movs	r0, #84	; 0x54
 8004056:	f001 f9bb 	bl	80053d0 <pvPortMalloc>
 800405a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	631a      	str	r2, [r3, #48]	; 0x30
 8004068:	e005      	b.n	8004076 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800406a:	6978      	ldr	r0, [r7, #20]
 800406c:	f001 fa72 	bl	8005554 <vPortFree>
 8004070:	e001      	b.n	8004076 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004072:	2300      	movs	r3, #0
 8004074:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d017      	beq.n	80040ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004084:	88fa      	ldrh	r2, [r7, #6]
 8004086:	2300      	movs	r3, #0
 8004088:	9303      	str	r3, [sp, #12]
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	9302      	str	r3, [sp, #8]
 800408e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004090:	9301      	str	r3, [sp, #4]
 8004092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68b9      	ldr	r1, [r7, #8]
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 f80e 	bl	80040bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040a0:	69f8      	ldr	r0, [r7, #28]
 80040a2:	f000 f891 	bl	80041c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80040a6:	2301      	movs	r3, #1
 80040a8:	61bb      	str	r3, [r7, #24]
 80040aa:	e002      	b.n	80040b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040ac:	f04f 33ff 	mov.w	r3, #4294967295
 80040b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80040b2:	69bb      	ldr	r3, [r7, #24]
	}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3720      	adds	r7, #32
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
 80040c8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80040ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040d4:	3b01      	subs	r3, #1
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	f023 0307 	bic.w	r3, r3, #7
 80040e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d009      	beq.n	8004102 <prvInitialiseNewTask+0x46>
 80040ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	e7fe      	b.n	8004100 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d01f      	beq.n	8004148 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004108:	2300      	movs	r3, #0
 800410a:	61fb      	str	r3, [r7, #28]
 800410c:	e012      	b.n	8004134 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	4413      	add	r3, r2
 8004114:	7819      	ldrb	r1, [r3, #0]
 8004116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	4413      	add	r3, r2
 800411c:	3334      	adds	r3, #52	; 0x34
 800411e:	460a      	mov	r2, r1
 8004120:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	4413      	add	r3, r2
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d006      	beq.n	800413c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	3301      	adds	r3, #1
 8004132:	61fb      	str	r3, [r7, #28]
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	2b0f      	cmp	r3, #15
 8004138:	d9e9      	bls.n	800410e <prvInitialiseNewTask+0x52>
 800413a:	e000      	b.n	800413e <prvInitialiseNewTask+0x82>
			{
				break;
 800413c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004146:	e003      	b.n	8004150 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004152:	2b06      	cmp	r3, #6
 8004154:	d901      	bls.n	800415a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004156:	2306      	movs	r3, #6
 8004158:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800415a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800415e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004164:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004168:	2200      	movs	r2, #0
 800416a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800416c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416e:	3304      	adds	r3, #4
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff f905 	bl	8003380 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004178:	3318      	adds	r3, #24
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff f900 	bl	8003380 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004184:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004188:	f1c3 0207 	rsb	r2, r3, #7
 800418c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004194:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004198:	2200      	movs	r2, #0
 800419a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800419c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	68f9      	ldr	r1, [r7, #12]
 80041a8:	69b8      	ldr	r0, [r7, #24]
 80041aa:	f000 fed3 	bl	8004f54 <pxPortInitialiseStack>
 80041ae:	4602      	mov	r2, r0
 80041b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80041b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041c0:	bf00      	nop
 80041c2:	3720      	adds	r7, #32
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041d0:	f000 ffe4 	bl	800519c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041d4:	4b2a      	ldr	r3, [pc, #168]	; (8004280 <prvAddNewTaskToReadyList+0xb8>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3301      	adds	r3, #1
 80041da:	4a29      	ldr	r2, [pc, #164]	; (8004280 <prvAddNewTaskToReadyList+0xb8>)
 80041dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80041de:	4b29      	ldr	r3, [pc, #164]	; (8004284 <prvAddNewTaskToReadyList+0xbc>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d109      	bne.n	80041fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80041e6:	4a27      	ldr	r2, [pc, #156]	; (8004284 <prvAddNewTaskToReadyList+0xbc>)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80041ec:	4b24      	ldr	r3, [pc, #144]	; (8004280 <prvAddNewTaskToReadyList+0xb8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d110      	bne.n	8004216 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80041f4:	f000 fbc0 	bl	8004978 <prvInitialiseTaskLists>
 80041f8:	e00d      	b.n	8004216 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80041fa:	4b23      	ldr	r3, [pc, #140]	; (8004288 <prvAddNewTaskToReadyList+0xc0>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d109      	bne.n	8004216 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004202:	4b20      	ldr	r3, [pc, #128]	; (8004284 <prvAddNewTaskToReadyList+0xbc>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	429a      	cmp	r2, r3
 800420e:	d802      	bhi.n	8004216 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004210:	4a1c      	ldr	r2, [pc, #112]	; (8004284 <prvAddNewTaskToReadyList+0xbc>)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004216:	4b1d      	ldr	r3, [pc, #116]	; (800428c <prvAddNewTaskToReadyList+0xc4>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3301      	adds	r3, #1
 800421c:	4a1b      	ldr	r2, [pc, #108]	; (800428c <prvAddNewTaskToReadyList+0xc4>)
 800421e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	2201      	movs	r2, #1
 8004226:	409a      	lsls	r2, r3
 8004228:	4b19      	ldr	r3, [pc, #100]	; (8004290 <prvAddNewTaskToReadyList+0xc8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4313      	orrs	r3, r2
 800422e:	4a18      	ldr	r2, [pc, #96]	; (8004290 <prvAddNewTaskToReadyList+0xc8>)
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004236:	4613      	mov	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4a15      	ldr	r2, [pc, #84]	; (8004294 <prvAddNewTaskToReadyList+0xcc>)
 8004240:	441a      	add	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	3304      	adds	r3, #4
 8004246:	4619      	mov	r1, r3
 8004248:	4610      	mov	r0, r2
 800424a:	f7ff f8a6 	bl	800339a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800424e:	f000 ffd3 	bl	80051f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004252:	4b0d      	ldr	r3, [pc, #52]	; (8004288 <prvAddNewTaskToReadyList+0xc0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00e      	beq.n	8004278 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800425a:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <prvAddNewTaskToReadyList+0xbc>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	429a      	cmp	r2, r3
 8004266:	d207      	bcs.n	8004278 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004268:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <prvAddNewTaskToReadyList+0xd0>)
 800426a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004278:	bf00      	nop
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	20000380 	.word	0x20000380
 8004284:	20000280 	.word	0x20000280
 8004288:	2000038c 	.word	0x2000038c
 800428c:	2000039c 	.word	0x2000039c
 8004290:	20000388 	.word	0x20000388
 8004294:	20000284 	.word	0x20000284
 8004298:	e000ed04 	.word	0xe000ed04

0800429c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d016      	beq.n	80042dc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80042ae:	4b13      	ldr	r3, [pc, #76]	; (80042fc <vTaskDelay+0x60>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d009      	beq.n	80042ca <vTaskDelay+0x2e>
 80042b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ba:	f383 8811 	msr	BASEPRI, r3
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f3bf 8f4f 	dsb	sy
 80042c6:	60bb      	str	r3, [r7, #8]
 80042c8:	e7fe      	b.n	80042c8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80042ca:	f000 f879 	bl	80043c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042ce:	2100      	movs	r1, #0
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 fdd9 	bl	8004e88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80042d6:	f000 f881 	bl	80043dc <xTaskResumeAll>
 80042da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d107      	bne.n	80042f2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80042e2:	4b07      	ldr	r3, [pc, #28]	; (8004300 <vTaskDelay+0x64>)
 80042e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80042f2:	bf00      	nop
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	200003a8 	.word	0x200003a8
 8004300:	e000ed04 	.word	0xe000ed04

08004304 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b08a      	sub	sp, #40	; 0x28
 8004308:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800430a:	2300      	movs	r3, #0
 800430c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800430e:	2300      	movs	r3, #0
 8004310:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004312:	463a      	mov	r2, r7
 8004314:	1d39      	adds	r1, r7, #4
 8004316:	f107 0308 	add.w	r3, r7, #8
 800431a:	4618      	mov	r0, r3
 800431c:	f7fc f8e0 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004320:	6839      	ldr	r1, [r7, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	9202      	str	r2, [sp, #8]
 8004328:	9301      	str	r3, [sp, #4]
 800432a:	2300      	movs	r3, #0
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	2300      	movs	r3, #0
 8004330:	460a      	mov	r2, r1
 8004332:	491d      	ldr	r1, [pc, #116]	; (80043a8 <vTaskStartScheduler+0xa4>)
 8004334:	481d      	ldr	r0, [pc, #116]	; (80043ac <vTaskStartScheduler+0xa8>)
 8004336:	f7ff fe22 	bl	8003f7e <xTaskCreateStatic>
 800433a:	4602      	mov	r2, r0
 800433c:	4b1c      	ldr	r3, [pc, #112]	; (80043b0 <vTaskStartScheduler+0xac>)
 800433e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004340:	4b1b      	ldr	r3, [pc, #108]	; (80043b0 <vTaskStartScheduler+0xac>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004348:	2301      	movs	r3, #1
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	e001      	b.n	8004352 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800434e:	2300      	movs	r3, #0
 8004350:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d115      	bne.n	8004384 <vTaskStartScheduler+0x80>
 8004358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800436a:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <vTaskStartScheduler+0xb0>)
 800436c:	f04f 32ff 	mov.w	r2, #4294967295
 8004370:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004372:	4b11      	ldr	r3, [pc, #68]	; (80043b8 <vTaskStartScheduler+0xb4>)
 8004374:	2201      	movs	r2, #1
 8004376:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004378:	4b10      	ldr	r3, [pc, #64]	; (80043bc <vTaskStartScheduler+0xb8>)
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800437e:	f000 fe6f 	bl	8005060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004382:	e00d      	b.n	80043a0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438a:	d109      	bne.n	80043a0 <vTaskStartScheduler+0x9c>
 800438c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	e7fe      	b.n	800439e <vTaskStartScheduler+0x9a>
}
 80043a0:	bf00      	nop
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	08005860 	.word	0x08005860
 80043ac:	08004949 	.word	0x08004949
 80043b0:	200003a4 	.word	0x200003a4
 80043b4:	200003a0 	.word	0x200003a0
 80043b8:	2000038c 	.word	0x2000038c
 80043bc:	20000384 	.word	0x20000384

080043c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80043c4:	4b04      	ldr	r3, [pc, #16]	; (80043d8 <vTaskSuspendAll+0x18>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3301      	adds	r3, #1
 80043ca:	4a03      	ldr	r2, [pc, #12]	; (80043d8 <vTaskSuspendAll+0x18>)
 80043cc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80043ce:	bf00      	nop
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	200003a8 	.word	0x200003a8

080043dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80043e2:	2300      	movs	r3, #0
 80043e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043e6:	2300      	movs	r3, #0
 80043e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043ea:	4b41      	ldr	r3, [pc, #260]	; (80044f0 <xTaskResumeAll+0x114>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d109      	bne.n	8004406 <xTaskResumeAll+0x2a>
 80043f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	603b      	str	r3, [r7, #0]
 8004404:	e7fe      	b.n	8004404 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004406:	f000 fec9 	bl	800519c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800440a:	4b39      	ldr	r3, [pc, #228]	; (80044f0 <xTaskResumeAll+0x114>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3b01      	subs	r3, #1
 8004410:	4a37      	ldr	r2, [pc, #220]	; (80044f0 <xTaskResumeAll+0x114>)
 8004412:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004414:	4b36      	ldr	r3, [pc, #216]	; (80044f0 <xTaskResumeAll+0x114>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d161      	bne.n	80044e0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800441c:	4b35      	ldr	r3, [pc, #212]	; (80044f4 <xTaskResumeAll+0x118>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d05d      	beq.n	80044e0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004424:	e02e      	b.n	8004484 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004426:	4b34      	ldr	r3, [pc, #208]	; (80044f8 <xTaskResumeAll+0x11c>)
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3318      	adds	r3, #24
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff f80e 	bl	8003454 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	3304      	adds	r3, #4
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff f809 	bl	8003454 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	2201      	movs	r2, #1
 8004448:	409a      	lsls	r2, r3
 800444a:	4b2c      	ldr	r3, [pc, #176]	; (80044fc <xTaskResumeAll+0x120>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4313      	orrs	r3, r2
 8004450:	4a2a      	ldr	r2, [pc, #168]	; (80044fc <xTaskResumeAll+0x120>)
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004458:	4613      	mov	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4a27      	ldr	r2, [pc, #156]	; (8004500 <xTaskResumeAll+0x124>)
 8004462:	441a      	add	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	3304      	adds	r3, #4
 8004468:	4619      	mov	r1, r3
 800446a:	4610      	mov	r0, r2
 800446c:	f7fe ff95 	bl	800339a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004474:	4b23      	ldr	r3, [pc, #140]	; (8004504 <xTaskResumeAll+0x128>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447a:	429a      	cmp	r2, r3
 800447c:	d302      	bcc.n	8004484 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800447e:	4b22      	ldr	r3, [pc, #136]	; (8004508 <xTaskResumeAll+0x12c>)
 8004480:	2201      	movs	r2, #1
 8004482:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004484:	4b1c      	ldr	r3, [pc, #112]	; (80044f8 <xTaskResumeAll+0x11c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1cc      	bne.n	8004426 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004492:	f000 fb0b 	bl	8004aac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004496:	4b1d      	ldr	r3, [pc, #116]	; (800450c <xTaskResumeAll+0x130>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d010      	beq.n	80044c4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80044a2:	f000 f837 	bl	8004514 <xTaskIncrementTick>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80044ac:	4b16      	ldr	r3, [pc, #88]	; (8004508 <xTaskResumeAll+0x12c>)
 80044ae:	2201      	movs	r2, #1
 80044b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3b01      	subs	r3, #1
 80044b6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f1      	bne.n	80044a2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80044be:	4b13      	ldr	r3, [pc, #76]	; (800450c <xTaskResumeAll+0x130>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044c4:	4b10      	ldr	r3, [pc, #64]	; (8004508 <xTaskResumeAll+0x12c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d009      	beq.n	80044e0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80044cc:	2301      	movs	r3, #1
 80044ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80044d0:	4b0f      	ldr	r3, [pc, #60]	; (8004510 <xTaskResumeAll+0x134>)
 80044d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044e0:	f000 fe8a 	bl	80051f8 <vPortExitCritical>

	return xAlreadyYielded;
 80044e4:	68bb      	ldr	r3, [r7, #8]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	200003a8 	.word	0x200003a8
 80044f4:	20000380 	.word	0x20000380
 80044f8:	20000340 	.word	0x20000340
 80044fc:	20000388 	.word	0x20000388
 8004500:	20000284 	.word	0x20000284
 8004504:	20000280 	.word	0x20000280
 8004508:	20000394 	.word	0x20000394
 800450c:	20000390 	.word	0x20000390
 8004510:	e000ed04 	.word	0xe000ed04

08004514 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800451a:	2300      	movs	r3, #0
 800451c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800451e:	4b4e      	ldr	r3, [pc, #312]	; (8004658 <xTaskIncrementTick+0x144>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	f040 8087 	bne.w	8004636 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004528:	4b4c      	ldr	r3, [pc, #304]	; (800465c <xTaskIncrementTick+0x148>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3301      	adds	r3, #1
 800452e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004530:	4a4a      	ldr	r2, [pc, #296]	; (800465c <xTaskIncrementTick+0x148>)
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d11f      	bne.n	800457c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800453c:	4b48      	ldr	r3, [pc, #288]	; (8004660 <xTaskIncrementTick+0x14c>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d009      	beq.n	800455a <xTaskIncrementTick+0x46>
 8004546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454a:	f383 8811 	msr	BASEPRI, r3
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	603b      	str	r3, [r7, #0]
 8004558:	e7fe      	b.n	8004558 <xTaskIncrementTick+0x44>
 800455a:	4b41      	ldr	r3, [pc, #260]	; (8004660 <xTaskIncrementTick+0x14c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	4b40      	ldr	r3, [pc, #256]	; (8004664 <xTaskIncrementTick+0x150>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a3e      	ldr	r2, [pc, #248]	; (8004660 <xTaskIncrementTick+0x14c>)
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	4a3e      	ldr	r2, [pc, #248]	; (8004664 <xTaskIncrementTick+0x150>)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	4b3e      	ldr	r3, [pc, #248]	; (8004668 <xTaskIncrementTick+0x154>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3301      	adds	r3, #1
 8004574:	4a3c      	ldr	r2, [pc, #240]	; (8004668 <xTaskIncrementTick+0x154>)
 8004576:	6013      	str	r3, [r2, #0]
 8004578:	f000 fa98 	bl	8004aac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800457c:	4b3b      	ldr	r3, [pc, #236]	; (800466c <xTaskIncrementTick+0x158>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	429a      	cmp	r2, r3
 8004584:	d348      	bcc.n	8004618 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004586:	4b36      	ldr	r3, [pc, #216]	; (8004660 <xTaskIncrementTick+0x14c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d104      	bne.n	800459a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004590:	4b36      	ldr	r3, [pc, #216]	; (800466c <xTaskIncrementTick+0x158>)
 8004592:	f04f 32ff 	mov.w	r2, #4294967295
 8004596:	601a      	str	r2, [r3, #0]
					break;
 8004598:	e03e      	b.n	8004618 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800459a:	4b31      	ldr	r3, [pc, #196]	; (8004660 <xTaskIncrementTick+0x14c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d203      	bcs.n	80045ba <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80045b2:	4a2e      	ldr	r2, [pc, #184]	; (800466c <xTaskIncrementTick+0x158>)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80045b8:	e02e      	b.n	8004618 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	3304      	adds	r3, #4
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fe ff48 	bl	8003454 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d004      	beq.n	80045d6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	3318      	adds	r3, #24
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fe ff3f 	bl	8003454 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045da:	2201      	movs	r2, #1
 80045dc:	409a      	lsls	r2, r3
 80045de:	4b24      	ldr	r3, [pc, #144]	; (8004670 <xTaskIncrementTick+0x15c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	4a22      	ldr	r2, [pc, #136]	; (8004670 <xTaskIncrementTick+0x15c>)
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ec:	4613      	mov	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4a1f      	ldr	r2, [pc, #124]	; (8004674 <xTaskIncrementTick+0x160>)
 80045f6:	441a      	add	r2, r3
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	3304      	adds	r3, #4
 80045fc:	4619      	mov	r1, r3
 80045fe:	4610      	mov	r0, r2
 8004600:	f7fe fecb 	bl	800339a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004608:	4b1b      	ldr	r3, [pc, #108]	; (8004678 <xTaskIncrementTick+0x164>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460e:	429a      	cmp	r2, r3
 8004610:	d3b9      	bcc.n	8004586 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004612:	2301      	movs	r3, #1
 8004614:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004616:	e7b6      	b.n	8004586 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004618:	4b17      	ldr	r3, [pc, #92]	; (8004678 <xTaskIncrementTick+0x164>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461e:	4915      	ldr	r1, [pc, #84]	; (8004674 <xTaskIncrementTick+0x160>)
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d907      	bls.n	8004640 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004630:	2301      	movs	r3, #1
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	e004      	b.n	8004640 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004636:	4b11      	ldr	r3, [pc, #68]	; (800467c <xTaskIncrementTick+0x168>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3301      	adds	r3, #1
 800463c:	4a0f      	ldr	r2, [pc, #60]	; (800467c <xTaskIncrementTick+0x168>)
 800463e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004640:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <xTaskIncrementTick+0x16c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004648:	2301      	movs	r3, #1
 800464a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800464c:	697b      	ldr	r3, [r7, #20]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	200003a8 	.word	0x200003a8
 800465c:	20000384 	.word	0x20000384
 8004660:	20000338 	.word	0x20000338
 8004664:	2000033c 	.word	0x2000033c
 8004668:	20000398 	.word	0x20000398
 800466c:	200003a0 	.word	0x200003a0
 8004670:	20000388 	.word	0x20000388
 8004674:	20000284 	.word	0x20000284
 8004678:	20000280 	.word	0x20000280
 800467c:	20000390 	.word	0x20000390
 8004680:	20000394 	.word	0x20000394

08004684 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800468a:	4b26      	ldr	r3, [pc, #152]	; (8004724 <vTaskSwitchContext+0xa0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004692:	4b25      	ldr	r3, [pc, #148]	; (8004728 <vTaskSwitchContext+0xa4>)
 8004694:	2201      	movs	r2, #1
 8004696:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004698:	e03e      	b.n	8004718 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800469a:	4b23      	ldr	r3, [pc, #140]	; (8004728 <vTaskSwitchContext+0xa4>)
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046a0:	4b22      	ldr	r3, [pc, #136]	; (800472c <vTaskSwitchContext+0xa8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	fab3 f383 	clz	r3, r3
 80046ac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80046ae:	7afb      	ldrb	r3, [r7, #11]
 80046b0:	f1c3 031f 	rsb	r3, r3, #31
 80046b4:	617b      	str	r3, [r7, #20]
 80046b6:	491e      	ldr	r1, [pc, #120]	; (8004730 <vTaskSwitchContext+0xac>)
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	4613      	mov	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	440b      	add	r3, r1
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d109      	bne.n	80046de <vTaskSwitchContext+0x5a>
	__asm volatile
 80046ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	607b      	str	r3, [r7, #4]
 80046dc:	e7fe      	b.n	80046dc <vTaskSwitchContext+0x58>
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4613      	mov	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4a11      	ldr	r2, [pc, #68]	; (8004730 <vTaskSwitchContext+0xac>)
 80046ea:	4413      	add	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	605a      	str	r2, [r3, #4]
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	3308      	adds	r3, #8
 8004700:	429a      	cmp	r2, r3
 8004702:	d104      	bne.n	800470e <vTaskSwitchContext+0x8a>
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	605a      	str	r2, [r3, #4]
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	4a07      	ldr	r2, [pc, #28]	; (8004734 <vTaskSwitchContext+0xb0>)
 8004716:	6013      	str	r3, [r2, #0]
}
 8004718:	bf00      	nop
 800471a:	371c      	adds	r7, #28
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	200003a8 	.word	0x200003a8
 8004728:	20000394 	.word	0x20000394
 800472c:	20000388 	.word	0x20000388
 8004730:	20000284 	.word	0x20000284
 8004734:	20000280 	.word	0x20000280

08004738 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d109      	bne.n	800475c <vTaskPlaceOnEventList+0x24>
 8004748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474c:	f383 8811 	msr	BASEPRI, r3
 8004750:	f3bf 8f6f 	isb	sy
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	e7fe      	b.n	800475a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800475c:	4b07      	ldr	r3, [pc, #28]	; (800477c <vTaskPlaceOnEventList+0x44>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3318      	adds	r3, #24
 8004762:	4619      	mov	r1, r3
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f7fe fe3c 	bl	80033e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800476a:	2101      	movs	r1, #1
 800476c:	6838      	ldr	r0, [r7, #0]
 800476e:	f000 fb8b 	bl	8004e88 <prvAddCurrentTaskToDelayedList>
}
 8004772:	bf00      	nop
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	20000280 	.word	0x20000280

08004780 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d109      	bne.n	80047aa <xTaskRemoveFromEventList+0x2a>
 8004796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	e7fe      	b.n	80047a8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	3318      	adds	r3, #24
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fe fe50 	bl	8003454 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047b4:	4b1d      	ldr	r3, [pc, #116]	; (800482c <xTaskRemoveFromEventList+0xac>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d11c      	bne.n	80047f6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	3304      	adds	r3, #4
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7fe fe47 	bl	8003454 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ca:	2201      	movs	r2, #1
 80047cc:	409a      	lsls	r2, r3
 80047ce:	4b18      	ldr	r3, [pc, #96]	; (8004830 <xTaskRemoveFromEventList+0xb0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	4a16      	ldr	r2, [pc, #88]	; (8004830 <xTaskRemoveFromEventList+0xb0>)
 80047d6:	6013      	str	r3, [r2, #0]
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047dc:	4613      	mov	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4a13      	ldr	r2, [pc, #76]	; (8004834 <xTaskRemoveFromEventList+0xb4>)
 80047e6:	441a      	add	r2, r3
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	3304      	adds	r3, #4
 80047ec:	4619      	mov	r1, r3
 80047ee:	4610      	mov	r0, r2
 80047f0:	f7fe fdd3 	bl	800339a <vListInsertEnd>
 80047f4:	e005      	b.n	8004802 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	3318      	adds	r3, #24
 80047fa:	4619      	mov	r1, r3
 80047fc:	480e      	ldr	r0, [pc, #56]	; (8004838 <xTaskRemoveFromEventList+0xb8>)
 80047fe:	f7fe fdcc 	bl	800339a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004806:	4b0d      	ldr	r3, [pc, #52]	; (800483c <xTaskRemoveFromEventList+0xbc>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	429a      	cmp	r2, r3
 800480e:	d905      	bls.n	800481c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004810:	2301      	movs	r3, #1
 8004812:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004814:	4b0a      	ldr	r3, [pc, #40]	; (8004840 <xTaskRemoveFromEventList+0xc0>)
 8004816:	2201      	movs	r2, #1
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	e001      	b.n	8004820 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004820:	697b      	ldr	r3, [r7, #20]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3718      	adds	r7, #24
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	200003a8 	.word	0x200003a8
 8004830:	20000388 	.word	0x20000388
 8004834:	20000284 	.word	0x20000284
 8004838:	20000340 	.word	0x20000340
 800483c:	20000280 	.word	0x20000280
 8004840:	20000394 	.word	0x20000394

08004844 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800484c:	4b06      	ldr	r3, [pc, #24]	; (8004868 <vTaskInternalSetTimeOutState+0x24>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004854:	4b05      	ldr	r3, [pc, #20]	; (800486c <vTaskInternalSetTimeOutState+0x28>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	605a      	str	r2, [r3, #4]
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	20000398 	.word	0x20000398
 800486c:	20000384 	.word	0x20000384

08004870 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b088      	sub	sp, #32
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d109      	bne.n	8004894 <xTaskCheckForTimeOut+0x24>
 8004880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	e7fe      	b.n	8004892 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d109      	bne.n	80048ae <xTaskCheckForTimeOut+0x3e>
 800489a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	e7fe      	b.n	80048ac <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80048ae:	f000 fc75 	bl	800519c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80048b2:	4b1d      	ldr	r3, [pc, #116]	; (8004928 <xTaskCheckForTimeOut+0xb8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ca:	d102      	bne.n	80048d2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61fb      	str	r3, [r7, #28]
 80048d0:	e023      	b.n	800491a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	4b15      	ldr	r3, [pc, #84]	; (800492c <xTaskCheckForTimeOut+0xbc>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d007      	beq.n	80048ee <xTaskCheckForTimeOut+0x7e>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d302      	bcc.n	80048ee <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80048e8:	2301      	movs	r3, #1
 80048ea:	61fb      	str	r3, [r7, #28]
 80048ec:	e015      	b.n	800491a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d20b      	bcs.n	8004910 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	1ad2      	subs	r2, r2, r3
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7ff ff9d 	bl	8004844 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800490a:	2300      	movs	r3, #0
 800490c:	61fb      	str	r3, [r7, #28]
 800490e:	e004      	b.n	800491a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	2200      	movs	r2, #0
 8004914:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004916:	2301      	movs	r3, #1
 8004918:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800491a:	f000 fc6d 	bl	80051f8 <vPortExitCritical>

	return xReturn;
 800491e:	69fb      	ldr	r3, [r7, #28]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3720      	adds	r7, #32
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	20000384 	.word	0x20000384
 800492c:	20000398 	.word	0x20000398

08004930 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004934:	4b03      	ldr	r3, [pc, #12]	; (8004944 <vTaskMissedYield+0x14>)
 8004936:	2201      	movs	r2, #1
 8004938:	601a      	str	r2, [r3, #0]
}
 800493a:	bf00      	nop
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	20000394 	.word	0x20000394

08004948 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004950:	f000 f852 	bl	80049f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004954:	4b06      	ldr	r3, [pc, #24]	; (8004970 <prvIdleTask+0x28>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d9f9      	bls.n	8004950 <prvIdleTask+0x8>
			{
				taskYIELD();
 800495c:	4b05      	ldr	r3, [pc, #20]	; (8004974 <prvIdleTask+0x2c>)
 800495e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800496c:	e7f0      	b.n	8004950 <prvIdleTask+0x8>
 800496e:	bf00      	nop
 8004970:	20000284 	.word	0x20000284
 8004974:	e000ed04 	.word	0xe000ed04

08004978 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800497e:	2300      	movs	r3, #0
 8004980:	607b      	str	r3, [r7, #4]
 8004982:	e00c      	b.n	800499e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	4613      	mov	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4a12      	ldr	r2, [pc, #72]	; (80049d8 <prvInitialiseTaskLists+0x60>)
 8004990:	4413      	add	r3, r2
 8004992:	4618      	mov	r0, r3
 8004994:	f7fe fcd4 	bl	8003340 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3301      	adds	r3, #1
 800499c:	607b      	str	r3, [r7, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b06      	cmp	r3, #6
 80049a2:	d9ef      	bls.n	8004984 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80049a4:	480d      	ldr	r0, [pc, #52]	; (80049dc <prvInitialiseTaskLists+0x64>)
 80049a6:	f7fe fccb 	bl	8003340 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80049aa:	480d      	ldr	r0, [pc, #52]	; (80049e0 <prvInitialiseTaskLists+0x68>)
 80049ac:	f7fe fcc8 	bl	8003340 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80049b0:	480c      	ldr	r0, [pc, #48]	; (80049e4 <prvInitialiseTaskLists+0x6c>)
 80049b2:	f7fe fcc5 	bl	8003340 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80049b6:	480c      	ldr	r0, [pc, #48]	; (80049e8 <prvInitialiseTaskLists+0x70>)
 80049b8:	f7fe fcc2 	bl	8003340 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80049bc:	480b      	ldr	r0, [pc, #44]	; (80049ec <prvInitialiseTaskLists+0x74>)
 80049be:	f7fe fcbf 	bl	8003340 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80049c2:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <prvInitialiseTaskLists+0x78>)
 80049c4:	4a05      	ldr	r2, [pc, #20]	; (80049dc <prvInitialiseTaskLists+0x64>)
 80049c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049c8:	4b0a      	ldr	r3, [pc, #40]	; (80049f4 <prvInitialiseTaskLists+0x7c>)
 80049ca:	4a05      	ldr	r2, [pc, #20]	; (80049e0 <prvInitialiseTaskLists+0x68>)
 80049cc:	601a      	str	r2, [r3, #0]
}
 80049ce:	bf00      	nop
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20000284 	.word	0x20000284
 80049dc:	20000310 	.word	0x20000310
 80049e0:	20000324 	.word	0x20000324
 80049e4:	20000340 	.word	0x20000340
 80049e8:	20000354 	.word	0x20000354
 80049ec:	2000036c 	.word	0x2000036c
 80049f0:	20000338 	.word	0x20000338
 80049f4:	2000033c 	.word	0x2000033c

080049f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049fe:	e019      	b.n	8004a34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a00:	f000 fbcc 	bl	800519c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a04:	4b0f      	ldr	r3, [pc, #60]	; (8004a44 <prvCheckTasksWaitingTermination+0x4c>)
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fe fd1f 	bl	8003454 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a16:	4b0c      	ldr	r3, [pc, #48]	; (8004a48 <prvCheckTasksWaitingTermination+0x50>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	4a0a      	ldr	r2, [pc, #40]	; (8004a48 <prvCheckTasksWaitingTermination+0x50>)
 8004a1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a20:	4b0a      	ldr	r3, [pc, #40]	; (8004a4c <prvCheckTasksWaitingTermination+0x54>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3b01      	subs	r3, #1
 8004a26:	4a09      	ldr	r2, [pc, #36]	; (8004a4c <prvCheckTasksWaitingTermination+0x54>)
 8004a28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a2a:	f000 fbe5 	bl	80051f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f80e 	bl	8004a50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a34:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <prvCheckTasksWaitingTermination+0x54>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e1      	bne.n	8004a00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a3c:	bf00      	nop
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	20000354 	.word	0x20000354
 8004a48:	20000380 	.word	0x20000380
 8004a4c:	20000368 	.word	0x20000368

08004a50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d108      	bne.n	8004a74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 fd74 	bl	8005554 <vPortFree>
				vPortFree( pxTCB );
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 fd71 	bl	8005554 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a72:	e017      	b.n	8004aa4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d103      	bne.n	8004a86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 fd68 	bl	8005554 <vPortFree>
	}
 8004a84:	e00e      	b.n	8004aa4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d009      	beq.n	8004aa4 <prvDeleteTCB+0x54>
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	e7fe      	b.n	8004aa2 <prvDeleteTCB+0x52>
	}
 8004aa4:	bf00      	nop
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ab2:	4b0c      	ldr	r3, [pc, #48]	; (8004ae4 <prvResetNextTaskUnblockTime+0x38>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d104      	bne.n	8004ac6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004abc:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <prvResetNextTaskUnblockTime+0x3c>)
 8004abe:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ac4:	e008      	b.n	8004ad8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ac6:	4b07      	ldr	r3, [pc, #28]	; (8004ae4 <prvResetNextTaskUnblockTime+0x38>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	4a04      	ldr	r2, [pc, #16]	; (8004ae8 <prvResetNextTaskUnblockTime+0x3c>)
 8004ad6:	6013      	str	r3, [r2, #0]
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	20000338 	.word	0x20000338
 8004ae8:	200003a0 	.word	0x200003a0

08004aec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004af2:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <xTaskGetSchedulerState+0x34>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d102      	bne.n	8004b00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004afa:	2301      	movs	r3, #1
 8004afc:	607b      	str	r3, [r7, #4]
 8004afe:	e008      	b.n	8004b12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b00:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <xTaskGetSchedulerState+0x38>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d102      	bne.n	8004b0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b08:	2302      	movs	r3, #2
 8004b0a:	607b      	str	r3, [r7, #4]
 8004b0c:	e001      	b.n	8004b12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b12:	687b      	ldr	r3, [r7, #4]
	}
 8004b14:	4618      	mov	r0, r3
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	2000038c 	.word	0x2000038c
 8004b24:	200003a8 	.word	0x200003a8

08004b28 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004b34:	2300      	movs	r3, #0
 8004b36:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d069      	beq.n	8004c12 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b42:	4b36      	ldr	r3, [pc, #216]	; (8004c1c <xTaskPriorityInherit+0xf4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d259      	bcs.n	8004c00 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	db06      	blt.n	8004b62 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b54:	4b31      	ldr	r3, [pc, #196]	; (8004c1c <xTaskPriorityInherit+0xf4>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5a:	f1c3 0207 	rsb	r2, r3, #7
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	6959      	ldr	r1, [r3, #20]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4a2b      	ldr	r2, [pc, #172]	; (8004c20 <xTaskPriorityInherit+0xf8>)
 8004b74:	4413      	add	r3, r2
 8004b76:	4299      	cmp	r1, r3
 8004b78:	d13a      	bne.n	8004bf0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fe fc68 	bl	8003454 <uxListRemove>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d115      	bne.n	8004bb6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8e:	4924      	ldr	r1, [pc, #144]	; (8004c20 <xTaskPriorityInherit+0xf8>)
 8004b90:	4613      	mov	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10a      	bne.n	8004bb6 <xTaskPriorityInherit+0x8e>
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8004baa:	43da      	mvns	r2, r3
 8004bac:	4b1d      	ldr	r3, [pc, #116]	; (8004c24 <xTaskPriorityInherit+0xfc>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	4a1c      	ldr	r2, [pc, #112]	; (8004c24 <xTaskPriorityInherit+0xfc>)
 8004bb4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004bb6:	4b19      	ldr	r3, [pc, #100]	; (8004c1c <xTaskPriorityInherit+0xf4>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	409a      	lsls	r2, r3
 8004bc8:	4b16      	ldr	r3, [pc, #88]	; (8004c24 <xTaskPriorityInherit+0xfc>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	4a15      	ldr	r2, [pc, #84]	; (8004c24 <xTaskPriorityInherit+0xfc>)
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4a10      	ldr	r2, [pc, #64]	; (8004c20 <xTaskPriorityInherit+0xf8>)
 8004be0:	441a      	add	r2, r3
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	3304      	adds	r3, #4
 8004be6:	4619      	mov	r1, r3
 8004be8:	4610      	mov	r0, r2
 8004bea:	f7fe fbd6 	bl	800339a <vListInsertEnd>
 8004bee:	e004      	b.n	8004bfa <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004bf0:	4b0a      	ldr	r3, [pc, #40]	; (8004c1c <xTaskPriorityInherit+0xf4>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	e008      	b.n	8004c12 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c04:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <xTaskPriorityInherit+0xf4>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d201      	bcs.n	8004c12 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c12:	68fb      	ldr	r3, [r7, #12]
	}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	20000280 	.word	0x20000280
 8004c20:	20000284 	.word	0x20000284
 8004c24:	20000388 	.word	0x20000388

08004c28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c34:	2300      	movs	r3, #0
 8004c36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d06c      	beq.n	8004d18 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c3e:	4b39      	ldr	r3, [pc, #228]	; (8004d24 <xTaskPriorityDisinherit+0xfc>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d009      	beq.n	8004c5c <xTaskPriorityDisinherit+0x34>
 8004c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	60fb      	str	r3, [r7, #12]
 8004c5a:	e7fe      	b.n	8004c5a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d109      	bne.n	8004c78 <xTaskPriorityDisinherit+0x50>
 8004c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c68:	f383 8811 	msr	BASEPRI, r3
 8004c6c:	f3bf 8f6f 	isb	sy
 8004c70:	f3bf 8f4f 	dsb	sy
 8004c74:	60bb      	str	r3, [r7, #8]
 8004c76:	e7fe      	b.n	8004c76 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c7c:	1e5a      	subs	r2, r3, #1
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d044      	beq.n	8004d18 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d140      	bne.n	8004d18 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	3304      	adds	r3, #4
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fe fbda 	bl	8003454 <uxListRemove>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d115      	bne.n	8004cd2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004caa:	491f      	ldr	r1, [pc, #124]	; (8004d28 <xTaskPriorityDisinherit+0x100>)
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10a      	bne.n	8004cd2 <xTaskPriorityDisinherit+0xaa>
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43da      	mvns	r2, r3
 8004cc8:	4b18      	ldr	r3, [pc, #96]	; (8004d2c <xTaskPriorityDisinherit+0x104>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	4a17      	ldr	r2, [pc, #92]	; (8004d2c <xTaskPriorityDisinherit+0x104>)
 8004cd0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cde:	f1c3 0207 	rsb	r2, r3, #7
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cea:	2201      	movs	r2, #1
 8004cec:	409a      	lsls	r2, r3
 8004cee:	4b0f      	ldr	r3, [pc, #60]	; (8004d2c <xTaskPriorityDisinherit+0x104>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	4a0d      	ldr	r2, [pc, #52]	; (8004d2c <xTaskPriorityDisinherit+0x104>)
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4a08      	ldr	r2, [pc, #32]	; (8004d28 <xTaskPriorityDisinherit+0x100>)
 8004d06:	441a      	add	r2, r3
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4610      	mov	r0, r2
 8004d10:	f7fe fb43 	bl	800339a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004d14:	2301      	movs	r3, #1
 8004d16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d18:	697b      	ldr	r3, [r7, #20]
	}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	20000280 	.word	0x20000280
 8004d28:	20000284 	.word	0x20000284
 8004d2c:	20000388 	.word	0x20000388

08004d30 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b088      	sub	sp, #32
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 8081 	beq.w	8004e4c <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d109      	bne.n	8004d66 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8004d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	e7fe      	b.n	8004d64 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d902      	bls.n	8004d76 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	61fb      	str	r3, [r7, #28]
 8004d74:	e002      	b.n	8004d7c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d80:	69fa      	ldr	r2, [r7, #28]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d062      	beq.n	8004e4c <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d15d      	bne.n	8004e4c <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004d90:	4b30      	ldr	r3, [pc, #192]	; (8004e54 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d109      	bne.n	8004dae <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8004d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	60bb      	str	r3, [r7, #8]
 8004dac:	e7fe      	b.n	8004dac <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	69fa      	ldr	r2, [r7, #28]
 8004db8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	db04      	blt.n	8004dcc <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	f1c3 0207 	rsb	r2, r3, #7
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	6959      	ldr	r1, [r3, #20]
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4a1f      	ldr	r2, [pc, #124]	; (8004e58 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8004ddc:	4413      	add	r3, r2
 8004dde:	4299      	cmp	r1, r3
 8004de0:	d134      	bne.n	8004e4c <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	3304      	adds	r3, #4
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fe fb34 	bl	8003454 <uxListRemove>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d115      	bne.n	8004e1e <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df6:	4918      	ldr	r1, [pc, #96]	; (8004e58 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8004df8:	4613      	mov	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	440b      	add	r3, r1
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <vTaskPriorityDisinheritAfterTimeout+0xee>
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e12:	43da      	mvns	r2, r3
 8004e14:	4b11      	ldr	r3, [pc, #68]	; (8004e5c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4013      	ands	r3, r2
 8004e1a:	4a10      	ldr	r2, [pc, #64]	; (8004e5c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004e1c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e22:	2201      	movs	r2, #1
 8004e24:	409a      	lsls	r2, r3
 8004e26:	4b0d      	ldr	r3, [pc, #52]	; (8004e5c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	4a0b      	ldr	r2, [pc, #44]	; (8004e5c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e34:	4613      	mov	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4a06      	ldr	r2, [pc, #24]	; (8004e58 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8004e3e:	441a      	add	r2, r3
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	3304      	adds	r3, #4
 8004e44:	4619      	mov	r1, r3
 8004e46:	4610      	mov	r0, r2
 8004e48:	f7fe faa7 	bl	800339a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e4c:	bf00      	nop
 8004e4e:	3720      	adds	r7, #32
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	20000280 	.word	0x20000280
 8004e58:	20000284 	.word	0x20000284
 8004e5c:	20000388 	.word	0x20000388

08004e60 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004e60:	b480      	push	{r7}
 8004e62:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004e64:	4b07      	ldr	r3, [pc, #28]	; (8004e84 <pvTaskIncrementMutexHeldCount+0x24>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d004      	beq.n	8004e76 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004e6c:	4b05      	ldr	r3, [pc, #20]	; (8004e84 <pvTaskIncrementMutexHeldCount+0x24>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e72:	3201      	adds	r2, #1
 8004e74:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004e76:	4b03      	ldr	r3, [pc, #12]	; (8004e84 <pvTaskIncrementMutexHeldCount+0x24>)
 8004e78:	681b      	ldr	r3, [r3, #0]
	}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	20000280 	.word	0x20000280

08004e88 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e92:	4b29      	ldr	r3, [pc, #164]	; (8004f38 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e98:	4b28      	ldr	r3, [pc, #160]	; (8004f3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fe fad8 	bl	8003454 <uxListRemove>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10b      	bne.n	8004ec2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004eaa:	4b24      	ldr	r3, [pc, #144]	; (8004f3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb6:	43da      	mvns	r2, r3
 8004eb8:	4b21      	ldr	r3, [pc, #132]	; (8004f40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	4a20      	ldr	r2, [pc, #128]	; (8004f40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ec0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d10a      	bne.n	8004ee0 <prvAddCurrentTaskToDelayedList+0x58>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d007      	beq.n	8004ee0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ed0:	4b1a      	ldr	r3, [pc, #104]	; (8004f3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	481a      	ldr	r0, [pc, #104]	; (8004f44 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004eda:	f7fe fa5e 	bl	800339a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ede:	e026      	b.n	8004f2e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ee8:	4b14      	ldr	r3, [pc, #80]	; (8004f3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d209      	bcs.n	8004f0c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ef8:	4b13      	ldr	r3, [pc, #76]	; (8004f48 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	4b0f      	ldr	r3, [pc, #60]	; (8004f3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3304      	adds	r3, #4
 8004f02:	4619      	mov	r1, r3
 8004f04:	4610      	mov	r0, r2
 8004f06:	f7fe fa6c 	bl	80033e2 <vListInsert>
}
 8004f0a:	e010      	b.n	8004f2e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f0c:	4b0f      	ldr	r3, [pc, #60]	; (8004f4c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	4b0a      	ldr	r3, [pc, #40]	; (8004f3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3304      	adds	r3, #4
 8004f16:	4619      	mov	r1, r3
 8004f18:	4610      	mov	r0, r2
 8004f1a:	f7fe fa62 	bl	80033e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f1e:	4b0c      	ldr	r3, [pc, #48]	; (8004f50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d202      	bcs.n	8004f2e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004f28:	4a09      	ldr	r2, [pc, #36]	; (8004f50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	6013      	str	r3, [r2, #0]
}
 8004f2e:	bf00      	nop
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	20000384 	.word	0x20000384
 8004f3c:	20000280 	.word	0x20000280
 8004f40:	20000388 	.word	0x20000388
 8004f44:	2000036c 	.word	0x2000036c
 8004f48:	2000033c 	.word	0x2000033c
 8004f4c:	20000338 	.word	0x20000338
 8004f50:	200003a0 	.word	0x200003a0

08004f54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	3b04      	subs	r3, #4
 8004f64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	3b04      	subs	r3, #4
 8004f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f023 0201 	bic.w	r2, r3, #1
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	3b04      	subs	r3, #4
 8004f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f84:	4a0c      	ldr	r2, [pc, #48]	; (8004fb8 <pxPortInitialiseStack+0x64>)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3b14      	subs	r3, #20
 8004f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	3b04      	subs	r3, #4
 8004f9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f06f 0202 	mvn.w	r2, #2
 8004fa2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	3b20      	subs	r3, #32
 8004fa8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004faa:	68fb      	ldr	r3, [r7, #12]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	08004fbd 	.word	0x08004fbd

08004fbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004fc6:	4b11      	ldr	r3, [pc, #68]	; (800500c <prvTaskExitError+0x50>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fce:	d009      	beq.n	8004fe4 <prvTaskExitError+0x28>
 8004fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	60fb      	str	r3, [r7, #12]
 8004fe2:	e7fe      	b.n	8004fe2 <prvTaskExitError+0x26>
 8004fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ff6:	bf00      	nop
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0fc      	beq.n	8004ff8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ffe:	bf00      	nop
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	2000000c 	.word	0x2000000c

08005010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005010:	4b07      	ldr	r3, [pc, #28]	; (8005030 <pxCurrentTCBConst2>)
 8005012:	6819      	ldr	r1, [r3, #0]
 8005014:	6808      	ldr	r0, [r1, #0]
 8005016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501a:	f380 8809 	msr	PSP, r0
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f04f 0000 	mov.w	r0, #0
 8005026:	f380 8811 	msr	BASEPRI, r0
 800502a:	4770      	bx	lr
 800502c:	f3af 8000 	nop.w

08005030 <pxCurrentTCBConst2>:
 8005030:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005034:	bf00      	nop
 8005036:	bf00      	nop

08005038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005038:	4808      	ldr	r0, [pc, #32]	; (800505c <prvPortStartFirstTask+0x24>)
 800503a:	6800      	ldr	r0, [r0, #0]
 800503c:	6800      	ldr	r0, [r0, #0]
 800503e:	f380 8808 	msr	MSP, r0
 8005042:	f04f 0000 	mov.w	r0, #0
 8005046:	f380 8814 	msr	CONTROL, r0
 800504a:	b662      	cpsie	i
 800504c:	b661      	cpsie	f
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	df00      	svc	0
 8005058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800505a:	bf00      	nop
 800505c:	e000ed08 	.word	0xe000ed08

08005060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005066:	4b44      	ldr	r3, [pc, #272]	; (8005178 <xPortStartScheduler+0x118>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a44      	ldr	r2, [pc, #272]	; (800517c <xPortStartScheduler+0x11c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d109      	bne.n	8005084 <xPortStartScheduler+0x24>
 8005070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005074:	f383 8811 	msr	BASEPRI, r3
 8005078:	f3bf 8f6f 	isb	sy
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	613b      	str	r3, [r7, #16]
 8005082:	e7fe      	b.n	8005082 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005084:	4b3c      	ldr	r3, [pc, #240]	; (8005178 <xPortStartScheduler+0x118>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a3d      	ldr	r2, [pc, #244]	; (8005180 <xPortStartScheduler+0x120>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d109      	bne.n	80050a2 <xPortStartScheduler+0x42>
 800508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	e7fe      	b.n	80050a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050a2:	4b38      	ldr	r3, [pc, #224]	; (8005184 <xPortStartScheduler+0x124>)
 80050a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	22ff      	movs	r2, #255	; 0xff
 80050b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	4b30      	ldr	r3, [pc, #192]	; (8005188 <xPortStartScheduler+0x128>)
 80050c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050ca:	4b30      	ldr	r3, [pc, #192]	; (800518c <xPortStartScheduler+0x12c>)
 80050cc:	2207      	movs	r2, #7
 80050ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050d0:	e009      	b.n	80050e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80050d2:	4b2e      	ldr	r3, [pc, #184]	; (800518c <xPortStartScheduler+0x12c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	4a2c      	ldr	r2, [pc, #176]	; (800518c <xPortStartScheduler+0x12c>)
 80050da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050dc:	78fb      	ldrb	r3, [r7, #3]
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050e6:	78fb      	ldrb	r3, [r7, #3]
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ee:	2b80      	cmp	r3, #128	; 0x80
 80050f0:	d0ef      	beq.n	80050d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050f2:	4b26      	ldr	r3, [pc, #152]	; (800518c <xPortStartScheduler+0x12c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f1c3 0307 	rsb	r3, r3, #7
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	d009      	beq.n	8005112 <xPortStartScheduler+0xb2>
 80050fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	60bb      	str	r3, [r7, #8]
 8005110:	e7fe      	b.n	8005110 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005112:	4b1e      	ldr	r3, [pc, #120]	; (800518c <xPortStartScheduler+0x12c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	021b      	lsls	r3, r3, #8
 8005118:	4a1c      	ldr	r2, [pc, #112]	; (800518c <xPortStartScheduler+0x12c>)
 800511a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800511c:	4b1b      	ldr	r3, [pc, #108]	; (800518c <xPortStartScheduler+0x12c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005124:	4a19      	ldr	r2, [pc, #100]	; (800518c <xPortStartScheduler+0x12c>)
 8005126:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	b2da      	uxtb	r2, r3
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005130:	4b17      	ldr	r3, [pc, #92]	; (8005190 <xPortStartScheduler+0x130>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a16      	ldr	r2, [pc, #88]	; (8005190 <xPortStartScheduler+0x130>)
 8005136:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800513a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800513c:	4b14      	ldr	r3, [pc, #80]	; (8005190 <xPortStartScheduler+0x130>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a13      	ldr	r2, [pc, #76]	; (8005190 <xPortStartScheduler+0x130>)
 8005142:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005146:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005148:	f000 f8d6 	bl	80052f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800514c:	4b11      	ldr	r3, [pc, #68]	; (8005194 <xPortStartScheduler+0x134>)
 800514e:	2200      	movs	r2, #0
 8005150:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005152:	f000 f8f5 	bl	8005340 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005156:	4b10      	ldr	r3, [pc, #64]	; (8005198 <xPortStartScheduler+0x138>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a0f      	ldr	r2, [pc, #60]	; (8005198 <xPortStartScheduler+0x138>)
 800515c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005160:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005162:	f7ff ff69 	bl	8005038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005166:	f7ff fa8d 	bl	8004684 <vTaskSwitchContext>
	prvTaskExitError();
 800516a:	f7ff ff27 	bl	8004fbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	e000ed00 	.word	0xe000ed00
 800517c:	410fc271 	.word	0x410fc271
 8005180:	410fc270 	.word	0x410fc270
 8005184:	e000e400 	.word	0xe000e400
 8005188:	200003ac 	.word	0x200003ac
 800518c:	200003b0 	.word	0x200003b0
 8005190:	e000ed20 	.word	0xe000ed20
 8005194:	2000000c 	.word	0x2000000c
 8005198:	e000ef34 	.word	0xe000ef34

0800519c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80051b4:	4b0e      	ldr	r3, [pc, #56]	; (80051f0 <vPortEnterCritical+0x54>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3301      	adds	r3, #1
 80051ba:	4a0d      	ldr	r2, [pc, #52]	; (80051f0 <vPortEnterCritical+0x54>)
 80051bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051be:	4b0c      	ldr	r3, [pc, #48]	; (80051f0 <vPortEnterCritical+0x54>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d10e      	bne.n	80051e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051c6:	4b0b      	ldr	r3, [pc, #44]	; (80051f4 <vPortEnterCritical+0x58>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d009      	beq.n	80051e4 <vPortEnterCritical+0x48>
 80051d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	603b      	str	r3, [r7, #0]
 80051e2:	e7fe      	b.n	80051e2 <vPortEnterCritical+0x46>
	}
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	2000000c 	.word	0x2000000c
 80051f4:	e000ed04 	.word	0xe000ed04

080051f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051fe:	4b11      	ldr	r3, [pc, #68]	; (8005244 <vPortExitCritical+0x4c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d109      	bne.n	800521a <vPortExitCritical+0x22>
 8005206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	607b      	str	r3, [r7, #4]
 8005218:	e7fe      	b.n	8005218 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800521a:	4b0a      	ldr	r3, [pc, #40]	; (8005244 <vPortExitCritical+0x4c>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	3b01      	subs	r3, #1
 8005220:	4a08      	ldr	r2, [pc, #32]	; (8005244 <vPortExitCritical+0x4c>)
 8005222:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005224:	4b07      	ldr	r3, [pc, #28]	; (8005244 <vPortExitCritical+0x4c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d104      	bne.n	8005236 <vPortExitCritical+0x3e>
 800522c:	2300      	movs	r3, #0
 800522e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	2000000c 	.word	0x2000000c
	...

08005250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005250:	f3ef 8009 	mrs	r0, PSP
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	4b15      	ldr	r3, [pc, #84]	; (80052b0 <pxCurrentTCBConst>)
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	f01e 0f10 	tst.w	lr, #16
 8005260:	bf08      	it	eq
 8005262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800526a:	6010      	str	r0, [r2, #0]
 800526c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005270:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005274:	f380 8811 	msr	BASEPRI, r0
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f7ff fa00 	bl	8004684 <vTaskSwitchContext>
 8005284:	f04f 0000 	mov.w	r0, #0
 8005288:	f380 8811 	msr	BASEPRI, r0
 800528c:	bc09      	pop	{r0, r3}
 800528e:	6819      	ldr	r1, [r3, #0]
 8005290:	6808      	ldr	r0, [r1, #0]
 8005292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005296:	f01e 0f10 	tst.w	lr, #16
 800529a:	bf08      	it	eq
 800529c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80052a0:	f380 8809 	msr	PSP, r0
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	f3af 8000 	nop.w

080052b0 <pxCurrentTCBConst>:
 80052b0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80052b4:	bf00      	nop
 80052b6:	bf00      	nop

080052b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80052d0:	f7ff f920 	bl	8004514 <xTaskIncrementTick>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052da:	4b06      	ldr	r3, [pc, #24]	; (80052f4 <SysTick_Handler+0x3c>)
 80052dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	2300      	movs	r3, #0
 80052e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80052ec:	bf00      	nop
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	e000ed04 	.word	0xe000ed04

080052f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052fc:	4b0b      	ldr	r3, [pc, #44]	; (800532c <vPortSetupTimerInterrupt+0x34>)
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005302:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <vPortSetupTimerInterrupt+0x38>)
 8005304:	2200      	movs	r2, #0
 8005306:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005308:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <vPortSetupTimerInterrupt+0x3c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a0a      	ldr	r2, [pc, #40]	; (8005338 <vPortSetupTimerInterrupt+0x40>)
 800530e:	fba2 2303 	umull	r2, r3, r2, r3
 8005312:	099b      	lsrs	r3, r3, #6
 8005314:	4a09      	ldr	r2, [pc, #36]	; (800533c <vPortSetupTimerInterrupt+0x44>)
 8005316:	3b01      	subs	r3, #1
 8005318:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800531a:	4b04      	ldr	r3, [pc, #16]	; (800532c <vPortSetupTimerInterrupt+0x34>)
 800531c:	2207      	movs	r2, #7
 800531e:	601a      	str	r2, [r3, #0]
}
 8005320:	bf00      	nop
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	e000e010 	.word	0xe000e010
 8005330:	e000e018 	.word	0xe000e018
 8005334:	20000000 	.word	0x20000000
 8005338:	10624dd3 	.word	0x10624dd3
 800533c:	e000e014 	.word	0xe000e014

08005340 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005340:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005350 <vPortEnableVFP+0x10>
 8005344:	6801      	ldr	r1, [r0, #0]
 8005346:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800534a:	6001      	str	r1, [r0, #0]
 800534c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800534e:	bf00      	nop
 8005350:	e000ed88 	.word	0xe000ed88

08005354 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800535a:	f3ef 8305 	mrs	r3, IPSR
 800535e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b0f      	cmp	r3, #15
 8005364:	d913      	bls.n	800538e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005366:	4a16      	ldr	r2, [pc, #88]	; (80053c0 <vPortValidateInterruptPriority+0x6c>)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4413      	add	r3, r2
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005370:	4b14      	ldr	r3, [pc, #80]	; (80053c4 <vPortValidateInterruptPriority+0x70>)
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	7afa      	ldrb	r2, [r7, #11]
 8005376:	429a      	cmp	r2, r3
 8005378:	d209      	bcs.n	800538e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800537a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	607b      	str	r3, [r7, #4]
 800538c:	e7fe      	b.n	800538c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800538e:	4b0e      	ldr	r3, [pc, #56]	; (80053c8 <vPortValidateInterruptPriority+0x74>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005396:	4b0d      	ldr	r3, [pc, #52]	; (80053cc <vPortValidateInterruptPriority+0x78>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d909      	bls.n	80053b2 <vPortValidateInterruptPriority+0x5e>
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	603b      	str	r3, [r7, #0]
 80053b0:	e7fe      	b.n	80053b0 <vPortValidateInterruptPriority+0x5c>
	}
 80053b2:	bf00      	nop
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	e000e3f0 	.word	0xe000e3f0
 80053c4:	200003ac 	.word	0x200003ac
 80053c8:	e000ed0c 	.word	0xe000ed0c
 80053cc:	200003b0 	.word	0x200003b0

080053d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b08a      	sub	sp, #40	; 0x28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80053d8:	2300      	movs	r3, #0
 80053da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80053dc:	f7fe fff0 	bl	80043c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80053e0:	4b57      	ldr	r3, [pc, #348]	; (8005540 <pvPortMalloc+0x170>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80053e8:	f000 f90c 	bl	8005604 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80053ec:	4b55      	ldr	r3, [pc, #340]	; (8005544 <pvPortMalloc+0x174>)
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4013      	ands	r3, r2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f040 808c 	bne.w	8005512 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d01c      	beq.n	800543a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005400:	2208      	movs	r2, #8
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4413      	add	r3, r2
 8005406:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	2b00      	cmp	r3, #0
 8005410:	d013      	beq.n	800543a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f023 0307 	bic.w	r3, r3, #7
 8005418:	3308      	adds	r3, #8
 800541a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f003 0307 	and.w	r3, r3, #7
 8005422:	2b00      	cmp	r3, #0
 8005424:	d009      	beq.n	800543a <pvPortMalloc+0x6a>
 8005426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542a:	f383 8811 	msr	BASEPRI, r3
 800542e:	f3bf 8f6f 	isb	sy
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	e7fe      	b.n	8005438 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d068      	beq.n	8005512 <pvPortMalloc+0x142>
 8005440:	4b41      	ldr	r3, [pc, #260]	; (8005548 <pvPortMalloc+0x178>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	429a      	cmp	r2, r3
 8005448:	d863      	bhi.n	8005512 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800544a:	4b40      	ldr	r3, [pc, #256]	; (800554c <pvPortMalloc+0x17c>)
 800544c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800544e:	4b3f      	ldr	r3, [pc, #252]	; (800554c <pvPortMalloc+0x17c>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005454:	e004      	b.n	8005460 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	429a      	cmp	r2, r3
 8005468:	d903      	bls.n	8005472 <pvPortMalloc+0xa2>
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1f1      	bne.n	8005456 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005472:	4b33      	ldr	r3, [pc, #204]	; (8005540 <pvPortMalloc+0x170>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005478:	429a      	cmp	r2, r3
 800547a:	d04a      	beq.n	8005512 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2208      	movs	r2, #8
 8005482:	4413      	add	r3, r2
 8005484:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	1ad2      	subs	r2, r2, r3
 8005496:	2308      	movs	r3, #8
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	429a      	cmp	r2, r3
 800549c:	d91e      	bls.n	80054dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800549e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4413      	add	r3, r2
 80054a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d009      	beq.n	80054c4 <pvPortMalloc+0xf4>
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	613b      	str	r3, [r7, #16]
 80054c2:	e7fe      	b.n	80054c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	1ad2      	subs	r2, r2, r3
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80054d6:	69b8      	ldr	r0, [r7, #24]
 80054d8:	f000 f8f6 	bl	80056c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054dc:	4b1a      	ldr	r3, [pc, #104]	; (8005548 <pvPortMalloc+0x178>)
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	4a18      	ldr	r2, [pc, #96]	; (8005548 <pvPortMalloc+0x178>)
 80054e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054ea:	4b17      	ldr	r3, [pc, #92]	; (8005548 <pvPortMalloc+0x178>)
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	4b18      	ldr	r3, [pc, #96]	; (8005550 <pvPortMalloc+0x180>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d203      	bcs.n	80054fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054f6:	4b14      	ldr	r3, [pc, #80]	; (8005548 <pvPortMalloc+0x178>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a15      	ldr	r2, [pc, #84]	; (8005550 <pvPortMalloc+0x180>)
 80054fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	4b10      	ldr	r3, [pc, #64]	; (8005544 <pvPortMalloc+0x174>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	431a      	orrs	r2, r3
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	2200      	movs	r2, #0
 8005510:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005512:	f7fe ff63 	bl	80043dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	2b00      	cmp	r3, #0
 800551e:	d009      	beq.n	8005534 <pvPortMalloc+0x164>
 8005520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	60fb      	str	r3, [r7, #12]
 8005532:	e7fe      	b.n	8005532 <pvPortMalloc+0x162>
	return pvReturn;
 8005534:	69fb      	ldr	r3, [r7, #28]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3728      	adds	r7, #40	; 0x28
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	20003fbc 	.word	0x20003fbc
 8005544:	20003fc8 	.word	0x20003fc8
 8005548:	20003fc0 	.word	0x20003fc0
 800554c:	20003fb4 	.word	0x20003fb4
 8005550:	20003fc4 	.word	0x20003fc4

08005554 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d046      	beq.n	80055f4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005566:	2308      	movs	r3, #8
 8005568:	425b      	negs	r3, r3
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	4413      	add	r3, r2
 800556e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	4b20      	ldr	r3, [pc, #128]	; (80055fc <vPortFree+0xa8>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4013      	ands	r3, r2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d109      	bne.n	8005596 <vPortFree+0x42>
 8005582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	e7fe      	b.n	8005594 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d009      	beq.n	80055b2 <vPortFree+0x5e>
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	60bb      	str	r3, [r7, #8]
 80055b0:	e7fe      	b.n	80055b0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	4b11      	ldr	r3, [pc, #68]	; (80055fc <vPortFree+0xa8>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4013      	ands	r3, r2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d019      	beq.n	80055f4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d115      	bne.n	80055f4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	4b0b      	ldr	r3, [pc, #44]	; (80055fc <vPortFree+0xa8>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	43db      	mvns	r3, r3
 80055d2:	401a      	ands	r2, r3
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80055d8:	f7fe fef2 	bl	80043c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	4b07      	ldr	r3, [pc, #28]	; (8005600 <vPortFree+0xac>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4413      	add	r3, r2
 80055e6:	4a06      	ldr	r2, [pc, #24]	; (8005600 <vPortFree+0xac>)
 80055e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055ea:	6938      	ldr	r0, [r7, #16]
 80055ec:	f000 f86c 	bl	80056c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80055f0:	f7fe fef4 	bl	80043dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80055f4:	bf00      	nop
 80055f6:	3718      	adds	r7, #24
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	20003fc8 	.word	0x20003fc8
 8005600:	20003fc0 	.word	0x20003fc0

08005604 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800560a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800560e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005610:	4b27      	ldr	r3, [pc, #156]	; (80056b0 <prvHeapInit+0xac>)
 8005612:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00c      	beq.n	8005638 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	3307      	adds	r3, #7
 8005622:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f023 0307 	bic.w	r3, r3, #7
 800562a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	4a1f      	ldr	r2, [pc, #124]	; (80056b0 <prvHeapInit+0xac>)
 8005634:	4413      	add	r3, r2
 8005636:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800563c:	4a1d      	ldr	r2, [pc, #116]	; (80056b4 <prvHeapInit+0xb0>)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005642:	4b1c      	ldr	r3, [pc, #112]	; (80056b4 <prvHeapInit+0xb0>)
 8005644:	2200      	movs	r2, #0
 8005646:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	4413      	add	r3, r2
 800564e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005650:	2208      	movs	r2, #8
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	1a9b      	subs	r3, r3, r2
 8005656:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0307 	bic.w	r3, r3, #7
 800565e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4a15      	ldr	r2, [pc, #84]	; (80056b8 <prvHeapInit+0xb4>)
 8005664:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005666:	4b14      	ldr	r3, [pc, #80]	; (80056b8 <prvHeapInit+0xb4>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2200      	movs	r2, #0
 800566c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800566e:	4b12      	ldr	r3, [pc, #72]	; (80056b8 <prvHeapInit+0xb4>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2200      	movs	r2, #0
 8005674:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	1ad2      	subs	r2, r2, r3
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005684:	4b0c      	ldr	r3, [pc, #48]	; (80056b8 <prvHeapInit+0xb4>)
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	4a0a      	ldr	r2, [pc, #40]	; (80056bc <prvHeapInit+0xb8>)
 8005692:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	4a09      	ldr	r2, [pc, #36]	; (80056c0 <prvHeapInit+0xbc>)
 800569a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800569c:	4b09      	ldr	r3, [pc, #36]	; (80056c4 <prvHeapInit+0xc0>)
 800569e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80056a2:	601a      	str	r2, [r3, #0]
}
 80056a4:	bf00      	nop
 80056a6:	3714      	adds	r7, #20
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	200003b4 	.word	0x200003b4
 80056b4:	20003fb4 	.word	0x20003fb4
 80056b8:	20003fbc 	.word	0x20003fbc
 80056bc:	20003fc4 	.word	0x20003fc4
 80056c0:	20003fc0 	.word	0x20003fc0
 80056c4:	20003fc8 	.word	0x20003fc8

080056c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80056d0:	4b28      	ldr	r3, [pc, #160]	; (8005774 <prvInsertBlockIntoFreeList+0xac>)
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	e002      	b.n	80056dc <prvInsertBlockIntoFreeList+0x14>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d8f7      	bhi.n	80056d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	4413      	add	r3, r2
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d108      	bne.n	800570a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	441a      	add	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	441a      	add	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	429a      	cmp	r2, r3
 800571c:	d118      	bne.n	8005750 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	4b15      	ldr	r3, [pc, #84]	; (8005778 <prvInsertBlockIntoFreeList+0xb0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	429a      	cmp	r2, r3
 8005728:	d00d      	beq.n	8005746 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	441a      	add	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	e008      	b.n	8005758 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005746:	4b0c      	ldr	r3, [pc, #48]	; (8005778 <prvInsertBlockIntoFreeList+0xb0>)
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	e003      	b.n	8005758 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	429a      	cmp	r2, r3
 800575e:	d002      	beq.n	8005766 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005766:	bf00      	nop
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	20003fb4 	.word	0x20003fb4
 8005778:	20003fbc 	.word	0x20003fbc

0800577c <__libc_init_array>:
 800577c:	b570      	push	{r4, r5, r6, lr}
 800577e:	4e0d      	ldr	r6, [pc, #52]	; (80057b4 <__libc_init_array+0x38>)
 8005780:	4c0d      	ldr	r4, [pc, #52]	; (80057b8 <__libc_init_array+0x3c>)
 8005782:	1ba4      	subs	r4, r4, r6
 8005784:	10a4      	asrs	r4, r4, #2
 8005786:	2500      	movs	r5, #0
 8005788:	42a5      	cmp	r5, r4
 800578a:	d109      	bne.n	80057a0 <__libc_init_array+0x24>
 800578c:	4e0b      	ldr	r6, [pc, #44]	; (80057bc <__libc_init_array+0x40>)
 800578e:	4c0c      	ldr	r4, [pc, #48]	; (80057c0 <__libc_init_array+0x44>)
 8005790:	f000 f82c 	bl	80057ec <_init>
 8005794:	1ba4      	subs	r4, r4, r6
 8005796:	10a4      	asrs	r4, r4, #2
 8005798:	2500      	movs	r5, #0
 800579a:	42a5      	cmp	r5, r4
 800579c:	d105      	bne.n	80057aa <__libc_init_array+0x2e>
 800579e:	bd70      	pop	{r4, r5, r6, pc}
 80057a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057a4:	4798      	blx	r3
 80057a6:	3501      	adds	r5, #1
 80057a8:	e7ee      	b.n	8005788 <__libc_init_array+0xc>
 80057aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057ae:	4798      	blx	r3
 80057b0:	3501      	adds	r5, #1
 80057b2:	e7f2      	b.n	800579a <__libc_init_array+0x1e>
 80057b4:	08005888 	.word	0x08005888
 80057b8:	08005888 	.word	0x08005888
 80057bc:	08005888 	.word	0x08005888
 80057c0:	0800588c 	.word	0x0800588c

080057c4 <memcpy>:
 80057c4:	b510      	push	{r4, lr}
 80057c6:	1e43      	subs	r3, r0, #1
 80057c8:	440a      	add	r2, r1
 80057ca:	4291      	cmp	r1, r2
 80057cc:	d100      	bne.n	80057d0 <memcpy+0xc>
 80057ce:	bd10      	pop	{r4, pc}
 80057d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057d8:	e7f7      	b.n	80057ca <memcpy+0x6>

080057da <memset>:
 80057da:	4402      	add	r2, r0
 80057dc:	4603      	mov	r3, r0
 80057de:	4293      	cmp	r3, r2
 80057e0:	d100      	bne.n	80057e4 <memset+0xa>
 80057e2:	4770      	bx	lr
 80057e4:	f803 1b01 	strb.w	r1, [r3], #1
 80057e8:	e7f9      	b.n	80057de <memset+0x4>
	...

080057ec <_init>:
 80057ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ee:	bf00      	nop
 80057f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057f2:	bc08      	pop	{r3}
 80057f4:	469e      	mov	lr, r3
 80057f6:	4770      	bx	lr

080057f8 <_fini>:
 80057f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057fa:	bf00      	nop
 80057fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057fe:	bc08      	pop	{r3}
 8005800:	469e      	mov	lr, r3
 8005802:	4770      	bx	lr
