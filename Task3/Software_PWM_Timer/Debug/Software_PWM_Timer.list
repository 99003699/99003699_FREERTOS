
Software_PWM_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005328  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080054b8  080054b8  000154b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005510  08005510  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005510  08005510  00015510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005518  08005518  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005518  08005518  00015518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800551c  0800551c  0001551c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045f4  20000010  08005530  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004604  08005530  00024604  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001460a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d35  00000000  00000000  0003464a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  00037380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f00  00000000  00000000  000383b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021ba2  00000000  00000000  000392b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001112b  00000000  00000000  0005ae5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d087d  00000000  00000000  0006bf85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013c802  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004304  00000000  00000000  0013c858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054a0 	.word	0x080054a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080054a0 	.word	0x080054a0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <vApplicationGetIdleTaskMemory+0x30>)
 80004de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	2000002c 	.word	0x2000002c
 80004f8:	20000080 	.word	0x20000080

080004fc <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	4a07      	ldr	r2, [pc, #28]	; (8000528 <vApplicationGetTimerTaskMemory+0x2c>)
 800050c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	4a06      	ldr	r2, [pc, #24]	; (800052c <vApplicationGetTimerTaskMemory+0x30>)
 8000512:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800051a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800051c:	bf00      	nop
 800051e:	3714      	adds	r7, #20
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	20000280 	.word	0x20000280
 800052c:	200002d4 	.word	0x200002d4

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b5b0      	push	{r4, r5, r7, lr}
 8000532:	b08a      	sub	sp, #40	; 0x28
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f000 fb1b 	bl	8000b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f82f 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053e:	f000 f90d 	bl	800075c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000542:	f000 f895 	bl	8000670 <MX_TIM3_Init>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of PeriodicTimer */
  osTimerDef(PeriodicTimer, PTCallback);
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <main+0x5c>)
 8000548:	623b      	str	r3, [r7, #32]
 800054a:	2300      	movs	r3, #0
 800054c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriodicTimerHandle = osTimerCreate(osTimer(PeriodicTimer), osTimerPeriodic, NULL);
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2200      	movs	r2, #0
 8000554:	2101      	movs	r1, #1
 8000556:	4618      	mov	r0, r3
 8000558:	f002 fa3a 	bl	80029d0 <osTimerCreate>
 800055c:	4603      	mov	r3, r0
 800055e:	4a0c      	ldr	r2, [pc, #48]	; (8000590 <main+0x60>)
 8000560:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of PWMTask */
  osThreadDef(PWMTask, StartPWMTask, osPriorityNormal, 0, 128);
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <main+0x64>)
 8000564:	1d3c      	adds	r4, r7, #4
 8000566:	461d      	mov	r5, r3
 8000568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000570:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PWMTaskHandle = osThreadCreate(osThread(PWMTask), NULL);
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2100      	movs	r1, #0
 8000578:	4618      	mov	r0, r3
 800057a:	f002 f9c8 	bl	800290e <osThreadCreate>
 800057e:	4603      	mov	r3, r0
 8000580:	4a05      	ldr	r2, [pc, #20]	; (8000598 <main+0x68>)
 8000582:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000584:	f002 f9bc 	bl	8002900 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000588:	e7fe      	b.n	8000588 <main+0x58>
 800058a:	bf00      	nop
 800058c:	080008a5 	.word	0x080008a5
 8000590:	20004570 	.word	0x20004570
 8000594:	080054c0 	.word	0x080054c0
 8000598:	20004574 	.word	0x20004574

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b094      	sub	sp, #80	; 0x50
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	2230      	movs	r2, #48	; 0x30
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f004 ff70 	bl	8005490 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c0:	2300      	movs	r3, #0
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	4b28      	ldr	r3, [pc, #160]	; (8000668 <SystemClock_Config+0xcc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	4a27      	ldr	r2, [pc, #156]	; (8000668 <SystemClock_Config+0xcc>)
 80005ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ce:	6413      	str	r3, [r2, #64]	; 0x40
 80005d0:	4b25      	ldr	r3, [pc, #148]	; (8000668 <SystemClock_Config+0xcc>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	4b22      	ldr	r3, [pc, #136]	; (800066c <SystemClock_Config+0xd0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a21      	ldr	r2, [pc, #132]	; (800066c <SystemClock_Config+0xd0>)
 80005e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b1f      	ldr	r3, [pc, #124]	; (800066c <SystemClock_Config+0xd0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f8:	2302      	movs	r3, #2
 80005fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000600:	2310      	movs	r3, #16
 8000602:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000604:	2302      	movs	r3, #2
 8000606:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000608:	2300      	movs	r3, #0
 800060a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800060c:	2308      	movs	r3, #8
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000610:	23a8      	movs	r3, #168	; 0xa8
 8000612:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000618:	2304      	movs	r3, #4
 800061a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 0320 	add.w	r3, r7, #32
 8000620:	4618      	mov	r0, r3
 8000622:	f000 fd97 	bl	8001154 <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800062c:	f000 f95c 	bl	80008e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	230f      	movs	r3, #15
 8000632:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000634:	2302      	movs	r3, #2
 8000636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800063c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000640:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000646:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2105      	movs	r1, #5
 800064e:	4618      	mov	r0, r3
 8000650:	f000 fff8 	bl	8001644 <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800065a:	f000 f945 	bl	80008e8 <Error_Handler>
  }
}
 800065e:	bf00      	nop
 8000660:	3750      	adds	r7, #80	; 0x50
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08e      	sub	sp, #56	; 0x38
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000676:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000684:	f107 0320 	add.w	r3, r7, #32
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
 800069c:	615a      	str	r2, [r3, #20]
 800069e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006a0:	4b2c      	ldr	r3, [pc, #176]	; (8000754 <MX_TIM3_Init+0xe4>)
 80006a2:	4a2d      	ldr	r2, [pc, #180]	; (8000758 <MX_TIM3_Init+0xe8>)
 80006a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168-1;
 80006a6:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <MX_TIM3_Init+0xe4>)
 80006a8:	22a7      	movs	r2, #167	; 0xa7
 80006aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ac:	4b29      	ldr	r3, [pc, #164]	; (8000754 <MX_TIM3_Init+0xe4>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80006b2:	4b28      	ldr	r3, [pc, #160]	; (8000754 <MX_TIM3_Init+0xe4>)
 80006b4:	2263      	movs	r2, #99	; 0x63
 80006b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b8:	4b26      	ldr	r3, [pc, #152]	; (8000754 <MX_TIM3_Init+0xe4>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006be:	4b25      	ldr	r3, [pc, #148]	; (8000754 <MX_TIM3_Init+0xe4>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006c4:	4823      	ldr	r0, [pc, #140]	; (8000754 <MX_TIM3_Init+0xe4>)
 80006c6:	f001 f9ab 	bl	8001a20 <HAL_TIM_Base_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80006d0:	f000 f90a 	bl	80008e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006de:	4619      	mov	r1, r3
 80006e0:	481c      	ldr	r0, [pc, #112]	; (8000754 <MX_TIM3_Init+0xe4>)
 80006e2:	f001 fc7d 	bl	8001fe0 <HAL_TIM_ConfigClockSource>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80006ec:	f000 f8fc 	bl	80008e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006f0:	4818      	ldr	r0, [pc, #96]	; (8000754 <MX_TIM3_Init+0xe4>)
 80006f2:	f001 fa55 	bl	8001ba0 <HAL_TIM_PWM_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80006fc:	f000 f8f4 	bl	80008e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000700:	2300      	movs	r3, #0
 8000702:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000704:	2300      	movs	r3, #0
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	4619      	mov	r1, r3
 800070e:	4811      	ldr	r0, [pc, #68]	; (8000754 <MX_TIM3_Init+0xe4>)
 8000710:	f002 f83c 	bl	800278c <HAL_TIMEx_MasterConfigSynchronization>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800071a:	f000 f8e5 	bl	80008e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800071e:	2360      	movs	r3, #96	; 0x60
 8000720:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2200      	movs	r2, #0
 8000732:	4619      	mov	r1, r3
 8000734:	4807      	ldr	r0, [pc, #28]	; (8000754 <MX_TIM3_Init+0xe4>)
 8000736:	f001 fb95 	bl	8001e64 <HAL_TIM_PWM_ConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000740:	f000 f8d2 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000744:	4803      	ldr	r0, [pc, #12]	; (8000754 <MX_TIM3_Init+0xe4>)
 8000746:	f000 f923 	bl	8000990 <HAL_TIM_MspPostInit>

}
 800074a:	bf00      	nop
 800074c:	3738      	adds	r7, #56	; 0x38
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20004528 	.word	0x20004528
 8000758:	40000400 	.word	0x40000400

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <MX_GPIO_Init+0xb4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a25      	ldr	r2, [pc, #148]	; (8000810 <MX_GPIO_Init+0xb4>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b23      	ldr	r3, [pc, #140]	; (8000810 <MX_GPIO_Init+0xb4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <MX_GPIO_Init+0xb4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a1e      	ldr	r2, [pc, #120]	; (8000810 <MX_GPIO_Init+0xb4>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <MX_GPIO_Init+0xb4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_GPIO_Init+0xb4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a17      	ldr	r2, [pc, #92]	; (8000810 <MX_GPIO_Init+0xb4>)
 80007b4:	f043 0308 	orr.w	r3, r3, #8
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_GPIO_Init+0xb4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0308 	and.w	r3, r3, #8
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007cc:	4811      	ldr	r0, [pc, #68]	; (8000814 <MX_GPIO_Init+0xb8>)
 80007ce:	f000 fca7 	bl	8001120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007d2:	2301      	movs	r3, #1
 80007d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	4619      	mov	r1, r3
 80007e4:	480c      	ldr	r0, [pc, #48]	; (8000818 <MX_GPIO_Init+0xbc>)
 80007e6:	f000 fae7 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	4619      	mov	r1, r3
 8000802:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_GPIO_Init+0xb8>)
 8000804:	f000 fad8 	bl	8000db8 <HAL_GPIO_Init>

}
 8000808:	bf00      	nop
 800080a:	3720      	adds	r7, #32
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40023800 	.word	0x40023800
 8000814:	40020c00 	.word	0x40020c00
 8000818:	40020000 	.word	0x40020000

0800081c <StartPWMTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartPWMTask */
void StartPWMTask(void const * argument)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osTimerStart(PeriodicTimerHandle, 1000);
 8000824:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <StartPWMTask+0x74>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800082c:	4618      	mov	r0, r3
 800082e:	f002 f903 	bl	8002a38 <osTimerStart>
	htim3.Instance->CCR1=50;
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <StartPWMTask+0x78>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2232      	movs	r2, #50	; 0x32
 8000838:	635a      	str	r2, [r3, #52]	; 0x34
  /* Infinite loop */
  for(;;)
  {
	  if(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)))
 800083a:	2101      	movs	r1, #1
 800083c:	4816      	ldr	r0, [pc, #88]	; (8000898 <StartPWMTask+0x7c>)
 800083e:	f000 fc57 	bl	80010f0 <HAL_GPIO_ReadPin>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d11f      	bne.n	8000888 <StartPWMTask+0x6c>
	  {
		  while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)))
 8000848:	e017      	b.n	800087a <StartPWMTask+0x5e>
		  {
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 800084a:	2201      	movs	r2, #1
 800084c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000850:	4812      	ldr	r0, [pc, #72]	; (800089c <StartPWMTask+0x80>)
 8000852:	f000 fc65 	bl	8001120 <HAL_GPIO_WritePin>
			  htim3.Instance->CCR1=increment;
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <StartPWMTask+0x84>)
 8000858:	881a      	ldrh	r2, [r3, #0]
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <StartPWMTask+0x78>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	635a      	str	r2, [r3, #52]	; 0x34
			  increment+=10;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <StartPWMTask+0x84>)
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	330a      	adds	r3, #10
 8000866:	b29a      	uxth	r2, r3
 8000868:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <StartPWMTask+0x84>)
 800086a:	801a      	strh	r2, [r3, #0]
			  if(increment>100)
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <StartPWMTask+0x84>)
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	2b64      	cmp	r3, #100	; 0x64
 8000872:	d902      	bls.n	800087a <StartPWMTask+0x5e>
				  increment =0;
 8000874:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <StartPWMTask+0x84>)
 8000876:	2200      	movs	r2, #0
 8000878:	801a      	strh	r2, [r3, #0]
		  while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)))
 800087a:	2101      	movs	r1, #1
 800087c:	4806      	ldr	r0, [pc, #24]	; (8000898 <StartPWMTask+0x7c>)
 800087e:	f000 fc37 	bl	80010f0 <HAL_GPIO_ReadPin>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d0e0      	beq.n	800084a <StartPWMTask+0x2e>
		  }
	  }
    osDelay(1);
 8000888:	2001      	movs	r0, #1
 800088a:	f002 f88c 	bl	80029a6 <osDelay>
	  if(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)))
 800088e:	e7d4      	b.n	800083a <StartPWMTask+0x1e>
 8000890:	20004570 	.word	0x20004570
 8000894:	20004528 	.word	0x20004528
 8000898:	40020000 	.word	0x40020000
 800089c:	40020c00 	.word	0x40020c00
 80008a0:	20004524 	.word	0x20004524

080008a4 <PTCallback>:
  /* USER CODE END 5 */
}

/* PTCallback function */
void PTCallback(void const * argument)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PTCallback */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b2:	4803      	ldr	r0, [pc, #12]	; (80008c0 <PTCallback+0x1c>)
 80008b4:	f000 fc34 	bl	8001120 <HAL_GPIO_WritePin>
  /* USER CODE END PTCallback */
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40020c00 	.word	0x40020c00

080008c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a04      	ldr	r2, [pc, #16]	; (80008e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d101      	bne.n	80008da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008d6:	f000 f96d 	bl	8000bb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40001000 	.word	0x40001000

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <Error_Handler+0x8>
	...

080008f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <HAL_MspInit+0x54>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	4a11      	ldr	r2, [pc, #68]	; (8000948 <HAL_MspInit+0x54>)
 8000904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000908:	6453      	str	r3, [r2, #68]	; 0x44
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <HAL_MspInit+0x54>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <HAL_MspInit+0x54>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <HAL_MspInit+0x54>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	6413      	str	r3, [r2, #64]	; 0x40
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <HAL_MspInit+0x54>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	210f      	movs	r1, #15
 8000936:	f06f 0001 	mvn.w	r0, #1
 800093a:	f000 fa13 	bl	8000d64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <HAL_TIM_Base_MspInit+0x3c>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d10d      	bne.n	800097a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	4b0a      	ldr	r3, [pc, #40]	; (800098c <HAL_TIM_Base_MspInit+0x40>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	4a09      	ldr	r2, [pc, #36]	; (800098c <HAL_TIM_Base_MspInit+0x40>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	6413      	str	r3, [r2, #64]	; 0x40
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <HAL_TIM_Base_MspInit+0x40>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	40000400 	.word	0x40000400
 800098c:	40023800 	.word	0x40023800

08000990 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <HAL_TIM_MspPostInit+0x68>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d11d      	bne.n	80009ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <HAL_TIM_MspPostInit+0x6c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a10      	ldr	r2, [pc, #64]	; (80009fc <HAL_TIM_MspPostInit+0x6c>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <HAL_TIM_MspPostInit+0x6c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009ce:	2340      	movs	r3, #64	; 0x40
 80009d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009de:	2302      	movs	r3, #2
 80009e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	; (8000a00 <HAL_TIM_MspPostInit+0x70>)
 80009ea:	f000 f9e5 	bl	8000db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80009ee:	bf00      	nop
 80009f0:	3720      	adds	r7, #32
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40000400 	.word	0x40000400
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020000 	.word	0x40020000

08000a04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08c      	sub	sp, #48	; 0x30
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000a14:	2200      	movs	r2, #0
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	2036      	movs	r0, #54	; 0x36
 8000a1a:	f000 f9a3 	bl	8000d64 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a1e:	2036      	movs	r0, #54	; 0x36
 8000a20:	f000 f9bc 	bl	8000d9c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <HAL_InitTick+0xa4>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	4a1e      	ldr	r2, [pc, #120]	; (8000aa8 <HAL_InitTick+0xa4>)
 8000a2e:	f043 0310 	orr.w	r3, r3, #16
 8000a32:	6413      	str	r3, [r2, #64]	; 0x40
 8000a34:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <HAL_InitTick+0xa4>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	f003 0310 	and.w	r3, r3, #16
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a40:	f107 0210 	add.w	r2, r7, #16
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4611      	mov	r1, r2
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 ffb6 	bl	80019bc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a50:	f000 ffa0 	bl	8001994 <HAL_RCC_GetPCLK1Freq>
 8000a54:	4603      	mov	r3, r0
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a5c:	4a13      	ldr	r2, [pc, #76]	; (8000aac <HAL_InitTick+0xa8>)
 8000a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a62:	0c9b      	lsrs	r3, r3, #18
 8000a64:	3b01      	subs	r3, #1
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <HAL_InitTick+0xac>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <HAL_InitTick+0xb0>)
 8000a6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <HAL_InitTick+0xac>)
 8000a70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a74:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a76:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <HAL_InitTick+0xac>)
 8000a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a7a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <HAL_InitTick+0xac>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <HAL_InitTick+0xac>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a88:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <HAL_InitTick+0xac>)
 8000a8a:	f000 ffc9 	bl	8001a20 <HAL_TIM_Base_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d104      	bne.n	8000a9e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a94:	4806      	ldr	r0, [pc, #24]	; (8000ab0 <HAL_InitTick+0xac>)
 8000a96:	f001 f813 	bl	8001ac0 <HAL_TIM_Base_Start_IT>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	e000      	b.n	8000aa0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3730      	adds	r7, #48	; 0x30
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	431bde83 	.word	0x431bde83
 8000ab0:	20004578 	.word	0x20004578
 8000ab4:	40001000 	.word	0x40001000

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <NMI_Handler+0x4>

08000abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <MemManage_Handler+0x4>

08000aca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ae8:	4802      	ldr	r0, [pc, #8]	; (8000af4 <TIM6_DAC_IRQHandler+0x10>)
 8000aea:	f001 f8b2 	bl	8001c52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20004578 	.word	0x20004578

08000af8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <SystemInit+0x20>)
 8000afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b02:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <SystemInit+0x20>)
 8000b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b20:	480d      	ldr	r0, [pc, #52]	; (8000b58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b22:	490e      	ldr	r1, [pc, #56]	; (8000b5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b24:	4a0e      	ldr	r2, [pc, #56]	; (8000b60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b28:	e002      	b.n	8000b30 <LoopCopyDataInit>

08000b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2e:	3304      	adds	r3, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b34:	d3f9      	bcc.n	8000b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b36:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b38:	4c0b      	ldr	r4, [pc, #44]	; (8000b68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b3c:	e001      	b.n	8000b42 <LoopFillZerobss>

08000b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b40:	3204      	adds	r2, #4

08000b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b44:	d3fb      	bcc.n	8000b3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b46:	f7ff ffd7 	bl	8000af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b4a:	f004 fc6f 	bl	800542c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b4e:	f7ff fcef 	bl	8000530 <main>
  bx  lr    
 8000b52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b5c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b60:	08005520 	.word	0x08005520
  ldr r2, =_sbss
 8000b64:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b68:	20004604 	.word	0x20004604

08000b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC_IRQHandler>
	...

08000b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <HAL_Init+0x40>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a0d      	ldr	r2, [pc, #52]	; (8000bb0 <HAL_Init+0x40>)
 8000b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <HAL_Init+0x40>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <HAL_Init+0x40>)
 8000b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <HAL_Init+0x40>)
 8000b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 f8d8 	bl	8000d4e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f7ff ff30 	bl	8000a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba4:	f7ff fea6 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023c00 	.word	0x40023c00

08000bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_IncTick+0x24>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <HAL_IncTick+0x24>)
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	200045c0 	.word	0x200045c0

08000bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return uwTick;
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <HAL_GetTick+0x14>)
 8000be2:	681b      	ldr	r3, [r3, #0]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	200045c0 	.word	0x200045c0

08000bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c10:	4013      	ands	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c26:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	60d3      	str	r3, [r2, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <__NVIC_GetPriorityGrouping+0x18>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	f003 0307 	and.w	r3, r3, #7
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	db0b      	blt.n	8000c82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	f003 021f 	and.w	r2, r3, #31
 8000c70:	4907      	ldr	r1, [pc, #28]	; (8000c90 <__NVIC_EnableIRQ+0x38>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	095b      	lsrs	r3, r3, #5
 8000c78:	2001      	movs	r0, #1
 8000c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000e100 	.word	0xe000e100

08000c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	6039      	str	r1, [r7, #0]
 8000c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	db0a      	blt.n	8000cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	490c      	ldr	r1, [pc, #48]	; (8000ce0 <__NVIC_SetPriority+0x4c>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	0112      	lsls	r2, r2, #4
 8000cb4:	b2d2      	uxtb	r2, r2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cbc:	e00a      	b.n	8000cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4908      	ldr	r1, [pc, #32]	; (8000ce4 <__NVIC_SetPriority+0x50>)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	3b04      	subs	r3, #4
 8000ccc:	0112      	lsls	r2, r2, #4
 8000cce:	b2d2      	uxtb	r2, r2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	761a      	strb	r2, [r3, #24]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000e100 	.word	0xe000e100
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b089      	sub	sp, #36	; 0x24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f1c3 0307 	rsb	r3, r3, #7
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	bf28      	it	cs
 8000d06:	2304      	movcs	r3, #4
 8000d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	2b06      	cmp	r3, #6
 8000d10:	d902      	bls.n	8000d18 <NVIC_EncodePriority+0x30>
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3b03      	subs	r3, #3
 8000d16:	e000      	b.n	8000d1a <NVIC_EncodePriority+0x32>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43da      	mvns	r2, r3
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d30:	f04f 31ff 	mov.w	r1, #4294967295
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3a:	43d9      	mvns	r1, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	4313      	orrs	r3, r2
         );
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3724      	adds	r7, #36	; 0x24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff ff4c 	bl	8000bf4 <__NVIC_SetPriorityGrouping>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d76:	f7ff ff61 	bl	8000c3c <__NVIC_GetPriorityGrouping>
 8000d7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	68b9      	ldr	r1, [r7, #8]
 8000d80:	6978      	ldr	r0, [r7, #20]
 8000d82:	f7ff ffb1 	bl	8000ce8 <NVIC_EncodePriority>
 8000d86:	4602      	mov	r2, r0
 8000d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff ff80 	bl	8000c94 <__NVIC_SetPriority>
}
 8000d94:	bf00      	nop
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff54 	bl	8000c58 <__NVIC_EnableIRQ>
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b089      	sub	sp, #36	; 0x24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
 8000dd2:	e16b      	b.n	80010ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	f040 815a 	bne.w	80010a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 0303 	and.w	r3, r3, #3
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d005      	beq.n	8000e0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d130      	bne.n	8000e6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	2203      	movs	r2, #3
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	68da      	ldr	r2, [r3, #12]
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e40:	2201      	movs	r2, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	091b      	lsrs	r3, r3, #4
 8000e56:	f003 0201 	and.w	r2, r3, #1
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	d017      	beq.n	8000ea8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	2203      	movs	r2, #3
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d123      	bne.n	8000efc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	08da      	lsrs	r2, r3, #3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3208      	adds	r2, #8
 8000ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	f003 0307 	and.w	r3, r3, #7
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	220f      	movs	r2, #15
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	691a      	ldr	r2, [r3, #16]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	08da      	lsrs	r2, r3, #3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3208      	adds	r2, #8
 8000ef6:	69b9      	ldr	r1, [r7, #24]
 8000ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0203 	and.w	r2, r3, #3
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f000 80b4 	beq.w	80010a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b60      	ldr	r3, [pc, #384]	; (80010c4 <HAL_GPIO_Init+0x30c>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	4a5f      	ldr	r2, [pc, #380]	; (80010c4 <HAL_GPIO_Init+0x30c>)
 8000f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4e:	4b5d      	ldr	r3, [pc, #372]	; (80010c4 <HAL_GPIO_Init+0x30c>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f5a:	4a5b      	ldr	r2, [pc, #364]	; (80010c8 <HAL_GPIO_Init+0x310>)
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	3302      	adds	r3, #2
 8000f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	220f      	movs	r2, #15
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a52      	ldr	r2, [pc, #328]	; (80010cc <HAL_GPIO_Init+0x314>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d02b      	beq.n	8000fde <HAL_GPIO_Init+0x226>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a51      	ldr	r2, [pc, #324]	; (80010d0 <HAL_GPIO_Init+0x318>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d025      	beq.n	8000fda <HAL_GPIO_Init+0x222>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a50      	ldr	r2, [pc, #320]	; (80010d4 <HAL_GPIO_Init+0x31c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d01f      	beq.n	8000fd6 <HAL_GPIO_Init+0x21e>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a4f      	ldr	r2, [pc, #316]	; (80010d8 <HAL_GPIO_Init+0x320>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d019      	beq.n	8000fd2 <HAL_GPIO_Init+0x21a>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a4e      	ldr	r2, [pc, #312]	; (80010dc <HAL_GPIO_Init+0x324>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d013      	beq.n	8000fce <HAL_GPIO_Init+0x216>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4d      	ldr	r2, [pc, #308]	; (80010e0 <HAL_GPIO_Init+0x328>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d00d      	beq.n	8000fca <HAL_GPIO_Init+0x212>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a4c      	ldr	r2, [pc, #304]	; (80010e4 <HAL_GPIO_Init+0x32c>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d007      	beq.n	8000fc6 <HAL_GPIO_Init+0x20e>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a4b      	ldr	r2, [pc, #300]	; (80010e8 <HAL_GPIO_Init+0x330>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d101      	bne.n	8000fc2 <HAL_GPIO_Init+0x20a>
 8000fbe:	2307      	movs	r3, #7
 8000fc0:	e00e      	b.n	8000fe0 <HAL_GPIO_Init+0x228>
 8000fc2:	2308      	movs	r3, #8
 8000fc4:	e00c      	b.n	8000fe0 <HAL_GPIO_Init+0x228>
 8000fc6:	2306      	movs	r3, #6
 8000fc8:	e00a      	b.n	8000fe0 <HAL_GPIO_Init+0x228>
 8000fca:	2305      	movs	r3, #5
 8000fcc:	e008      	b.n	8000fe0 <HAL_GPIO_Init+0x228>
 8000fce:	2304      	movs	r3, #4
 8000fd0:	e006      	b.n	8000fe0 <HAL_GPIO_Init+0x228>
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e004      	b.n	8000fe0 <HAL_GPIO_Init+0x228>
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	e002      	b.n	8000fe0 <HAL_GPIO_Init+0x228>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <HAL_GPIO_Init+0x228>
 8000fde:	2300      	movs	r3, #0
 8000fe0:	69fa      	ldr	r2, [r7, #28]
 8000fe2:	f002 0203 	and.w	r2, r2, #3
 8000fe6:	0092      	lsls	r2, r2, #2
 8000fe8:	4093      	lsls	r3, r2
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ff0:	4935      	ldr	r1, [pc, #212]	; (80010c8 <HAL_GPIO_Init+0x310>)
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	089b      	lsrs	r3, r3, #2
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ffe:	4b3b      	ldr	r3, [pc, #236]	; (80010ec <HAL_GPIO_Init+0x334>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001022:	4a32      	ldr	r2, [pc, #200]	; (80010ec <HAL_GPIO_Init+0x334>)
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001028:	4b30      	ldr	r3, [pc, #192]	; (80010ec <HAL_GPIO_Init+0x334>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800104c:	4a27      	ldr	r2, [pc, #156]	; (80010ec <HAL_GPIO_Init+0x334>)
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001052:	4b26      	ldr	r3, [pc, #152]	; (80010ec <HAL_GPIO_Init+0x334>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001076:	4a1d      	ldr	r2, [pc, #116]	; (80010ec <HAL_GPIO_Init+0x334>)
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <HAL_GPIO_Init+0x334>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010a0:	4a12      	ldr	r2, [pc, #72]	; (80010ec <HAL_GPIO_Init+0x334>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3301      	adds	r3, #1
 80010aa:	61fb      	str	r3, [r7, #28]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	2b0f      	cmp	r3, #15
 80010b0:	f67f ae90 	bls.w	8000dd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3724      	adds	r7, #36	; 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40013800 	.word	0x40013800
 80010cc:	40020000 	.word	0x40020000
 80010d0:	40020400 	.word	0x40020400
 80010d4:	40020800 	.word	0x40020800
 80010d8:	40020c00 	.word	0x40020c00
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40021400 	.word	0x40021400
 80010e4:	40021800 	.word	0x40021800
 80010e8:	40021c00 	.word	0x40021c00
 80010ec:	40013c00 	.word	0x40013c00

080010f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	691a      	ldr	r2, [r3, #16]
 8001100:	887b      	ldrh	r3, [r7, #2]
 8001102:	4013      	ands	r3, r2
 8001104:	2b00      	cmp	r3, #0
 8001106:	d002      	beq.n	800110e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001108:	2301      	movs	r3, #1
 800110a:	73fb      	strb	r3, [r7, #15]
 800110c:	e001      	b.n	8001112 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001112:	7bfb      	ldrb	r3, [r7, #15]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	807b      	strh	r3, [r7, #2]
 800112c:	4613      	mov	r3, r2
 800112e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001130:	787b      	ldrb	r3, [r7, #1]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001136:	887a      	ldrh	r2, [r7, #2]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800113c:	e003      	b.n	8001146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800113e:	887b      	ldrh	r3, [r7, #2]
 8001140:	041a      	lsls	r2, r3, #16
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	619a      	str	r2, [r3, #24]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e264      	b.n	8001630 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	2b00      	cmp	r3, #0
 8001170:	d075      	beq.n	800125e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001172:	4ba3      	ldr	r3, [pc, #652]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f003 030c 	and.w	r3, r3, #12
 800117a:	2b04      	cmp	r3, #4
 800117c:	d00c      	beq.n	8001198 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800117e:	4ba0      	ldr	r3, [pc, #640]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001186:	2b08      	cmp	r3, #8
 8001188:	d112      	bne.n	80011b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800118a:	4b9d      	ldr	r3, [pc, #628]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001192:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001196:	d10b      	bne.n	80011b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001198:	4b99      	ldr	r3, [pc, #612]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d05b      	beq.n	800125c <HAL_RCC_OscConfig+0x108>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d157      	bne.n	800125c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e23f      	b.n	8001630 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b8:	d106      	bne.n	80011c8 <HAL_RCC_OscConfig+0x74>
 80011ba:	4b91      	ldr	r3, [pc, #580]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a90      	ldr	r2, [pc, #576]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 80011c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	e01d      	b.n	8001204 <HAL_RCC_OscConfig+0xb0>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011d0:	d10c      	bne.n	80011ec <HAL_RCC_OscConfig+0x98>
 80011d2:	4b8b      	ldr	r3, [pc, #556]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a8a      	ldr	r2, [pc, #552]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 80011d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	4b88      	ldr	r3, [pc, #544]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a87      	ldr	r2, [pc, #540]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	e00b      	b.n	8001204 <HAL_RCC_OscConfig+0xb0>
 80011ec:	4b84      	ldr	r3, [pc, #528]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a83      	ldr	r2, [pc, #524]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 80011f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	4b81      	ldr	r3, [pc, #516]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a80      	ldr	r2, [pc, #512]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 80011fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001202:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d013      	beq.n	8001234 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120c:	f7ff fce6 	bl	8000bdc <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001214:	f7ff fce2 	bl	8000bdc <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b64      	cmp	r3, #100	; 0x64
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e204      	b.n	8001630 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001226:	4b76      	ldr	r3, [pc, #472]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0f0      	beq.n	8001214 <HAL_RCC_OscConfig+0xc0>
 8001232:	e014      	b.n	800125e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001234:	f7ff fcd2 	bl	8000bdc <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800123c:	f7ff fcce 	bl	8000bdc <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b64      	cmp	r3, #100	; 0x64
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e1f0      	b.n	8001630 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800124e:	4b6c      	ldr	r3, [pc, #432]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1f0      	bne.n	800123c <HAL_RCC_OscConfig+0xe8>
 800125a:	e000      	b.n	800125e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d063      	beq.n	8001332 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800126a:	4b65      	ldr	r3, [pc, #404]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 030c 	and.w	r3, r3, #12
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00b      	beq.n	800128e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001276:	4b62      	ldr	r3, [pc, #392]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800127e:	2b08      	cmp	r3, #8
 8001280:	d11c      	bne.n	80012bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001282:	4b5f      	ldr	r3, [pc, #380]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d116      	bne.n	80012bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128e:	4b5c      	ldr	r3, [pc, #368]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d005      	beq.n	80012a6 <HAL_RCC_OscConfig+0x152>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d001      	beq.n	80012a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e1c4      	b.n	8001630 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a6:	4b56      	ldr	r3, [pc, #344]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	4952      	ldr	r1, [pc, #328]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ba:	e03a      	b.n	8001332 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d020      	beq.n	8001306 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c4:	4b4f      	ldr	r3, [pc, #316]	; (8001404 <HAL_RCC_OscConfig+0x2b0>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ca:	f7ff fc87 	bl	8000bdc <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d2:	f7ff fc83 	bl	8000bdc <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e1a5      	b.n	8001630 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e4:	4b46      	ldr	r3, [pc, #280]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0f0      	beq.n	80012d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f0:	4b43      	ldr	r3, [pc, #268]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	4940      	ldr	r1, [pc, #256]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 8001300:	4313      	orrs	r3, r2
 8001302:	600b      	str	r3, [r1, #0]
 8001304:	e015      	b.n	8001332 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001306:	4b3f      	ldr	r3, [pc, #252]	; (8001404 <HAL_RCC_OscConfig+0x2b0>)
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130c:	f7ff fc66 	bl	8000bdc <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001314:	f7ff fc62 	bl	8000bdc <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e184      	b.n	8001630 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001326:	4b36      	ldr	r3, [pc, #216]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f0      	bne.n	8001314 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	2b00      	cmp	r3, #0
 800133c:	d030      	beq.n	80013a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d016      	beq.n	8001374 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001346:	4b30      	ldr	r3, [pc, #192]	; (8001408 <HAL_RCC_OscConfig+0x2b4>)
 8001348:	2201      	movs	r2, #1
 800134a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800134c:	f7ff fc46 	bl	8000bdc <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001354:	f7ff fc42 	bl	8000bdc <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e164      	b.n	8001630 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001366:	4b26      	ldr	r3, [pc, #152]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f0      	beq.n	8001354 <HAL_RCC_OscConfig+0x200>
 8001372:	e015      	b.n	80013a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001374:	4b24      	ldr	r3, [pc, #144]	; (8001408 <HAL_RCC_OscConfig+0x2b4>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137a:	f7ff fc2f 	bl	8000bdc <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001382:	f7ff fc2b 	bl	8000bdc <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e14d      	b.n	8001630 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001394:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 8001396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1f0      	bne.n	8001382 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 80a0 	beq.w	80014ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ae:	2300      	movs	r3, #0
 80013b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013b2:	4b13      	ldr	r3, [pc, #76]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10f      	bne.n	80013de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	4a0e      	ldr	r2, [pc, #56]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013da:	2301      	movs	r3, #1
 80013dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <HAL_RCC_OscConfig+0x2b8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d121      	bne.n	800142e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <HAL_RCC_OscConfig+0x2b8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a07      	ldr	r2, [pc, #28]	; (800140c <HAL_RCC_OscConfig+0x2b8>)
 80013f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013f6:	f7ff fbf1 	bl	8000bdc <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013fc:	e011      	b.n	8001422 <HAL_RCC_OscConfig+0x2ce>
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800
 8001404:	42470000 	.word	0x42470000
 8001408:	42470e80 	.word	0x42470e80
 800140c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001410:	f7ff fbe4 	bl	8000bdc <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e106      	b.n	8001630 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001422:	4b85      	ldr	r3, [pc, #532]	; (8001638 <HAL_RCC_OscConfig+0x4e4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0f0      	beq.n	8001410 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d106      	bne.n	8001444 <HAL_RCC_OscConfig+0x2f0>
 8001436:	4b81      	ldr	r3, [pc, #516]	; (800163c <HAL_RCC_OscConfig+0x4e8>)
 8001438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143a:	4a80      	ldr	r2, [pc, #512]	; (800163c <HAL_RCC_OscConfig+0x4e8>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6713      	str	r3, [r2, #112]	; 0x70
 8001442:	e01c      	b.n	800147e <HAL_RCC_OscConfig+0x32a>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	2b05      	cmp	r3, #5
 800144a:	d10c      	bne.n	8001466 <HAL_RCC_OscConfig+0x312>
 800144c:	4b7b      	ldr	r3, [pc, #492]	; (800163c <HAL_RCC_OscConfig+0x4e8>)
 800144e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001450:	4a7a      	ldr	r2, [pc, #488]	; (800163c <HAL_RCC_OscConfig+0x4e8>)
 8001452:	f043 0304 	orr.w	r3, r3, #4
 8001456:	6713      	str	r3, [r2, #112]	; 0x70
 8001458:	4b78      	ldr	r3, [pc, #480]	; (800163c <HAL_RCC_OscConfig+0x4e8>)
 800145a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800145c:	4a77      	ldr	r2, [pc, #476]	; (800163c <HAL_RCC_OscConfig+0x4e8>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6713      	str	r3, [r2, #112]	; 0x70
 8001464:	e00b      	b.n	800147e <HAL_RCC_OscConfig+0x32a>
 8001466:	4b75      	ldr	r3, [pc, #468]	; (800163c <HAL_RCC_OscConfig+0x4e8>)
 8001468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146a:	4a74      	ldr	r2, [pc, #464]	; (800163c <HAL_RCC_OscConfig+0x4e8>)
 800146c:	f023 0301 	bic.w	r3, r3, #1
 8001470:	6713      	str	r3, [r2, #112]	; 0x70
 8001472:	4b72      	ldr	r3, [pc, #456]	; (800163c <HAL_RCC_OscConfig+0x4e8>)
 8001474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001476:	4a71      	ldr	r2, [pc, #452]	; (800163c <HAL_RCC_OscConfig+0x4e8>)
 8001478:	f023 0304 	bic.w	r3, r3, #4
 800147c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d015      	beq.n	80014b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001486:	f7ff fba9 	bl	8000bdc <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800148c:	e00a      	b.n	80014a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800148e:	f7ff fba5 	bl	8000bdc <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	f241 3288 	movw	r2, #5000	; 0x1388
 800149c:	4293      	cmp	r3, r2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e0c5      	b.n	8001630 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a4:	4b65      	ldr	r3, [pc, #404]	; (800163c <HAL_RCC_OscConfig+0x4e8>)
 80014a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0ee      	beq.n	800148e <HAL_RCC_OscConfig+0x33a>
 80014b0:	e014      	b.n	80014dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b2:	f7ff fb93 	bl	8000bdc <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014b8:	e00a      	b.n	80014d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ba:	f7ff fb8f 	bl	8000bdc <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e0af      	b.n	8001630 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d0:	4b5a      	ldr	r3, [pc, #360]	; (800163c <HAL_RCC_OscConfig+0x4e8>)
 80014d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1ee      	bne.n	80014ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014dc:	7dfb      	ldrb	r3, [r7, #23]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d105      	bne.n	80014ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014e2:	4b56      	ldr	r3, [pc, #344]	; (800163c <HAL_RCC_OscConfig+0x4e8>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	4a55      	ldr	r2, [pc, #340]	; (800163c <HAL_RCC_OscConfig+0x4e8>)
 80014e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 809b 	beq.w	800162e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014f8:	4b50      	ldr	r3, [pc, #320]	; (800163c <HAL_RCC_OscConfig+0x4e8>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 030c 	and.w	r3, r3, #12
 8001500:	2b08      	cmp	r3, #8
 8001502:	d05c      	beq.n	80015be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	2b02      	cmp	r3, #2
 800150a:	d141      	bne.n	8001590 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150c:	4b4c      	ldr	r3, [pc, #304]	; (8001640 <HAL_RCC_OscConfig+0x4ec>)
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001512:	f7ff fb63 	bl	8000bdc <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800151a:	f7ff fb5f 	bl	8000bdc <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e081      	b.n	8001630 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152c:	4b43      	ldr	r3, [pc, #268]	; (800163c <HAL_RCC_OscConfig+0x4e8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f0      	bne.n	800151a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	69da      	ldr	r2, [r3, #28]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001546:	019b      	lsls	r3, r3, #6
 8001548:	431a      	orrs	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154e:	085b      	lsrs	r3, r3, #1
 8001550:	3b01      	subs	r3, #1
 8001552:	041b      	lsls	r3, r3, #16
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155a:	061b      	lsls	r3, r3, #24
 800155c:	4937      	ldr	r1, [pc, #220]	; (800163c <HAL_RCC_OscConfig+0x4e8>)
 800155e:	4313      	orrs	r3, r2
 8001560:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001562:	4b37      	ldr	r3, [pc, #220]	; (8001640 <HAL_RCC_OscConfig+0x4ec>)
 8001564:	2201      	movs	r2, #1
 8001566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7ff fb38 	bl	8000bdc <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001570:	f7ff fb34 	bl	8000bdc <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e056      	b.n	8001630 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001582:	4b2e      	ldr	r3, [pc, #184]	; (800163c <HAL_RCC_OscConfig+0x4e8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f0      	beq.n	8001570 <HAL_RCC_OscConfig+0x41c>
 800158e:	e04e      	b.n	800162e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001590:	4b2b      	ldr	r3, [pc, #172]	; (8001640 <HAL_RCC_OscConfig+0x4ec>)
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001596:	f7ff fb21 	bl	8000bdc <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800159e:	f7ff fb1d 	bl	8000bdc <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e03f      	b.n	8001630 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b0:	4b22      	ldr	r3, [pc, #136]	; (800163c <HAL_RCC_OscConfig+0x4e8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f0      	bne.n	800159e <HAL_RCC_OscConfig+0x44a>
 80015bc:	e037      	b.n	800162e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d101      	bne.n	80015ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e032      	b.n	8001630 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015ca:	4b1c      	ldr	r3, [pc, #112]	; (800163c <HAL_RCC_OscConfig+0x4e8>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d028      	beq.n	800162a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d121      	bne.n	800162a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d11a      	bne.n	800162a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015fa:	4013      	ands	r3, r2
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001600:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001602:	4293      	cmp	r3, r2
 8001604:	d111      	bne.n	800162a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001610:	085b      	lsrs	r3, r3, #1
 8001612:	3b01      	subs	r3, #1
 8001614:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001616:	429a      	cmp	r2, r3
 8001618:	d107      	bne.n	800162a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001624:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001626:	429a      	cmp	r2, r3
 8001628:	d001      	beq.n	800162e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40007000 	.word	0x40007000
 800163c:	40023800 	.word	0x40023800
 8001640:	42470060 	.word	0x42470060

08001644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e0cc      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001658:	4b68      	ldr	r3, [pc, #416]	; (80017fc <HAL_RCC_ClockConfig+0x1b8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0307 	and.w	r3, r3, #7
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d90c      	bls.n	8001680 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001666:	4b65      	ldr	r3, [pc, #404]	; (80017fc <HAL_RCC_ClockConfig+0x1b8>)
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800166e:	4b63      	ldr	r3, [pc, #396]	; (80017fc <HAL_RCC_ClockConfig+0x1b8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	429a      	cmp	r2, r3
 800167a:	d001      	beq.n	8001680 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e0b8      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d020      	beq.n	80016ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	d005      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001698:	4b59      	ldr	r3, [pc, #356]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	4a58      	ldr	r2, [pc, #352]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d005      	beq.n	80016bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016b0:	4b53      	ldr	r3, [pc, #332]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	4a52      	ldr	r2, [pc, #328]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016bc:	4b50      	ldr	r3, [pc, #320]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	494d      	ldr	r1, [pc, #308]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d044      	beq.n	8001764 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d107      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e2:	4b47      	ldr	r3, [pc, #284]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d119      	bne.n	8001722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e07f      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d003      	beq.n	8001702 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d107      	bne.n	8001712 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001702:	4b3f      	ldr	r3, [pc, #252]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d109      	bne.n	8001722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e06f      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001712:	4b3b      	ldr	r3, [pc, #236]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e067      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001722:	4b37      	ldr	r3, [pc, #220]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f023 0203 	bic.w	r2, r3, #3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	4934      	ldr	r1, [pc, #208]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	4313      	orrs	r3, r2
 8001732:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001734:	f7ff fa52 	bl	8000bdc <HAL_GetTick>
 8001738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173a:	e00a      	b.n	8001752 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800173c:	f7ff fa4e 	bl	8000bdc <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	f241 3288 	movw	r2, #5000	; 0x1388
 800174a:	4293      	cmp	r3, r2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e04f      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001752:	4b2b      	ldr	r3, [pc, #172]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 020c 	and.w	r2, r3, #12
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	429a      	cmp	r2, r3
 8001762:	d1eb      	bne.n	800173c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001764:	4b25      	ldr	r3, [pc, #148]	; (80017fc <HAL_RCC_ClockConfig+0x1b8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d20c      	bcs.n	800178c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001772:	4b22      	ldr	r3, [pc, #136]	; (80017fc <HAL_RCC_ClockConfig+0x1b8>)
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800177a:	4b20      	ldr	r3, [pc, #128]	; (80017fc <HAL_RCC_ClockConfig+0x1b8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d001      	beq.n	800178c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e032      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d008      	beq.n	80017aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001798:	4b19      	ldr	r3, [pc, #100]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	4916      	ldr	r1, [pc, #88]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d009      	beq.n	80017ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	490e      	ldr	r1, [pc, #56]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017ca:	f000 f821 	bl	8001810 <HAL_RCC_GetSysClockFreq>
 80017ce:	4602      	mov	r2, r0
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	091b      	lsrs	r3, r3, #4
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	490a      	ldr	r1, [pc, #40]	; (8001804 <HAL_RCC_ClockConfig+0x1c0>)
 80017dc:	5ccb      	ldrb	r3, [r1, r3]
 80017de:	fa22 f303 	lsr.w	r3, r2, r3
 80017e2:	4a09      	ldr	r2, [pc, #36]	; (8001808 <HAL_RCC_ClockConfig+0x1c4>)
 80017e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <HAL_RCC_ClockConfig+0x1c8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff f90a 	bl	8000a04 <HAL_InitTick>

  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023c00 	.word	0x40023c00
 8001800:	40023800 	.word	0x40023800
 8001804:	080054f8 	.word	0x080054f8
 8001808:	20000000 	.word	0x20000000
 800180c:	20000004 	.word	0x20000004

08001810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001810:	b5b0      	push	{r4, r5, r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001816:	2100      	movs	r1, #0
 8001818:	6079      	str	r1, [r7, #4]
 800181a:	2100      	movs	r1, #0
 800181c:	60f9      	str	r1, [r7, #12]
 800181e:	2100      	movs	r1, #0
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001822:	2100      	movs	r1, #0
 8001824:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001826:	4952      	ldr	r1, [pc, #328]	; (8001970 <HAL_RCC_GetSysClockFreq+0x160>)
 8001828:	6889      	ldr	r1, [r1, #8]
 800182a:	f001 010c 	and.w	r1, r1, #12
 800182e:	2908      	cmp	r1, #8
 8001830:	d00d      	beq.n	800184e <HAL_RCC_GetSysClockFreq+0x3e>
 8001832:	2908      	cmp	r1, #8
 8001834:	f200 8094 	bhi.w	8001960 <HAL_RCC_GetSysClockFreq+0x150>
 8001838:	2900      	cmp	r1, #0
 800183a:	d002      	beq.n	8001842 <HAL_RCC_GetSysClockFreq+0x32>
 800183c:	2904      	cmp	r1, #4
 800183e:	d003      	beq.n	8001848 <HAL_RCC_GetSysClockFreq+0x38>
 8001840:	e08e      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001842:	4b4c      	ldr	r3, [pc, #304]	; (8001974 <HAL_RCC_GetSysClockFreq+0x164>)
 8001844:	60bb      	str	r3, [r7, #8]
       break;
 8001846:	e08e      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001848:	4b4b      	ldr	r3, [pc, #300]	; (8001978 <HAL_RCC_GetSysClockFreq+0x168>)
 800184a:	60bb      	str	r3, [r7, #8]
      break;
 800184c:	e08b      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800184e:	4948      	ldr	r1, [pc, #288]	; (8001970 <HAL_RCC_GetSysClockFreq+0x160>)
 8001850:	6849      	ldr	r1, [r1, #4]
 8001852:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001856:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001858:	4945      	ldr	r1, [pc, #276]	; (8001970 <HAL_RCC_GetSysClockFreq+0x160>)
 800185a:	6849      	ldr	r1, [r1, #4]
 800185c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001860:	2900      	cmp	r1, #0
 8001862:	d024      	beq.n	80018ae <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001864:	4942      	ldr	r1, [pc, #264]	; (8001970 <HAL_RCC_GetSysClockFreq+0x160>)
 8001866:	6849      	ldr	r1, [r1, #4]
 8001868:	0989      	lsrs	r1, r1, #6
 800186a:	4608      	mov	r0, r1
 800186c:	f04f 0100 	mov.w	r1, #0
 8001870:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001874:	f04f 0500 	mov.w	r5, #0
 8001878:	ea00 0204 	and.w	r2, r0, r4
 800187c:	ea01 0305 	and.w	r3, r1, r5
 8001880:	493d      	ldr	r1, [pc, #244]	; (8001978 <HAL_RCC_GetSysClockFreq+0x168>)
 8001882:	fb01 f003 	mul.w	r0, r1, r3
 8001886:	2100      	movs	r1, #0
 8001888:	fb01 f102 	mul.w	r1, r1, r2
 800188c:	1844      	adds	r4, r0, r1
 800188e:	493a      	ldr	r1, [pc, #232]	; (8001978 <HAL_RCC_GetSysClockFreq+0x168>)
 8001890:	fba2 0101 	umull	r0, r1, r2, r1
 8001894:	1863      	adds	r3, r4, r1
 8001896:	4619      	mov	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	461a      	mov	r2, r3
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	f7fe fc96 	bl	80001d0 <__aeabi_uldivmod>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4613      	mov	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	e04a      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ae:	4b30      	ldr	r3, [pc, #192]	; (8001970 <HAL_RCC_GetSysClockFreq+0x160>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	099b      	lsrs	r3, r3, #6
 80018b4:	461a      	mov	r2, r3
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018be:	f04f 0100 	mov.w	r1, #0
 80018c2:	ea02 0400 	and.w	r4, r2, r0
 80018c6:	ea03 0501 	and.w	r5, r3, r1
 80018ca:	4620      	mov	r0, r4
 80018cc:	4629      	mov	r1, r5
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	014b      	lsls	r3, r1, #5
 80018d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018dc:	0142      	lsls	r2, r0, #5
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	1b00      	subs	r0, r0, r4
 80018e4:	eb61 0105 	sbc.w	r1, r1, r5
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	018b      	lsls	r3, r1, #6
 80018f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80018f6:	0182      	lsls	r2, r0, #6
 80018f8:	1a12      	subs	r2, r2, r0
 80018fa:	eb63 0301 	sbc.w	r3, r3, r1
 80018fe:	f04f 0000 	mov.w	r0, #0
 8001902:	f04f 0100 	mov.w	r1, #0
 8001906:	00d9      	lsls	r1, r3, #3
 8001908:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800190c:	00d0      	lsls	r0, r2, #3
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	1912      	adds	r2, r2, r4
 8001914:	eb45 0303 	adc.w	r3, r5, r3
 8001918:	f04f 0000 	mov.w	r0, #0
 800191c:	f04f 0100 	mov.w	r1, #0
 8001920:	0299      	lsls	r1, r3, #10
 8001922:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001926:	0290      	lsls	r0, r2, #10
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4610      	mov	r0, r2
 800192e:	4619      	mov	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	461a      	mov	r2, r3
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	f7fe fc4a 	bl	80001d0 <__aeabi_uldivmod>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4613      	mov	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001944:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <HAL_RCC_GetSysClockFreq+0x160>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	0c1b      	lsrs	r3, r3, #16
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	3301      	adds	r3, #1
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	fbb2 f3f3 	udiv	r3, r2, r3
 800195c:	60bb      	str	r3, [r7, #8]
      break;
 800195e:	e002      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <HAL_RCC_GetSysClockFreq+0x164>)
 8001962:	60bb      	str	r3, [r7, #8]
      break;
 8001964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001966:	68bb      	ldr	r3, [r7, #8]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bdb0      	pop	{r4, r5, r7, pc}
 8001970:	40023800 	.word	0x40023800
 8001974:	00f42400 	.word	0x00f42400
 8001978:	017d7840 	.word	0x017d7840

0800197c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001980:	4b03      	ldr	r3, [pc, #12]	; (8001990 <HAL_RCC_GetHCLKFreq+0x14>)
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	20000000 	.word	0x20000000

08001994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001998:	f7ff fff0 	bl	800197c <HAL_RCC_GetHCLKFreq>
 800199c:	4602      	mov	r2, r0
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	0a9b      	lsrs	r3, r3, #10
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	4903      	ldr	r1, [pc, #12]	; (80019b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019aa:	5ccb      	ldrb	r3, [r1, r3]
 80019ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40023800 	.word	0x40023800
 80019b8:	08005508 	.word	0x08005508

080019bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	220f      	movs	r2, #15
 80019ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_RCC_GetClockConfig+0x5c>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 0203 	and.w	r2, r3, #3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019d8:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <HAL_RCC_GetClockConfig+0x5c>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <HAL_RCC_GetClockConfig+0x5c>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_RCC_GetClockConfig+0x5c>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	08db      	lsrs	r3, r3, #3
 80019f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <HAL_RCC_GetClockConfig+0x60>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0207 	and.w	r2, r3, #7
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	601a      	str	r2, [r3, #0]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40023c00 	.word	0x40023c00

08001a20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e041      	b.n	8001ab6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d106      	bne.n	8001a4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7fe ff80 	bl	800094c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4610      	mov	r0, r2
 8001a60:	f000 fbaa 	bl	80021b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d001      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e04e      	b.n	8001b76 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0201 	orr.w	r2, r2, #1
 8001aee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a23      	ldr	r2, [pc, #140]	; (8001b84 <HAL_TIM_Base_Start_IT+0xc4>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d022      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x80>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b02:	d01d      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x80>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a1f      	ldr	r2, [pc, #124]	; (8001b88 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d018      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x80>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a1e      	ldr	r2, [pc, #120]	; (8001b8c <HAL_TIM_Base_Start_IT+0xcc>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d013      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x80>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a1c      	ldr	r2, [pc, #112]	; (8001b90 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d00e      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x80>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a1b      	ldr	r2, [pc, #108]	; (8001b94 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d009      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x80>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a19      	ldr	r2, [pc, #100]	; (8001b98 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d004      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x80>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a18      	ldr	r2, [pc, #96]	; (8001b9c <HAL_TIM_Base_Start_IT+0xdc>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d111      	bne.n	8001b64 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2b06      	cmp	r3, #6
 8001b50:	d010      	beq.n	8001b74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f042 0201 	orr.w	r2, r2, #1
 8001b60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b62:	e007      	b.n	8001b74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40010000 	.word	0x40010000
 8001b88:	40000400 	.word	0x40000400
 8001b8c:	40000800 	.word	0x40000800
 8001b90:	40000c00 	.word	0x40000c00
 8001b94:	40010400 	.word	0x40010400
 8001b98:	40014000 	.word	0x40014000
 8001b9c:	40001800 	.word	0x40001800

08001ba0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e041      	b.n	8001c36 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d106      	bne.n	8001bcc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f839 	bl	8001c3e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3304      	adds	r3, #4
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4610      	mov	r0, r2
 8001be0:	f000 faea 	bl	80021b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d122      	bne.n	8001cae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d11b      	bne.n	8001cae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f06f 0202 	mvn.w	r2, #2
 8001c7e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fa71 	bl	800217c <HAL_TIM_IC_CaptureCallback>
 8001c9a:	e005      	b.n	8001ca8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 fa63 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 fa74 	bl	8002190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d122      	bne.n	8001d02 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d11b      	bne.n	8001d02 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f06f 0204 	mvn.w	r2, #4
 8001cd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 fa47 	bl	800217c <HAL_TIM_IC_CaptureCallback>
 8001cee:	e005      	b.n	8001cfc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 fa39 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 fa4a 	bl	8002190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d122      	bne.n	8001d56 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d11b      	bne.n	8001d56 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f06f 0208 	mvn.w	r2, #8
 8001d26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2204      	movs	r2, #4
 8001d2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 fa1d 	bl	800217c <HAL_TIM_IC_CaptureCallback>
 8001d42:	e005      	b.n	8001d50 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 fa0f 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 fa20 	bl	8002190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b10      	cmp	r3, #16
 8001d62:	d122      	bne.n	8001daa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	f003 0310 	and.w	r3, r3, #16
 8001d6e:	2b10      	cmp	r3, #16
 8001d70:	d11b      	bne.n	8001daa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f06f 0210 	mvn.w	r2, #16
 8001d7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2208      	movs	r2, #8
 8001d80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f9f3 	bl	800217c <HAL_TIM_IC_CaptureCallback>
 8001d96:	e005      	b.n	8001da4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f9e5 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f9f6 	bl	8002190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d10e      	bne.n	8001dd6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d107      	bne.n	8001dd6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f06f 0201 	mvn.w	r2, #1
 8001dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7fe fd77 	bl	80008c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de0:	2b80      	cmp	r3, #128	; 0x80
 8001de2:	d10e      	bne.n	8001e02 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dee:	2b80      	cmp	r3, #128	; 0x80
 8001df0:	d107      	bne.n	8001e02 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 fd4b 	bl	8002898 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0c:	2b40      	cmp	r3, #64	; 0x40
 8001e0e:	d10e      	bne.n	8001e2e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1a:	2b40      	cmp	r3, #64	; 0x40
 8001e1c:	d107      	bne.n	8001e2e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f9bb 	bl	80021a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	f003 0320 	and.w	r3, r3, #32
 8001e38:	2b20      	cmp	r3, #32
 8001e3a:	d10e      	bne.n	8001e5a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	f003 0320 	and.w	r3, r3, #32
 8001e46:	2b20      	cmp	r3, #32
 8001e48:	d107      	bne.n	8001e5a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f06f 0220 	mvn.w	r2, #32
 8001e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 fd15 	bl	8002884 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d101      	bne.n	8001e7e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e0ac      	b.n	8001fd8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b0c      	cmp	r3, #12
 8001e8a:	f200 809f 	bhi.w	8001fcc <HAL_TIM_PWM_ConfigChannel+0x168>
 8001e8e:	a201      	add	r2, pc, #4	; (adr r2, 8001e94 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e94:	08001ec9 	.word	0x08001ec9
 8001e98:	08001fcd 	.word	0x08001fcd
 8001e9c:	08001fcd 	.word	0x08001fcd
 8001ea0:	08001fcd 	.word	0x08001fcd
 8001ea4:	08001f09 	.word	0x08001f09
 8001ea8:	08001fcd 	.word	0x08001fcd
 8001eac:	08001fcd 	.word	0x08001fcd
 8001eb0:	08001fcd 	.word	0x08001fcd
 8001eb4:	08001f4b 	.word	0x08001f4b
 8001eb8:	08001fcd 	.word	0x08001fcd
 8001ebc:	08001fcd 	.word	0x08001fcd
 8001ec0:	08001fcd 	.word	0x08001fcd
 8001ec4:	08001f8b 	.word	0x08001f8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 fa12 	bl	80022f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699a      	ldr	r2, [r3, #24]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0208 	orr.w	r2, r2, #8
 8001ee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699a      	ldr	r2, [r3, #24]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0204 	bic.w	r2, r2, #4
 8001ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6999      	ldr	r1, [r3, #24]
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	691a      	ldr	r2, [r3, #16]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	619a      	str	r2, [r3, #24]
      break;
 8001f06:	e062      	b.n	8001fce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68b9      	ldr	r1, [r7, #8]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 fa62 	bl	80023d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	699a      	ldr	r2, [r3, #24]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	699a      	ldr	r2, [r3, #24]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6999      	ldr	r1, [r3, #24]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	021a      	lsls	r2, r3, #8
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	619a      	str	r2, [r3, #24]
      break;
 8001f48:	e041      	b.n	8001fce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68b9      	ldr	r1, [r7, #8]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 fab7 	bl	80024c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	69da      	ldr	r2, [r3, #28]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f042 0208 	orr.w	r2, r2, #8
 8001f64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	69da      	ldr	r2, [r3, #28]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0204 	bic.w	r2, r2, #4
 8001f74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	69d9      	ldr	r1, [r3, #28]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	691a      	ldr	r2, [r3, #16]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	61da      	str	r2, [r3, #28]
      break;
 8001f88:	e021      	b.n	8001fce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68b9      	ldr	r1, [r7, #8]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 fb0b 	bl	80025ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	69da      	ldr	r2, [r3, #28]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	69da      	ldr	r2, [r3, #28]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	69d9      	ldr	r1, [r3, #28]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	021a      	lsls	r2, r3, #8
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	61da      	str	r2, [r3, #28]
      break;
 8001fca:	e000      	b.n	8001fce <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001fcc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_TIM_ConfigClockSource+0x18>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e0b3      	b.n	8002160 <HAL_TIM_ConfigClockSource+0x180>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2202      	movs	r2, #2
 8002004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002016:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800201e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002030:	d03e      	beq.n	80020b0 <HAL_TIM_ConfigClockSource+0xd0>
 8002032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002036:	f200 8087 	bhi.w	8002148 <HAL_TIM_ConfigClockSource+0x168>
 800203a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800203e:	f000 8085 	beq.w	800214c <HAL_TIM_ConfigClockSource+0x16c>
 8002042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002046:	d87f      	bhi.n	8002148 <HAL_TIM_ConfigClockSource+0x168>
 8002048:	2b70      	cmp	r3, #112	; 0x70
 800204a:	d01a      	beq.n	8002082 <HAL_TIM_ConfigClockSource+0xa2>
 800204c:	2b70      	cmp	r3, #112	; 0x70
 800204e:	d87b      	bhi.n	8002148 <HAL_TIM_ConfigClockSource+0x168>
 8002050:	2b60      	cmp	r3, #96	; 0x60
 8002052:	d050      	beq.n	80020f6 <HAL_TIM_ConfigClockSource+0x116>
 8002054:	2b60      	cmp	r3, #96	; 0x60
 8002056:	d877      	bhi.n	8002148 <HAL_TIM_ConfigClockSource+0x168>
 8002058:	2b50      	cmp	r3, #80	; 0x50
 800205a:	d03c      	beq.n	80020d6 <HAL_TIM_ConfigClockSource+0xf6>
 800205c:	2b50      	cmp	r3, #80	; 0x50
 800205e:	d873      	bhi.n	8002148 <HAL_TIM_ConfigClockSource+0x168>
 8002060:	2b40      	cmp	r3, #64	; 0x40
 8002062:	d058      	beq.n	8002116 <HAL_TIM_ConfigClockSource+0x136>
 8002064:	2b40      	cmp	r3, #64	; 0x40
 8002066:	d86f      	bhi.n	8002148 <HAL_TIM_ConfigClockSource+0x168>
 8002068:	2b30      	cmp	r3, #48	; 0x30
 800206a:	d064      	beq.n	8002136 <HAL_TIM_ConfigClockSource+0x156>
 800206c:	2b30      	cmp	r3, #48	; 0x30
 800206e:	d86b      	bhi.n	8002148 <HAL_TIM_ConfigClockSource+0x168>
 8002070:	2b20      	cmp	r3, #32
 8002072:	d060      	beq.n	8002136 <HAL_TIM_ConfigClockSource+0x156>
 8002074:	2b20      	cmp	r3, #32
 8002076:	d867      	bhi.n	8002148 <HAL_TIM_ConfigClockSource+0x168>
 8002078:	2b00      	cmp	r3, #0
 800207a:	d05c      	beq.n	8002136 <HAL_TIM_ConfigClockSource+0x156>
 800207c:	2b10      	cmp	r3, #16
 800207e:	d05a      	beq.n	8002136 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002080:	e062      	b.n	8002148 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6818      	ldr	r0, [r3, #0]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	6899      	ldr	r1, [r3, #8]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	f000 fb5b 	bl	800274c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	609a      	str	r2, [r3, #8]
      break;
 80020ae:	e04e      	b.n	800214e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	6899      	ldr	r1, [r3, #8]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f000 fb44 	bl	800274c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020d2:	609a      	str	r2, [r3, #8]
      break;
 80020d4:	e03b      	b.n	800214e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6818      	ldr	r0, [r3, #0]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	6859      	ldr	r1, [r3, #4]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	461a      	mov	r2, r3
 80020e4:	f000 fab8 	bl	8002658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2150      	movs	r1, #80	; 0x50
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 fb11 	bl	8002716 <TIM_ITRx_SetConfig>
      break;
 80020f4:	e02b      	b.n	800214e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	6859      	ldr	r1, [r3, #4]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	461a      	mov	r2, r3
 8002104:	f000 fad7 	bl	80026b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2160      	movs	r1, #96	; 0x60
 800210e:	4618      	mov	r0, r3
 8002110:	f000 fb01 	bl	8002716 <TIM_ITRx_SetConfig>
      break;
 8002114:	e01b      	b.n	800214e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	6859      	ldr	r1, [r3, #4]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	461a      	mov	r2, r3
 8002124:	f000 fa98 	bl	8002658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2140      	movs	r1, #64	; 0x40
 800212e:	4618      	mov	r0, r3
 8002130:	f000 faf1 	bl	8002716 <TIM_ITRx_SetConfig>
      break;
 8002134:	e00b      	b.n	800214e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4619      	mov	r1, r3
 8002140:	4610      	mov	r0, r2
 8002142:	f000 fae8 	bl	8002716 <TIM_ITRx_SetConfig>
        break;
 8002146:	e002      	b.n	800214e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002148:	bf00      	nop
 800214a:	e000      	b.n	800214e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800214c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a40      	ldr	r2, [pc, #256]	; (80022cc <TIM_Base_SetConfig+0x114>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d013      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d6:	d00f      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a3d      	ldr	r2, [pc, #244]	; (80022d0 <TIM_Base_SetConfig+0x118>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d00b      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a3c      	ldr	r2, [pc, #240]	; (80022d4 <TIM_Base_SetConfig+0x11c>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d007      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a3b      	ldr	r2, [pc, #236]	; (80022d8 <TIM_Base_SetConfig+0x120>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d003      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a3a      	ldr	r2, [pc, #232]	; (80022dc <TIM_Base_SetConfig+0x124>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d108      	bne.n	800220a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	4313      	orrs	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a2f      	ldr	r2, [pc, #188]	; (80022cc <TIM_Base_SetConfig+0x114>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d02b      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002218:	d027      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a2c      	ldr	r2, [pc, #176]	; (80022d0 <TIM_Base_SetConfig+0x118>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d023      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a2b      	ldr	r2, [pc, #172]	; (80022d4 <TIM_Base_SetConfig+0x11c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d01f      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a2a      	ldr	r2, [pc, #168]	; (80022d8 <TIM_Base_SetConfig+0x120>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d01b      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a29      	ldr	r2, [pc, #164]	; (80022dc <TIM_Base_SetConfig+0x124>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d017      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a28      	ldr	r2, [pc, #160]	; (80022e0 <TIM_Base_SetConfig+0x128>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d013      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a27      	ldr	r2, [pc, #156]	; (80022e4 <TIM_Base_SetConfig+0x12c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d00f      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a26      	ldr	r2, [pc, #152]	; (80022e8 <TIM_Base_SetConfig+0x130>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d00b      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a25      	ldr	r2, [pc, #148]	; (80022ec <TIM_Base_SetConfig+0x134>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d007      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a24      	ldr	r2, [pc, #144]	; (80022f0 <TIM_Base_SetConfig+0x138>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d003      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a23      	ldr	r2, [pc, #140]	; (80022f4 <TIM_Base_SetConfig+0x13c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d108      	bne.n	800227c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4313      	orrs	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	4313      	orrs	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <TIM_Base_SetConfig+0x114>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d003      	beq.n	80022b0 <TIM_Base_SetConfig+0xf8>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a0c      	ldr	r2, [pc, #48]	; (80022dc <TIM_Base_SetConfig+0x124>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d103      	bne.n	80022b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	615a      	str	r2, [r3, #20]
}
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40010000 	.word	0x40010000
 80022d0:	40000400 	.word	0x40000400
 80022d4:	40000800 	.word	0x40000800
 80022d8:	40000c00 	.word	0x40000c00
 80022dc:	40010400 	.word	0x40010400
 80022e0:	40014000 	.word	0x40014000
 80022e4:	40014400 	.word	0x40014400
 80022e8:	40014800 	.word	0x40014800
 80022ec:	40001800 	.word	0x40001800
 80022f0:	40001c00 	.word	0x40001c00
 80022f4:	40002000 	.word	0x40002000

080022f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	f023 0201 	bic.w	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f023 0303 	bic.w	r3, r3, #3
 800232e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f023 0302 	bic.w	r3, r3, #2
 8002340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	4313      	orrs	r3, r2
 800234a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a20      	ldr	r2, [pc, #128]	; (80023d0 <TIM_OC1_SetConfig+0xd8>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d003      	beq.n	800235c <TIM_OC1_SetConfig+0x64>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a1f      	ldr	r2, [pc, #124]	; (80023d4 <TIM_OC1_SetConfig+0xdc>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d10c      	bne.n	8002376 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f023 0308 	bic.w	r3, r3, #8
 8002362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	4313      	orrs	r3, r2
 800236c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f023 0304 	bic.w	r3, r3, #4
 8002374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a15      	ldr	r2, [pc, #84]	; (80023d0 <TIM_OC1_SetConfig+0xd8>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d003      	beq.n	8002386 <TIM_OC1_SetConfig+0x8e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a14      	ldr	r2, [pc, #80]	; (80023d4 <TIM_OC1_SetConfig+0xdc>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d111      	bne.n	80023aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800238c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002394:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	621a      	str	r2, [r3, #32]
}
 80023c4:	bf00      	nop
 80023c6:	371c      	adds	r7, #28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	40010000 	.word	0x40010000
 80023d4:	40010400 	.word	0x40010400

080023d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023d8:	b480      	push	{r7}
 80023da:	b087      	sub	sp, #28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	f023 0210 	bic.w	r2, r3, #16
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800240e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	021b      	lsls	r3, r3, #8
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	4313      	orrs	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f023 0320 	bic.w	r3, r3, #32
 8002422:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	4313      	orrs	r3, r2
 800242e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a22      	ldr	r2, [pc, #136]	; (80024bc <TIM_OC2_SetConfig+0xe4>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d003      	beq.n	8002440 <TIM_OC2_SetConfig+0x68>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a21      	ldr	r2, [pc, #132]	; (80024c0 <TIM_OC2_SetConfig+0xe8>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d10d      	bne.n	800245c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002446:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	4313      	orrs	r3, r2
 8002452:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800245a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a17      	ldr	r2, [pc, #92]	; (80024bc <TIM_OC2_SetConfig+0xe4>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d003      	beq.n	800246c <TIM_OC2_SetConfig+0x94>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a16      	ldr	r2, [pc, #88]	; (80024c0 <TIM_OC2_SetConfig+0xe8>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d113      	bne.n	8002494 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002472:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800247a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	621a      	str	r2, [r3, #32]
}
 80024ae:	bf00      	nop
 80024b0:	371c      	adds	r7, #28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40010000 	.word	0x40010000
 80024c0:	40010400 	.word	0x40010400

080024c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f023 0303 	bic.w	r3, r3, #3
 80024fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800250c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	021b      	lsls	r3, r3, #8
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a21      	ldr	r2, [pc, #132]	; (80025a4 <TIM_OC3_SetConfig+0xe0>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d003      	beq.n	800252a <TIM_OC3_SetConfig+0x66>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a20      	ldr	r2, [pc, #128]	; (80025a8 <TIM_OC3_SetConfig+0xe4>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d10d      	bne.n	8002546 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002530:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	4313      	orrs	r3, r2
 800253c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a16      	ldr	r2, [pc, #88]	; (80025a4 <TIM_OC3_SetConfig+0xe0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d003      	beq.n	8002556 <TIM_OC3_SetConfig+0x92>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a15      	ldr	r2, [pc, #84]	; (80025a8 <TIM_OC3_SetConfig+0xe4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d113      	bne.n	800257e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800255c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	621a      	str	r2, [r3, #32]
}
 8002598:	bf00      	nop
 800259a:	371c      	adds	r7, #28
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	40010000 	.word	0x40010000
 80025a8:	40010400 	.word	0x40010400

080025ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	031b      	lsls	r3, r3, #12
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a12      	ldr	r2, [pc, #72]	; (8002650 <TIM_OC4_SetConfig+0xa4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d003      	beq.n	8002614 <TIM_OC4_SetConfig+0x68>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a11      	ldr	r2, [pc, #68]	; (8002654 <TIM_OC4_SetConfig+0xa8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d109      	bne.n	8002628 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800261a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	019b      	lsls	r3, r3, #6
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4313      	orrs	r3, r2
 8002626:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	621a      	str	r2, [r3, #32]
}
 8002642:	bf00      	nop
 8002644:	371c      	adds	r7, #28
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40010000 	.word	0x40010000
 8002654:	40010400 	.word	0x40010400

08002658 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	f023 0201 	bic.w	r2, r3, #1
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f023 030a 	bic.w	r3, r3, #10
 8002694:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	4313      	orrs	r3, r2
 800269c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	621a      	str	r2, [r3, #32]
}
 80026aa:	bf00      	nop
 80026ac:	371c      	adds	r7, #28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b087      	sub	sp, #28
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	60f8      	str	r0, [r7, #12]
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	f023 0210 	bic.w	r2, r3, #16
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	031b      	lsls	r3, r3, #12
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80026f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	621a      	str	r2, [r3, #32]
}
 800270a:	bf00      	nop
 800270c:	371c      	adds	r7, #28
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002716:	b480      	push	{r7}
 8002718:	b085      	sub	sp, #20
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
 800271e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	f043 0307 	orr.w	r3, r3, #7
 8002738:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	609a      	str	r2, [r3, #8]
}
 8002740:	bf00      	nop
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800274c:	b480      	push	{r7}
 800274e:	b087      	sub	sp, #28
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
 8002758:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002766:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	021a      	lsls	r2, r3, #8
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	431a      	orrs	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	4313      	orrs	r3, r2
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	4313      	orrs	r3, r2
 8002778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	609a      	str	r2, [r3, #8]
}
 8002780:	bf00      	nop
 8002782:	371c      	adds	r7, #28
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800279c:	2b01      	cmp	r3, #1
 800279e:	d101      	bne.n	80027a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027a0:	2302      	movs	r3, #2
 80027a2:	e05a      	b.n	800285a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2202      	movs	r2, #2
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a21      	ldr	r2, [pc, #132]	; (8002868 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d022      	beq.n	800282e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f0:	d01d      	beq.n	800282e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1d      	ldr	r2, [pc, #116]	; (800286c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d018      	beq.n	800282e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a1b      	ldr	r2, [pc, #108]	; (8002870 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d013      	beq.n	800282e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a1a      	ldr	r2, [pc, #104]	; (8002874 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d00e      	beq.n	800282e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a18      	ldr	r2, [pc, #96]	; (8002878 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d009      	beq.n	800282e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a17      	ldr	r2, [pc, #92]	; (800287c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d004      	beq.n	800282e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a15      	ldr	r2, [pc, #84]	; (8002880 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d10c      	bne.n	8002848 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002834:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	4313      	orrs	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40010000 	.word	0x40010000
 800286c:	40000400 	.word	0x40000400
 8002870:	40000800 	.word	0x40000800
 8002874:	40000c00 	.word	0x40000c00
 8002878:	40010400 	.word	0x40010400
 800287c:	40014000 	.word	0x40014000
 8002880:	40001800 	.word	0x40001800

08002884 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80028ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028be:	2b84      	cmp	r3, #132	; 0x84
 80028c0:	d005      	beq.n	80028ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80028c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4413      	add	r3, r2
 80028ca:	3303      	adds	r3, #3
 80028cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80028ce:	68fb      	ldr	r3, [r7, #12]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028e2:	f3ef 8305 	mrs	r3, IPSR
 80028e6:	607b      	str	r3, [r7, #4]
  return(result);
 80028e8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	bf14      	ite	ne
 80028ee:	2301      	movne	r3, #1
 80028f0:	2300      	moveq	r3, #0
 80028f2:	b2db      	uxtb	r3, r3
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002904:	f001 f840 	bl	8003988 <vTaskStartScheduler>
  
  return osOK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	bd80      	pop	{r7, pc}

0800290e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800290e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002910:	b089      	sub	sp, #36	; 0x24
 8002912:	af04      	add	r7, sp, #16
 8002914:	6078      	str	r0, [r7, #4]
 8002916:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d020      	beq.n	8002962 <osThreadCreate+0x54>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d01c      	beq.n	8002962 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685c      	ldr	r4, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681d      	ldr	r5, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691e      	ldr	r6, [r3, #16]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff ffb6 	bl	80028ac <makeFreeRtosPriority>
 8002940:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800294a:	9202      	str	r2, [sp, #8]
 800294c:	9301      	str	r3, [sp, #4]
 800294e:	9100      	str	r1, [sp, #0]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	4632      	mov	r2, r6
 8002954:	4629      	mov	r1, r5
 8002956:	4620      	mov	r0, r4
 8002958:	f000 fe4e 	bl	80035f8 <xTaskCreateStatic>
 800295c:	4603      	mov	r3, r0
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	e01c      	b.n	800299c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685c      	ldr	r4, [r3, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800296e:	b29e      	uxth	r6, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff ff98 	bl	80028ac <makeFreeRtosPriority>
 800297c:	4602      	mov	r2, r0
 800297e:	f107 030c 	add.w	r3, r7, #12
 8002982:	9301      	str	r3, [sp, #4]
 8002984:	9200      	str	r2, [sp, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	4632      	mov	r2, r6
 800298a:	4629      	mov	r1, r5
 800298c:	4620      	mov	r0, r4
 800298e:	f000 fe90 	bl	80036b2 <xTaskCreate>
 8002992:	4603      	mov	r3, r0
 8002994:	2b01      	cmp	r3, #1
 8002996:	d001      	beq.n	800299c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002998:	2300      	movs	r3, #0
 800299a:	e000      	b.n	800299e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800299c:	68fb      	ldr	r3, [r7, #12]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029a6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <osDelay+0x16>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	e000      	b.n	80029be <osDelay+0x18>
 80029bc:	2301      	movs	r3, #1
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 ffae 	bl	8003920 <vTaskDelay>
  
  return osOK;
 80029c4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af02      	add	r7, sp, #8
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	460b      	mov	r3, r1
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d013      	beq.n	8002a0e <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80029e6:	7afb      	ldrb	r3, [r7, #11]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <osTimerCreate+0x20>
 80029ec:	2101      	movs	r1, #1
 80029ee:	e000      	b.n	80029f2 <osTimerCreate+0x22>
 80029f0:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80029fa:	9201      	str	r2, [sp, #4]
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	460a      	mov	r2, r1
 8002a02:	2101      	movs	r1, #1
 8002a04:	480b      	ldr	r0, [pc, #44]	; (8002a34 <osTimerCreate+0x64>)
 8002a06:	f001 fd72 	bl	80044ee <xTimerCreateStatic>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	e00e      	b.n	8002a2c <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8002a0e:	7afb      	ldrb	r3, [r7, #11]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <osTimerCreate+0x48>
 8002a14:	2201      	movs	r2, #1
 8002a16:	e000      	b.n	8002a1a <osTimerCreate+0x4a>
 8002a18:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2101      	movs	r1, #1
 8002a24:	4803      	ldr	r0, [pc, #12]	; (8002a34 <osTimerCreate+0x64>)
 8002a26:	f001 fd41 	bl	80044ac <xTimerCreate>
 8002a2a:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	080054dc 	.word	0x080054dc

08002a38 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af02      	add	r7, sp, #8
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <osTimerStart+0x20>
    ticks = 1;
 8002a54:	2301      	movs	r3, #1
 8002a56:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8002a58:	f7ff ff40 	bl	80028dc <inHandlerMode>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d01a      	beq.n	8002a98 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8002a62:	f107 030c 	add.w	r3, r7, #12
 8002a66:	2200      	movs	r2, #0
 8002a68:	9200      	str	r2, [sp, #0]
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	2109      	movs	r1, #9
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f001 fdb6 	bl	80045e0 <xTimerGenericCommand>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d002      	beq.n	8002a80 <osTimerStart+0x48>
    {
      result = osErrorOS;
 8002a7a:	23ff      	movs	r3, #255	; 0xff
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	e018      	b.n	8002ab2 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d015      	beq.n	8002ab2 <osTimerStart+0x7a>
 8002a86:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <osTimerStart+0x84>)
 8002a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	f3bf 8f6f 	isb	sy
 8002a96:	e00c      	b.n	8002ab2 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8002a98:	2300      	movs	r3, #0
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	2104      	movs	r1, #4
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f001 fd9c 	bl	80045e0 <xTimerGenericCommand>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d001      	beq.n	8002ab2 <osTimerStart+0x7a>
      result = osErrorOS;
 8002aae:	23ff      	movs	r3, #255	; 0xff
 8002ab0:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8002ab2:	697b      	ldr	r3, [r7, #20]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	e000ed04 	.word	0xe000ed04

08002ac0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f103 0208 	add.w	r2, r3, #8
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f103 0208 	add.w	r2, r3, #8
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f103 0208 	add.w	r2, r3, #8
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b085      	sub	sp, #20
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
 8002b22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	601a      	str	r2, [r3, #0]
}
 8002b56:	bf00      	nop
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b62:	b480      	push	{r7}
 8002b64:	b085      	sub	sp, #20
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b78:	d103      	bne.n	8002b82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	e00c      	b.n	8002b9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3308      	adds	r3, #8
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	e002      	b.n	8002b90 <vListInsert+0x2e>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d2f6      	bcs.n	8002b8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	601a      	str	r2, [r3, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6892      	ldr	r2, [r2, #8]
 8002bea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6852      	ldr	r2, [r2, #4]
 8002bf4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d103      	bne.n	8002c08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	1e5a      	subs	r2, r3, #1
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10a      	bne.n	8002c52 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c40:	f383 8811 	msr	BASEPRI, r3
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c4e:	bf00      	nop
 8002c50:	e7fe      	b.n	8002c50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002c52:	f002 f8df 	bl	8004e14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5e:	68f9      	ldr	r1, [r7, #12]
 8002c60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c62:	fb01 f303 	mul.w	r3, r1, r3
 8002c66:	441a      	add	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c82:	3b01      	subs	r3, #1
 8002c84:	68f9      	ldr	r1, [r7, #12]
 8002c86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	441a      	add	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	22ff      	movs	r2, #255	; 0xff
 8002c96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	22ff      	movs	r2, #255	; 0xff
 8002c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d114      	bne.n	8002cd2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d01a      	beq.n	8002ce6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	3310      	adds	r3, #16
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f001 f8eb 	bl	8003e90 <xTaskRemoveFromEventList>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d012      	beq.n	8002ce6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <xQueueGenericReset+0xcc>)
 8002cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	f3bf 8f4f 	dsb	sy
 8002ccc:	f3bf 8f6f 	isb	sy
 8002cd0:	e009      	b.n	8002ce6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	3310      	adds	r3, #16
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff fef2 	bl	8002ac0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	3324      	adds	r3, #36	; 0x24
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff feed 	bl	8002ac0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ce6:	f002 f8c5 	bl	8004e74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002cea:	2301      	movs	r3, #1
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	e000ed04 	.word	0xe000ed04

08002cf8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08e      	sub	sp, #56	; 0x38
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
 8002d04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10a      	bne.n	8002d22 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d10:	f383 8811 	msr	BASEPRI, r3
 8002d14:	f3bf 8f6f 	isb	sy
 8002d18:	f3bf 8f4f 	dsb	sy
 8002d1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d1e:	bf00      	nop
 8002d20:	e7fe      	b.n	8002d20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10a      	bne.n	8002d3e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2c:	f383 8811 	msr	BASEPRI, r3
 8002d30:	f3bf 8f6f 	isb	sy
 8002d34:	f3bf 8f4f 	dsb	sy
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d3a:	bf00      	nop
 8002d3c:	e7fe      	b.n	8002d3c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <xQueueGenericCreateStatic+0x52>
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <xQueueGenericCreateStatic+0x56>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <xQueueGenericCreateStatic+0x58>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10a      	bne.n	8002d6a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d58:	f383 8811 	msr	BASEPRI, r3
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	623b      	str	r3, [r7, #32]
}
 8002d66:	bf00      	nop
 8002d68:	e7fe      	b.n	8002d68 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d102      	bne.n	8002d76 <xQueueGenericCreateStatic+0x7e>
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <xQueueGenericCreateStatic+0x82>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <xQueueGenericCreateStatic+0x84>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10a      	bne.n	8002d96 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d84:	f383 8811 	msr	BASEPRI, r3
 8002d88:	f3bf 8f6f 	isb	sy
 8002d8c:	f3bf 8f4f 	dsb	sy
 8002d90:	61fb      	str	r3, [r7, #28]
}
 8002d92:	bf00      	nop
 8002d94:	e7fe      	b.n	8002d94 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002d96:	2348      	movs	r3, #72	; 0x48
 8002d98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2b48      	cmp	r3, #72	; 0x48
 8002d9e:	d00a      	beq.n	8002db6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da4:	f383 8811 	msr	BASEPRI, r3
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	61bb      	str	r3, [r7, #24]
}
 8002db2:	bf00      	nop
 8002db4:	e7fe      	b.n	8002db4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002db6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00d      	beq.n	8002dde <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002dca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	68b9      	ldr	r1, [r7, #8]
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f805 	bl	8002de8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3730      	adds	r7, #48	; 0x30
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
 8002df4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d103      	bne.n	8002e04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	e002      	b.n	8002e0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e16:	2101      	movs	r1, #1
 8002e18:	69b8      	ldr	r0, [r7, #24]
 8002e1a:	f7ff ff05 	bl	8002c28 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e1e:	bf00      	nop
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08e      	sub	sp, #56	; 0x38
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e36:	2300      	movs	r3, #0
 8002e38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10a      	bne.n	8002e5a <xQueueGenericSend+0x32>
	__asm volatile
 8002e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e48:	f383 8811 	msr	BASEPRI, r3
 8002e4c:	f3bf 8f6f 	isb	sy
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e56:	bf00      	nop
 8002e58:	e7fe      	b.n	8002e58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d103      	bne.n	8002e68 <xQueueGenericSend+0x40>
 8002e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <xQueueGenericSend+0x44>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <xQueueGenericSend+0x46>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10a      	bne.n	8002e88 <xQueueGenericSend+0x60>
	__asm volatile
 8002e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e76:	f383 8811 	msr	BASEPRI, r3
 8002e7a:	f3bf 8f6f 	isb	sy
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e84:	bf00      	nop
 8002e86:	e7fe      	b.n	8002e86 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d103      	bne.n	8002e96 <xQueueGenericSend+0x6e>
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <xQueueGenericSend+0x72>
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <xQueueGenericSend+0x74>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10a      	bne.n	8002eb6 <xQueueGenericSend+0x8e>
	__asm volatile
 8002ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea4:	f383 8811 	msr	BASEPRI, r3
 8002ea8:	f3bf 8f6f 	isb	sy
 8002eac:	f3bf 8f4f 	dsb	sy
 8002eb0:	623b      	str	r3, [r7, #32]
}
 8002eb2:	bf00      	nop
 8002eb4:	e7fe      	b.n	8002eb4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002eb6:	f001 f9a7 	bl	8004208 <xTaskGetSchedulerState>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d102      	bne.n	8002ec6 <xQueueGenericSend+0x9e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <xQueueGenericSend+0xa2>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <xQueueGenericSend+0xa4>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10a      	bne.n	8002ee6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	61fb      	str	r3, [r7, #28]
}
 8002ee2:	bf00      	nop
 8002ee4:	e7fe      	b.n	8002ee4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ee6:	f001 ff95 	bl	8004e14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d302      	bcc.n	8002efc <xQueueGenericSend+0xd4>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d129      	bne.n	8002f50 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	68b9      	ldr	r1, [r7, #8]
 8002f00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f02:	f000 fa0b 	bl	800331c <prvCopyDataToQueue>
 8002f06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d010      	beq.n	8002f32 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f12:	3324      	adds	r3, #36	; 0x24
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 ffbb 	bl	8003e90 <xTaskRemoveFromEventList>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d013      	beq.n	8002f48 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f20:	4b3f      	ldr	r3, [pc, #252]	; (8003020 <xQueueGenericSend+0x1f8>)
 8002f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	f3bf 8f6f 	isb	sy
 8002f30:	e00a      	b.n	8002f48 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d007      	beq.n	8002f48 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f38:	4b39      	ldr	r3, [pc, #228]	; (8003020 <xQueueGenericSend+0x1f8>)
 8002f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f48:	f001 ff94 	bl	8004e74 <vPortExitCritical>
				return pdPASS;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e063      	b.n	8003018 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d103      	bne.n	8002f5e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f56:	f001 ff8d 	bl	8004e74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e05c      	b.n	8003018 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d106      	bne.n	8002f72 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f64:	f107 0314 	add.w	r3, r7, #20
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fff3 	bl	8003f54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f72:	f001 ff7f 	bl	8004e74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f76:	f000 fd6d 	bl	8003a54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f7a:	f001 ff4b 	bl	8004e14 <vPortEnterCritical>
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f84:	b25b      	sxtb	r3, r3
 8002f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8a:	d103      	bne.n	8002f94 <xQueueGenericSend+0x16c>
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f9a:	b25b      	sxtb	r3, r3
 8002f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa0:	d103      	bne.n	8002faa <xQueueGenericSend+0x182>
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002faa:	f001 ff63 	bl	8004e74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fae:	1d3a      	adds	r2, r7, #4
 8002fb0:	f107 0314 	add.w	r3, r7, #20
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 ffe2 	bl	8003f80 <xTaskCheckForTimeOut>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d124      	bne.n	800300c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002fc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fc4:	f000 faa2 	bl	800350c <prvIsQueueFull>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d018      	beq.n	8003000 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd0:	3310      	adds	r3, #16
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 ff0a 	bl	8003df0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002fdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fde:	f000 fa2d 	bl	800343c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002fe2:	f000 fd45 	bl	8003a70 <xTaskResumeAll>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f47f af7c 	bne.w	8002ee6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002fee:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <xQueueGenericSend+0x1f8>)
 8002ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	e772      	b.n	8002ee6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003002:	f000 fa1b 	bl	800343c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003006:	f000 fd33 	bl	8003a70 <xTaskResumeAll>
 800300a:	e76c      	b.n	8002ee6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800300c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800300e:	f000 fa15 	bl	800343c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003012:	f000 fd2d 	bl	8003a70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003016:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003018:	4618      	mov	r0, r3
 800301a:	3738      	adds	r7, #56	; 0x38
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	e000ed04 	.word	0xe000ed04

08003024 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b090      	sub	sp, #64	; 0x40
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
 8003030:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10a      	bne.n	8003052 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800303c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003040:	f383 8811 	msr	BASEPRI, r3
 8003044:	f3bf 8f6f 	isb	sy
 8003048:	f3bf 8f4f 	dsb	sy
 800304c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800304e:	bf00      	nop
 8003050:	e7fe      	b.n	8003050 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d103      	bne.n	8003060 <xQueueGenericSendFromISR+0x3c>
 8003058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <xQueueGenericSendFromISR+0x40>
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <xQueueGenericSendFromISR+0x42>
 8003064:	2300      	movs	r3, #0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10a      	bne.n	8003080 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800306a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306e:	f383 8811 	msr	BASEPRI, r3
 8003072:	f3bf 8f6f 	isb	sy
 8003076:	f3bf 8f4f 	dsb	sy
 800307a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800307c:	bf00      	nop
 800307e:	e7fe      	b.n	800307e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d103      	bne.n	800308e <xQueueGenericSendFromISR+0x6a>
 8003086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <xQueueGenericSendFromISR+0x6e>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <xQueueGenericSendFromISR+0x70>
 8003092:	2300      	movs	r3, #0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10a      	bne.n	80030ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309c:	f383 8811 	msr	BASEPRI, r3
 80030a0:	f3bf 8f6f 	isb	sy
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	623b      	str	r3, [r7, #32]
}
 80030aa:	bf00      	nop
 80030ac:	e7fe      	b.n	80030ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030ae:	f001 ff93 	bl	8004fd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80030b2:	f3ef 8211 	mrs	r2, BASEPRI
 80030b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ba:	f383 8811 	msr	BASEPRI, r3
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	61fa      	str	r2, [r7, #28]
 80030c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80030ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d302      	bcc.n	80030e0 <xQueueGenericSendFromISR+0xbc>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d12f      	bne.n	8003140 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80030e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	68b9      	ldr	r1, [r7, #8]
 80030f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80030f6:	f000 f911 	bl	800331c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80030fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80030fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003102:	d112      	bne.n	800312a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	2b00      	cmp	r3, #0
 800310a:	d016      	beq.n	800313a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800310c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310e:	3324      	adds	r3, #36	; 0x24
 8003110:	4618      	mov	r0, r3
 8003112:	f000 febd 	bl	8003e90 <xTaskRemoveFromEventList>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00e      	beq.n	800313a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00b      	beq.n	800313a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	e007      	b.n	800313a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800312a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800312e:	3301      	adds	r3, #1
 8003130:	b2db      	uxtb	r3, r3
 8003132:	b25a      	sxtb	r2, r3
 8003134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800313a:	2301      	movs	r3, #1
 800313c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800313e:	e001      	b.n	8003144 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003140:	2300      	movs	r3, #0
 8003142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003146:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800314e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003152:	4618      	mov	r0, r3
 8003154:	3740      	adds	r7, #64	; 0x40
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08c      	sub	sp, #48	; 0x30
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003168:	2300      	movs	r3, #0
 800316a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10a      	bne.n	800318c <xQueueReceive+0x30>
	__asm volatile
 8003176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317a:	f383 8811 	msr	BASEPRI, r3
 800317e:	f3bf 8f6f 	isb	sy
 8003182:	f3bf 8f4f 	dsb	sy
 8003186:	623b      	str	r3, [r7, #32]
}
 8003188:	bf00      	nop
 800318a:	e7fe      	b.n	800318a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d103      	bne.n	800319a <xQueueReceive+0x3e>
 8003192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <xQueueReceive+0x42>
 800319a:	2301      	movs	r3, #1
 800319c:	e000      	b.n	80031a0 <xQueueReceive+0x44>
 800319e:	2300      	movs	r3, #0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10a      	bne.n	80031ba <xQueueReceive+0x5e>
	__asm volatile
 80031a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a8:	f383 8811 	msr	BASEPRI, r3
 80031ac:	f3bf 8f6f 	isb	sy
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	61fb      	str	r3, [r7, #28]
}
 80031b6:	bf00      	nop
 80031b8:	e7fe      	b.n	80031b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031ba:	f001 f825 	bl	8004208 <xTaskGetSchedulerState>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d102      	bne.n	80031ca <xQueueReceive+0x6e>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <xQueueReceive+0x72>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <xQueueReceive+0x74>
 80031ce:	2300      	movs	r3, #0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10a      	bne.n	80031ea <xQueueReceive+0x8e>
	__asm volatile
 80031d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	61bb      	str	r3, [r7, #24]
}
 80031e6:	bf00      	nop
 80031e8:	e7fe      	b.n	80031e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031ea:	f001 fe13 	bl	8004e14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d01f      	beq.n	800323a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031fa:	68b9      	ldr	r1, [r7, #8]
 80031fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031fe:	f000 f8f7 	bl	80033f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	1e5a      	subs	r2, r3, #1
 8003206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003208:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800320a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00f      	beq.n	8003232 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003214:	3310      	adds	r3, #16
 8003216:	4618      	mov	r0, r3
 8003218:	f000 fe3a 	bl	8003e90 <xTaskRemoveFromEventList>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d007      	beq.n	8003232 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003222:	4b3d      	ldr	r3, [pc, #244]	; (8003318 <xQueueReceive+0x1bc>)
 8003224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	f3bf 8f4f 	dsb	sy
 800322e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003232:	f001 fe1f 	bl	8004e74 <vPortExitCritical>
				return pdPASS;
 8003236:	2301      	movs	r3, #1
 8003238:	e069      	b.n	800330e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d103      	bne.n	8003248 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003240:	f001 fe18 	bl	8004e74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003244:	2300      	movs	r3, #0
 8003246:	e062      	b.n	800330e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800324e:	f107 0310 	add.w	r3, r7, #16
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fe7e 	bl	8003f54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003258:	2301      	movs	r3, #1
 800325a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800325c:	f001 fe0a 	bl	8004e74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003260:	f000 fbf8 	bl	8003a54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003264:	f001 fdd6 	bl	8004e14 <vPortEnterCritical>
 8003268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800326e:	b25b      	sxtb	r3, r3
 8003270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003274:	d103      	bne.n	800327e <xQueueReceive+0x122>
 8003276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800327e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003280:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003284:	b25b      	sxtb	r3, r3
 8003286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328a:	d103      	bne.n	8003294 <xQueueReceive+0x138>
 800328c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003294:	f001 fdee 	bl	8004e74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003298:	1d3a      	adds	r2, r7, #4
 800329a:	f107 0310 	add.w	r3, r7, #16
 800329e:	4611      	mov	r1, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 fe6d 	bl	8003f80 <xTaskCheckForTimeOut>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d123      	bne.n	80032f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032ae:	f000 f917 	bl	80034e0 <prvIsQueueEmpty>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d017      	beq.n	80032e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ba:	3324      	adds	r3, #36	; 0x24
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	4611      	mov	r1, r2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 fd95 	bl	8003df0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80032c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032c8:	f000 f8b8 	bl	800343c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80032cc:	f000 fbd0 	bl	8003a70 <xTaskResumeAll>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d189      	bne.n	80031ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80032d6:	4b10      	ldr	r3, [pc, #64]	; (8003318 <xQueueReceive+0x1bc>)
 80032d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	f3bf 8f4f 	dsb	sy
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	e780      	b.n	80031ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80032e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032ea:	f000 f8a7 	bl	800343c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032ee:	f000 fbbf 	bl	8003a70 <xTaskResumeAll>
 80032f2:	e77a      	b.n	80031ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80032f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032f6:	f000 f8a1 	bl	800343c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032fa:	f000 fbb9 	bl	8003a70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003300:	f000 f8ee 	bl	80034e0 <prvIsQueueEmpty>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	f43f af6f 	beq.w	80031ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800330c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800330e:	4618      	mov	r0, r3
 8003310:	3730      	adds	r7, #48	; 0x30
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	e000ed04 	.word	0xe000ed04

0800331c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003330:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10d      	bne.n	8003356 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d14d      	bne.n	80033de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	4618      	mov	r0, r3
 8003348:	f000 ff7c 	bl	8004244 <xTaskPriorityDisinherit>
 800334c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	e043      	b.n	80033de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d119      	bne.n	8003390 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6858      	ldr	r0, [r3, #4]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	461a      	mov	r2, r3
 8003366:	68b9      	ldr	r1, [r7, #8]
 8003368:	f002 f884 	bl	8005474 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	441a      	add	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	429a      	cmp	r2, r3
 8003384:	d32b      	bcc.n	80033de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	605a      	str	r2, [r3, #4]
 800338e:	e026      	b.n	80033de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	68d8      	ldr	r0, [r3, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	461a      	mov	r2, r3
 800339a:	68b9      	ldr	r1, [r7, #8]
 800339c:	f002 f86a 	bl	8005474 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	425b      	negs	r3, r3
 80033aa:	441a      	add	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d207      	bcs.n	80033cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	425b      	negs	r3, r3
 80033c6:	441a      	add	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d105      	bne.n	80033de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	3b01      	subs	r3, #1
 80033dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80033e6:	697b      	ldr	r3, [r7, #20]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d018      	beq.n	8003434 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	441a      	add	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68da      	ldr	r2, [r3, #12]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	429a      	cmp	r2, r3
 800341a:	d303      	bcc.n	8003424 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68d9      	ldr	r1, [r3, #12]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	461a      	mov	r2, r3
 800342e:	6838      	ldr	r0, [r7, #0]
 8003430:	f002 f820 	bl	8005474 <memcpy>
	}
}
 8003434:	bf00      	nop
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003444:	f001 fce6 	bl	8004e14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800344e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003450:	e011      	b.n	8003476 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	2b00      	cmp	r3, #0
 8003458:	d012      	beq.n	8003480 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3324      	adds	r3, #36	; 0x24
 800345e:	4618      	mov	r0, r3
 8003460:	f000 fd16 	bl	8003e90 <xTaskRemoveFromEventList>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800346a:	f000 fdeb 	bl	8004044 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	3b01      	subs	r3, #1
 8003472:	b2db      	uxtb	r3, r3
 8003474:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800347a:	2b00      	cmp	r3, #0
 800347c:	dce9      	bgt.n	8003452 <prvUnlockQueue+0x16>
 800347e:	e000      	b.n	8003482 <prvUnlockQueue+0x46>
					break;
 8003480:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	22ff      	movs	r2, #255	; 0xff
 8003486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800348a:	f001 fcf3 	bl	8004e74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800348e:	f001 fcc1 	bl	8004e14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003498:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800349a:	e011      	b.n	80034c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d012      	beq.n	80034ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3310      	adds	r3, #16
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 fcf1 	bl	8003e90 <xTaskRemoveFromEventList>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034b4:	f000 fdc6 	bl	8004044 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80034b8:	7bbb      	ldrb	r3, [r7, #14]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	dce9      	bgt.n	800349c <prvUnlockQueue+0x60>
 80034c8:	e000      	b.n	80034cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80034ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	22ff      	movs	r2, #255	; 0xff
 80034d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80034d4:	f001 fcce 	bl	8004e74 <vPortExitCritical>
}
 80034d8:	bf00      	nop
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034e8:	f001 fc94 	bl	8004e14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d102      	bne.n	80034fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80034f4:	2301      	movs	r3, #1
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	e001      	b.n	80034fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034fe:	f001 fcb9 	bl	8004e74 <vPortExitCritical>

	return xReturn;
 8003502:	68fb      	ldr	r3, [r7, #12]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003514:	f001 fc7e 	bl	8004e14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003520:	429a      	cmp	r2, r3
 8003522:	d102      	bne.n	800352a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003524:	2301      	movs	r3, #1
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	e001      	b.n	800352e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800352e:	f001 fca1 	bl	8004e74 <vPortExitCritical>

	return xReturn;
 8003532:	68fb      	ldr	r3, [r7, #12]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003546:	2300      	movs	r3, #0
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	e014      	b.n	8003576 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800354c:	4a0f      	ldr	r2, [pc, #60]	; (800358c <vQueueAddToRegistry+0x50>)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10b      	bne.n	8003570 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003558:	490c      	ldr	r1, [pc, #48]	; (800358c <vQueueAddToRegistry+0x50>)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003562:	4a0a      	ldr	r2, [pc, #40]	; (800358c <vQueueAddToRegistry+0x50>)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	4413      	add	r3, r2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800356e:	e006      	b.n	800357e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	3301      	adds	r3, #1
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2b07      	cmp	r3, #7
 800357a:	d9e7      	bls.n	800354c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800357c:	bf00      	nop
 800357e:	bf00      	nop
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	200045c4 	.word	0x200045c4

08003590 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80035a0:	f001 fc38 	bl	8004e14 <vPortEnterCritical>
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035aa:	b25b      	sxtb	r3, r3
 80035ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b0:	d103      	bne.n	80035ba <vQueueWaitForMessageRestricted+0x2a>
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035c0:	b25b      	sxtb	r3, r3
 80035c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c6:	d103      	bne.n	80035d0 <vQueueWaitForMessageRestricted+0x40>
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035d0:	f001 fc50 	bl	8004e74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d106      	bne.n	80035ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	3324      	adds	r3, #36	; 0x24
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 fc27 	bl	8003e38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80035ea:	6978      	ldr	r0, [r7, #20]
 80035ec:	f7ff ff26 	bl	800343c <prvUnlockQueue>
	}
 80035f0:	bf00      	nop
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08e      	sub	sp, #56	; 0x38
 80035fc:	af04      	add	r7, sp, #16
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10a      	bne.n	8003622 <xTaskCreateStatic+0x2a>
	__asm volatile
 800360c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003610:	f383 8811 	msr	BASEPRI, r3
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	623b      	str	r3, [r7, #32]
}
 800361e:	bf00      	nop
 8003620:	e7fe      	b.n	8003620 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10a      	bne.n	800363e <xTaskCreateStatic+0x46>
	__asm volatile
 8003628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362c:	f383 8811 	msr	BASEPRI, r3
 8003630:	f3bf 8f6f 	isb	sy
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	61fb      	str	r3, [r7, #28]
}
 800363a:	bf00      	nop
 800363c:	e7fe      	b.n	800363c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800363e:	2354      	movs	r3, #84	; 0x54
 8003640:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	2b54      	cmp	r3, #84	; 0x54
 8003646:	d00a      	beq.n	800365e <xTaskCreateStatic+0x66>
	__asm volatile
 8003648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364c:	f383 8811 	msr	BASEPRI, r3
 8003650:	f3bf 8f6f 	isb	sy
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	61bb      	str	r3, [r7, #24]
}
 800365a:	bf00      	nop
 800365c:	e7fe      	b.n	800365c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800365e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003662:	2b00      	cmp	r3, #0
 8003664:	d01e      	beq.n	80036a4 <xTaskCreateStatic+0xac>
 8003666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003668:	2b00      	cmp	r3, #0
 800366a:	d01b      	beq.n	80036a4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800366c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003674:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	2202      	movs	r2, #2
 800367a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800367e:	2300      	movs	r3, #0
 8003680:	9303      	str	r3, [sp, #12]
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	9302      	str	r3, [sp, #8]
 8003686:	f107 0314 	add.w	r3, r7, #20
 800368a:	9301      	str	r3, [sp, #4]
 800368c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	68b9      	ldr	r1, [r7, #8]
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f000 f850 	bl	800373c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800369c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800369e:	f000 f8d5 	bl	800384c <prvAddNewTaskToReadyList>
 80036a2:	e001      	b.n	80036a8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80036a4:	2300      	movs	r3, #0
 80036a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036a8:	697b      	ldr	r3, [r7, #20]
	}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3728      	adds	r7, #40	; 0x28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b08c      	sub	sp, #48	; 0x30
 80036b6:	af04      	add	r7, sp, #16
 80036b8:	60f8      	str	r0, [r7, #12]
 80036ba:	60b9      	str	r1, [r7, #8]
 80036bc:	603b      	str	r3, [r7, #0]
 80036be:	4613      	mov	r3, r2
 80036c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036c2:	88fb      	ldrh	r3, [r7, #6]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4618      	mov	r0, r3
 80036c8:	f001 fcc6 	bl	8005058 <pvPortMalloc>
 80036cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00e      	beq.n	80036f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036d4:	2054      	movs	r0, #84	; 0x54
 80036d6:	f001 fcbf 	bl	8005058 <pvPortMalloc>
 80036da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30
 80036e8:	e005      	b.n	80036f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036ea:	6978      	ldr	r0, [r7, #20]
 80036ec:	f001 fd80 	bl	80051f0 <vPortFree>
 80036f0:	e001      	b.n	80036f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d017      	beq.n	800372c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003704:	88fa      	ldrh	r2, [r7, #6]
 8003706:	2300      	movs	r3, #0
 8003708:	9303      	str	r3, [sp, #12]
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	9302      	str	r3, [sp, #8]
 800370e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003710:	9301      	str	r3, [sp, #4]
 8003712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	68b9      	ldr	r1, [r7, #8]
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 f80e 	bl	800373c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003720:	69f8      	ldr	r0, [r7, #28]
 8003722:	f000 f893 	bl	800384c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003726:	2301      	movs	r3, #1
 8003728:	61bb      	str	r3, [r7, #24]
 800372a:	e002      	b.n	8003732 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800372c:	f04f 33ff 	mov.w	r3, #4294967295
 8003730:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003732:	69bb      	ldr	r3, [r7, #24]
	}
 8003734:	4618      	mov	r0, r3
 8003736:	3720      	adds	r7, #32
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800374a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003754:	3b01      	subs	r3, #1
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	f023 0307 	bic.w	r3, r3, #7
 8003762:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <prvInitialiseNewTask+0x48>
	__asm volatile
 800376e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003772:	f383 8811 	msr	BASEPRI, r3
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	617b      	str	r3, [r7, #20]
}
 8003780:	bf00      	nop
 8003782:	e7fe      	b.n	8003782 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d01f      	beq.n	80037ca <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	e012      	b.n	80037b6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	4413      	add	r3, r2
 8003796:	7819      	ldrb	r1, [r3, #0]
 8003798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	3334      	adds	r3, #52	; 0x34
 80037a0:	460a      	mov	r2, r1
 80037a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	4413      	add	r3, r2
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d006      	beq.n	80037be <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	3301      	adds	r3, #1
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	2b0f      	cmp	r3, #15
 80037ba:	d9e9      	bls.n	8003790 <prvInitialiseNewTask+0x54>
 80037bc:	e000      	b.n	80037c0 <prvInitialiseNewTask+0x84>
			{
				break;
 80037be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037c8:	e003      	b.n	80037d2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d4:	2b06      	cmp	r3, #6
 80037d6:	d901      	bls.n	80037dc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037d8:	2306      	movs	r3, #6
 80037da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037e6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80037e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ea:	2200      	movs	r2, #0
 80037ec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f0:	3304      	adds	r3, #4
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff f984 	bl	8002b00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fa:	3318      	adds	r3, #24
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff f97f 	bl	8002b00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003806:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380a:	f1c3 0207 	rsb	r2, r3, #7
 800380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003810:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003816:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381a:	2200      	movs	r2, #0
 800381c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	68f9      	ldr	r1, [r7, #12]
 800382a:	69b8      	ldr	r0, [r7, #24]
 800382c:	f001 f9c2 	bl	8004bb4 <pxPortInitialiseStack>
 8003830:	4602      	mov	r2, r0
 8003832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003834:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003838:	2b00      	cmp	r3, #0
 800383a:	d002      	beq.n	8003842 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800383c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003840:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003842:	bf00      	nop
 8003844:	3720      	adds	r7, #32
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003854:	f001 fade 	bl	8004e14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003858:	4b2a      	ldr	r3, [pc, #168]	; (8003904 <prvAddNewTaskToReadyList+0xb8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3301      	adds	r3, #1
 800385e:	4a29      	ldr	r2, [pc, #164]	; (8003904 <prvAddNewTaskToReadyList+0xb8>)
 8003860:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003862:	4b29      	ldr	r3, [pc, #164]	; (8003908 <prvAddNewTaskToReadyList+0xbc>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800386a:	4a27      	ldr	r2, [pc, #156]	; (8003908 <prvAddNewTaskToReadyList+0xbc>)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003870:	4b24      	ldr	r3, [pc, #144]	; (8003904 <prvAddNewTaskToReadyList+0xb8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d110      	bne.n	800389a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003878:	f000 fc08 	bl	800408c <prvInitialiseTaskLists>
 800387c:	e00d      	b.n	800389a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800387e:	4b23      	ldr	r3, [pc, #140]	; (800390c <prvAddNewTaskToReadyList+0xc0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d109      	bne.n	800389a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003886:	4b20      	ldr	r3, [pc, #128]	; (8003908 <prvAddNewTaskToReadyList+0xbc>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	429a      	cmp	r2, r3
 8003892:	d802      	bhi.n	800389a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003894:	4a1c      	ldr	r2, [pc, #112]	; (8003908 <prvAddNewTaskToReadyList+0xbc>)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800389a:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <prvAddNewTaskToReadyList+0xc4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	3301      	adds	r3, #1
 80038a0:	4a1b      	ldr	r2, [pc, #108]	; (8003910 <prvAddNewTaskToReadyList+0xc4>)
 80038a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	2201      	movs	r2, #1
 80038aa:	409a      	lsls	r2, r3
 80038ac:	4b19      	ldr	r3, [pc, #100]	; (8003914 <prvAddNewTaskToReadyList+0xc8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	4a18      	ldr	r2, [pc, #96]	; (8003914 <prvAddNewTaskToReadyList+0xc8>)
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4a15      	ldr	r2, [pc, #84]	; (8003918 <prvAddNewTaskToReadyList+0xcc>)
 80038c4:	441a      	add	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3304      	adds	r3, #4
 80038ca:	4619      	mov	r1, r3
 80038cc:	4610      	mov	r0, r2
 80038ce:	f7ff f924 	bl	8002b1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038d2:	f001 facf 	bl	8004e74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038d6:	4b0d      	ldr	r3, [pc, #52]	; (800390c <prvAddNewTaskToReadyList+0xc0>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00e      	beq.n	80038fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038de:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <prvAddNewTaskToReadyList+0xbc>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d207      	bcs.n	80038fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038ec:	4b0b      	ldr	r3, [pc, #44]	; (800391c <prvAddNewTaskToReadyList+0xd0>)
 80038ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038fc:	bf00      	nop
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	200007d4 	.word	0x200007d4
 8003908:	200006d4 	.word	0x200006d4
 800390c:	200007e0 	.word	0x200007e0
 8003910:	200007f0 	.word	0x200007f0
 8003914:	200007dc 	.word	0x200007dc
 8003918:	200006d8 	.word	0x200006d8
 800391c:	e000ed04 	.word	0xe000ed04

08003920 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003928:	2300      	movs	r3, #0
 800392a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d017      	beq.n	8003962 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003932:	4b13      	ldr	r3, [pc, #76]	; (8003980 <vTaskDelay+0x60>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <vTaskDelay+0x30>
	__asm volatile
 800393a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393e:	f383 8811 	msr	BASEPRI, r3
 8003942:	f3bf 8f6f 	isb	sy
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	60bb      	str	r3, [r7, #8]
}
 800394c:	bf00      	nop
 800394e:	e7fe      	b.n	800394e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003950:	f000 f880 	bl	8003a54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003954:	2100      	movs	r1, #0
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fcfa 	bl	8004350 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800395c:	f000 f888 	bl	8003a70 <xTaskResumeAll>
 8003960:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d107      	bne.n	8003978 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003968:	4b06      	ldr	r3, [pc, #24]	; (8003984 <vTaskDelay+0x64>)
 800396a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003978:	bf00      	nop
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	200007fc 	.word	0x200007fc
 8003984:	e000ed04 	.word	0xe000ed04

08003988 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08a      	sub	sp, #40	; 0x28
 800398c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800398e:	2300      	movs	r3, #0
 8003990:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003992:	2300      	movs	r3, #0
 8003994:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003996:	463a      	mov	r2, r7
 8003998:	1d39      	adds	r1, r7, #4
 800399a:	f107 0308 	add.w	r3, r7, #8
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fc fd92 	bl	80004c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039a4:	6839      	ldr	r1, [r7, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	9202      	str	r2, [sp, #8]
 80039ac:	9301      	str	r3, [sp, #4]
 80039ae:	2300      	movs	r3, #0
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	2300      	movs	r3, #0
 80039b4:	460a      	mov	r2, r1
 80039b6:	4921      	ldr	r1, [pc, #132]	; (8003a3c <vTaskStartScheduler+0xb4>)
 80039b8:	4821      	ldr	r0, [pc, #132]	; (8003a40 <vTaskStartScheduler+0xb8>)
 80039ba:	f7ff fe1d 	bl	80035f8 <xTaskCreateStatic>
 80039be:	4603      	mov	r3, r0
 80039c0:	4a20      	ldr	r2, [pc, #128]	; (8003a44 <vTaskStartScheduler+0xbc>)
 80039c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039c4:	4b1f      	ldr	r3, [pc, #124]	; (8003a44 <vTaskStartScheduler+0xbc>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80039cc:	2301      	movs	r3, #1
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	e001      	b.n	80039d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d102      	bne.n	80039e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80039dc:	f000 fd1e 	bl	800441c <xTimerCreateTimerTask>
 80039e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d116      	bne.n	8003a16 <vTaskStartScheduler+0x8e>
	__asm volatile
 80039e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ec:	f383 8811 	msr	BASEPRI, r3
 80039f0:	f3bf 8f6f 	isb	sy
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	613b      	str	r3, [r7, #16]
}
 80039fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80039fc:	4b12      	ldr	r3, [pc, #72]	; (8003a48 <vTaskStartScheduler+0xc0>)
 80039fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003a02:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a04:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <vTaskStartScheduler+0xc4>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a0a:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <vTaskStartScheduler+0xc8>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a10:	f001 f95e 	bl	8004cd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a14:	e00e      	b.n	8003a34 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1c:	d10a      	bne.n	8003a34 <vTaskStartScheduler+0xac>
	__asm volatile
 8003a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a22:	f383 8811 	msr	BASEPRI, r3
 8003a26:	f3bf 8f6f 	isb	sy
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	60fb      	str	r3, [r7, #12]
}
 8003a30:	bf00      	nop
 8003a32:	e7fe      	b.n	8003a32 <vTaskStartScheduler+0xaa>
}
 8003a34:	bf00      	nop
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	080054e0 	.word	0x080054e0
 8003a40:	0800405d 	.word	0x0800405d
 8003a44:	200007f8 	.word	0x200007f8
 8003a48:	200007f4 	.word	0x200007f4
 8003a4c:	200007e0 	.word	0x200007e0
 8003a50:	200007d8 	.word	0x200007d8

08003a54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a58:	4b04      	ldr	r3, [pc, #16]	; (8003a6c <vTaskSuspendAll+0x18>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	4a03      	ldr	r2, [pc, #12]	; (8003a6c <vTaskSuspendAll+0x18>)
 8003a60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003a62:	bf00      	nop
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	200007fc 	.word	0x200007fc

08003a70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a7e:	4b41      	ldr	r3, [pc, #260]	; (8003b84 <xTaskResumeAll+0x114>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10a      	bne.n	8003a9c <xTaskResumeAll+0x2c>
	__asm volatile
 8003a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8a:	f383 8811 	msr	BASEPRI, r3
 8003a8e:	f3bf 8f6f 	isb	sy
 8003a92:	f3bf 8f4f 	dsb	sy
 8003a96:	603b      	str	r3, [r7, #0]
}
 8003a98:	bf00      	nop
 8003a9a:	e7fe      	b.n	8003a9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a9c:	f001 f9ba 	bl	8004e14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003aa0:	4b38      	ldr	r3, [pc, #224]	; (8003b84 <xTaskResumeAll+0x114>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	4a37      	ldr	r2, [pc, #220]	; (8003b84 <xTaskResumeAll+0x114>)
 8003aa8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aaa:	4b36      	ldr	r3, [pc, #216]	; (8003b84 <xTaskResumeAll+0x114>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d161      	bne.n	8003b76 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ab2:	4b35      	ldr	r3, [pc, #212]	; (8003b88 <xTaskResumeAll+0x118>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d05d      	beq.n	8003b76 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003aba:	e02e      	b.n	8003b1a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003abc:	4b33      	ldr	r3, [pc, #204]	; (8003b8c <xTaskResumeAll+0x11c>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	3318      	adds	r3, #24
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff f883 	bl	8002bd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff f87e 	bl	8002bd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	2201      	movs	r2, #1
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	4b2b      	ldr	r3, [pc, #172]	; (8003b90 <xTaskResumeAll+0x120>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	4a2a      	ldr	r2, [pc, #168]	; (8003b90 <xTaskResumeAll+0x120>)
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4a27      	ldr	r2, [pc, #156]	; (8003b94 <xTaskResumeAll+0x124>)
 8003af8:	441a      	add	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	3304      	adds	r3, #4
 8003afe:	4619      	mov	r1, r3
 8003b00:	4610      	mov	r0, r2
 8003b02:	f7ff f80a 	bl	8002b1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0a:	4b23      	ldr	r3, [pc, #140]	; (8003b98 <xTaskResumeAll+0x128>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d302      	bcc.n	8003b1a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003b14:	4b21      	ldr	r3, [pc, #132]	; (8003b9c <xTaskResumeAll+0x12c>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b1a:	4b1c      	ldr	r3, [pc, #112]	; (8003b8c <xTaskResumeAll+0x11c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1cc      	bne.n	8003abc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b28:	f000 fb4e 	bl	80041c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b2c:	4b1c      	ldr	r3, [pc, #112]	; (8003ba0 <xTaskResumeAll+0x130>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d010      	beq.n	8003b5a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b38:	f000 f846 	bl	8003bc8 <xTaskIncrementTick>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003b42:	4b16      	ldr	r3, [pc, #88]	; (8003b9c <xTaskResumeAll+0x12c>)
 8003b44:	2201      	movs	r2, #1
 8003b46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1f1      	bne.n	8003b38 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003b54:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <xTaskResumeAll+0x130>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b5a:	4b10      	ldr	r3, [pc, #64]	; (8003b9c <xTaskResumeAll+0x12c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d009      	beq.n	8003b76 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b62:	2301      	movs	r3, #1
 8003b64:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b66:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <xTaskResumeAll+0x134>)
 8003b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	f3bf 8f4f 	dsb	sy
 8003b72:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b76:	f001 f97d 	bl	8004e74 <vPortExitCritical>

	return xAlreadyYielded;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	200007fc 	.word	0x200007fc
 8003b88:	200007d4 	.word	0x200007d4
 8003b8c:	20000794 	.word	0x20000794
 8003b90:	200007dc 	.word	0x200007dc
 8003b94:	200006d8 	.word	0x200006d8
 8003b98:	200006d4 	.word	0x200006d4
 8003b9c:	200007e8 	.word	0x200007e8
 8003ba0:	200007e4 	.word	0x200007e4
 8003ba4:	e000ed04 	.word	0xe000ed04

08003ba8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003bae:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <xTaskGetTickCount+0x1c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003bb4:	687b      	ldr	r3, [r7, #4]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	200007d8 	.word	0x200007d8

08003bc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bd2:	4b4e      	ldr	r3, [pc, #312]	; (8003d0c <xTaskIncrementTick+0x144>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f040 808e 	bne.w	8003cf8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003bdc:	4b4c      	ldr	r3, [pc, #304]	; (8003d10 <xTaskIncrementTick+0x148>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3301      	adds	r3, #1
 8003be2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003be4:	4a4a      	ldr	r2, [pc, #296]	; (8003d10 <xTaskIncrementTick+0x148>)
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d120      	bne.n	8003c32 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003bf0:	4b48      	ldr	r3, [pc, #288]	; (8003d14 <xTaskIncrementTick+0x14c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <xTaskIncrementTick+0x48>
	__asm volatile
 8003bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	603b      	str	r3, [r7, #0]
}
 8003c0c:	bf00      	nop
 8003c0e:	e7fe      	b.n	8003c0e <xTaskIncrementTick+0x46>
 8003c10:	4b40      	ldr	r3, [pc, #256]	; (8003d14 <xTaskIncrementTick+0x14c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	4b40      	ldr	r3, [pc, #256]	; (8003d18 <xTaskIncrementTick+0x150>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a3e      	ldr	r2, [pc, #248]	; (8003d14 <xTaskIncrementTick+0x14c>)
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	4a3e      	ldr	r2, [pc, #248]	; (8003d18 <xTaskIncrementTick+0x150>)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	4b3d      	ldr	r3, [pc, #244]	; (8003d1c <xTaskIncrementTick+0x154>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	4a3c      	ldr	r2, [pc, #240]	; (8003d1c <xTaskIncrementTick+0x154>)
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	f000 facb 	bl	80041c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c32:	4b3b      	ldr	r3, [pc, #236]	; (8003d20 <xTaskIncrementTick+0x158>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d348      	bcc.n	8003cce <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c3c:	4b35      	ldr	r3, [pc, #212]	; (8003d14 <xTaskIncrementTick+0x14c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d104      	bne.n	8003c50 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c46:	4b36      	ldr	r3, [pc, #216]	; (8003d20 <xTaskIncrementTick+0x158>)
 8003c48:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4c:	601a      	str	r2, [r3, #0]
					break;
 8003c4e:	e03e      	b.n	8003cce <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c50:	4b30      	ldr	r3, [pc, #192]	; (8003d14 <xTaskIncrementTick+0x14c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d203      	bcs.n	8003c70 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c68:	4a2d      	ldr	r2, [pc, #180]	; (8003d20 <xTaskIncrementTick+0x158>)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c6e:	e02e      	b.n	8003cce <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	3304      	adds	r3, #4
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fe ffad 	bl	8002bd4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d004      	beq.n	8003c8c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	3318      	adds	r3, #24
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe ffa4 	bl	8002bd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	2201      	movs	r2, #1
 8003c92:	409a      	lsls	r2, r3
 8003c94:	4b23      	ldr	r3, [pc, #140]	; (8003d24 <xTaskIncrementTick+0x15c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	4a22      	ldr	r2, [pc, #136]	; (8003d24 <xTaskIncrementTick+0x15c>)
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4a1f      	ldr	r2, [pc, #124]	; (8003d28 <xTaskIncrementTick+0x160>)
 8003cac:	441a      	add	r2, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4610      	mov	r0, r2
 8003cb6:	f7fe ff30 	bl	8002b1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cbe:	4b1b      	ldr	r3, [pc, #108]	; (8003d2c <xTaskIncrementTick+0x164>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d3b9      	bcc.n	8003c3c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ccc:	e7b6      	b.n	8003c3c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003cce:	4b17      	ldr	r3, [pc, #92]	; (8003d2c <xTaskIncrementTick+0x164>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd4:	4914      	ldr	r1, [pc, #80]	; (8003d28 <xTaskIncrementTick+0x160>)
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d901      	bls.n	8003cea <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003cea:	4b11      	ldr	r3, [pc, #68]	; (8003d30 <xTaskIncrementTick+0x168>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d007      	beq.n	8003d02 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	617b      	str	r3, [r7, #20]
 8003cf6:	e004      	b.n	8003d02 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003cf8:	4b0e      	ldr	r3, [pc, #56]	; (8003d34 <xTaskIncrementTick+0x16c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	4a0d      	ldr	r2, [pc, #52]	; (8003d34 <xTaskIncrementTick+0x16c>)
 8003d00:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d02:	697b      	ldr	r3, [r7, #20]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	200007fc 	.word	0x200007fc
 8003d10:	200007d8 	.word	0x200007d8
 8003d14:	2000078c 	.word	0x2000078c
 8003d18:	20000790 	.word	0x20000790
 8003d1c:	200007ec 	.word	0x200007ec
 8003d20:	200007f4 	.word	0x200007f4
 8003d24:	200007dc 	.word	0x200007dc
 8003d28:	200006d8 	.word	0x200006d8
 8003d2c:	200006d4 	.word	0x200006d4
 8003d30:	200007e8 	.word	0x200007e8
 8003d34:	200007e4 	.word	0x200007e4

08003d38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d3e:	4b27      	ldr	r3, [pc, #156]	; (8003ddc <vTaskSwitchContext+0xa4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d46:	4b26      	ldr	r3, [pc, #152]	; (8003de0 <vTaskSwitchContext+0xa8>)
 8003d48:	2201      	movs	r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d4c:	e03f      	b.n	8003dce <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003d4e:	4b24      	ldr	r3, [pc, #144]	; (8003de0 <vTaskSwitchContext+0xa8>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d54:	4b23      	ldr	r3, [pc, #140]	; (8003de4 <vTaskSwitchContext+0xac>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	fab3 f383 	clz	r3, r3
 8003d60:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003d62:	7afb      	ldrb	r3, [r7, #11]
 8003d64:	f1c3 031f 	rsb	r3, r3, #31
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	491f      	ldr	r1, [pc, #124]	; (8003de8 <vTaskSwitchContext+0xb0>)
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10a      	bne.n	8003d94 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	607b      	str	r3, [r7, #4]
}
 8003d90:	bf00      	nop
 8003d92:	e7fe      	b.n	8003d92 <vTaskSwitchContext+0x5a>
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	4613      	mov	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4a12      	ldr	r2, [pc, #72]	; (8003de8 <vTaskSwitchContext+0xb0>)
 8003da0:	4413      	add	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	605a      	str	r2, [r3, #4]
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	3308      	adds	r3, #8
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d104      	bne.n	8003dc4 <vTaskSwitchContext+0x8c>
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	605a      	str	r2, [r3, #4]
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	4a08      	ldr	r2, [pc, #32]	; (8003dec <vTaskSwitchContext+0xb4>)
 8003dcc:	6013      	str	r3, [r2, #0]
}
 8003dce:	bf00      	nop
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	200007fc 	.word	0x200007fc
 8003de0:	200007e8 	.word	0x200007e8
 8003de4:	200007dc 	.word	0x200007dc
 8003de8:	200006d8 	.word	0x200006d8
 8003dec:	200006d4 	.word	0x200006d4

08003df0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10a      	bne.n	8003e16 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e04:	f383 8811 	msr	BASEPRI, r3
 8003e08:	f3bf 8f6f 	isb	sy
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	60fb      	str	r3, [r7, #12]
}
 8003e12:	bf00      	nop
 8003e14:	e7fe      	b.n	8003e14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e16:	4b07      	ldr	r3, [pc, #28]	; (8003e34 <vTaskPlaceOnEventList+0x44>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3318      	adds	r3, #24
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7fe fe9f 	bl	8002b62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e24:	2101      	movs	r1, #1
 8003e26:	6838      	ldr	r0, [r7, #0]
 8003e28:	f000 fa92 	bl	8004350 <prvAddCurrentTaskToDelayedList>
}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	200006d4 	.word	0x200006d4

08003e38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10a      	bne.n	8003e60 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	617b      	str	r3, [r7, #20]
}
 8003e5c:	bf00      	nop
 8003e5e:	e7fe      	b.n	8003e5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e60:	4b0a      	ldr	r3, [pc, #40]	; (8003e8c <vTaskPlaceOnEventListRestricted+0x54>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3318      	adds	r3, #24
 8003e66:	4619      	mov	r1, r3
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f7fe fe56 	bl	8002b1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003e74:	f04f 33ff 	mov.w	r3, #4294967295
 8003e78:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	68b8      	ldr	r0, [r7, #8]
 8003e7e:	f000 fa67 	bl	8004350 <prvAddCurrentTaskToDelayedList>
	}
 8003e82:	bf00      	nop
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	200006d4 	.word	0x200006d4

08003e90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10a      	bne.n	8003ebc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	60fb      	str	r3, [r7, #12]
}
 8003eb8:	bf00      	nop
 8003eba:	e7fe      	b.n	8003eba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	3318      	adds	r3, #24
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7fe fe87 	bl	8002bd4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ec6:	4b1d      	ldr	r3, [pc, #116]	; (8003f3c <xTaskRemoveFromEventList+0xac>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d11c      	bne.n	8003f08 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fe fe7e 	bl	8002bd4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	2201      	movs	r2, #1
 8003ede:	409a      	lsls	r2, r3
 8003ee0:	4b17      	ldr	r3, [pc, #92]	; (8003f40 <xTaskRemoveFromEventList+0xb0>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	4a16      	ldr	r2, [pc, #88]	; (8003f40 <xTaskRemoveFromEventList+0xb0>)
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eee:	4613      	mov	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4a13      	ldr	r2, [pc, #76]	; (8003f44 <xTaskRemoveFromEventList+0xb4>)
 8003ef8:	441a      	add	r2, r3
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	3304      	adds	r3, #4
 8003efe:	4619      	mov	r1, r3
 8003f00:	4610      	mov	r0, r2
 8003f02:	f7fe fe0a 	bl	8002b1a <vListInsertEnd>
 8003f06:	e005      	b.n	8003f14 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	3318      	adds	r3, #24
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	480e      	ldr	r0, [pc, #56]	; (8003f48 <xTaskRemoveFromEventList+0xb8>)
 8003f10:	f7fe fe03 	bl	8002b1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f18:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <xTaskRemoveFromEventList+0xbc>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d905      	bls.n	8003f2e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f22:	2301      	movs	r3, #1
 8003f24:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f26:	4b0a      	ldr	r3, [pc, #40]	; (8003f50 <xTaskRemoveFromEventList+0xc0>)
 8003f28:	2201      	movs	r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	e001      	b.n	8003f32 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003f32:	697b      	ldr	r3, [r7, #20]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	200007fc 	.word	0x200007fc
 8003f40:	200007dc 	.word	0x200007dc
 8003f44:	200006d8 	.word	0x200006d8
 8003f48:	20000794 	.word	0x20000794
 8003f4c:	200006d4 	.word	0x200006d4
 8003f50:	200007e8 	.word	0x200007e8

08003f54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <vTaskInternalSetTimeOutState+0x24>)
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f64:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <vTaskInternalSetTimeOutState+0x28>)
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	605a      	str	r2, [r3, #4]
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	200007ec 	.word	0x200007ec
 8003f7c:	200007d8 	.word	0x200007d8

08003f80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10a      	bne.n	8003fa6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f94:	f383 8811 	msr	BASEPRI, r3
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	613b      	str	r3, [r7, #16]
}
 8003fa2:	bf00      	nop
 8003fa4:	e7fe      	b.n	8003fa4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10a      	bne.n	8003fc2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	60fb      	str	r3, [r7, #12]
}
 8003fbe:	bf00      	nop
 8003fc0:	e7fe      	b.n	8003fc0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003fc2:	f000 ff27 	bl	8004e14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003fc6:	4b1d      	ldr	r3, [pc, #116]	; (800403c <xTaskCheckForTimeOut+0xbc>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fde:	d102      	bne.n	8003fe6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61fb      	str	r3, [r7, #28]
 8003fe4:	e023      	b.n	800402e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	4b15      	ldr	r3, [pc, #84]	; (8004040 <xTaskCheckForTimeOut+0xc0>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d007      	beq.n	8004002 <xTaskCheckForTimeOut+0x82>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d302      	bcc.n	8004002 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	61fb      	str	r3, [r7, #28]
 8004000:	e015      	b.n	800402e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	429a      	cmp	r2, r3
 800400a:	d20b      	bcs.n	8004024 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	1ad2      	subs	r2, r2, r3
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7ff ff9b 	bl	8003f54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800401e:	2300      	movs	r3, #0
 8004020:	61fb      	str	r3, [r7, #28]
 8004022:	e004      	b.n	800402e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800402a:	2301      	movs	r3, #1
 800402c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800402e:	f000 ff21 	bl	8004e74 <vPortExitCritical>

	return xReturn;
 8004032:	69fb      	ldr	r3, [r7, #28]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3720      	adds	r7, #32
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	200007d8 	.word	0x200007d8
 8004040:	200007ec 	.word	0x200007ec

08004044 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004048:	4b03      	ldr	r3, [pc, #12]	; (8004058 <vTaskMissedYield+0x14>)
 800404a:	2201      	movs	r2, #1
 800404c:	601a      	str	r2, [r3, #0]
}
 800404e:	bf00      	nop
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	200007e8 	.word	0x200007e8

0800405c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004064:	f000 f852 	bl	800410c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004068:	4b06      	ldr	r3, [pc, #24]	; (8004084 <prvIdleTask+0x28>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d9f9      	bls.n	8004064 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004070:	4b05      	ldr	r3, [pc, #20]	; (8004088 <prvIdleTask+0x2c>)
 8004072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004080:	e7f0      	b.n	8004064 <prvIdleTask+0x8>
 8004082:	bf00      	nop
 8004084:	200006d8 	.word	0x200006d8
 8004088:	e000ed04 	.word	0xe000ed04

0800408c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004092:	2300      	movs	r3, #0
 8004094:	607b      	str	r3, [r7, #4]
 8004096:	e00c      	b.n	80040b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4a12      	ldr	r2, [pc, #72]	; (80040ec <prvInitialiseTaskLists+0x60>)
 80040a4:	4413      	add	r3, r2
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fe fd0a 	bl	8002ac0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3301      	adds	r3, #1
 80040b0:	607b      	str	r3, [r7, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b06      	cmp	r3, #6
 80040b6:	d9ef      	bls.n	8004098 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80040b8:	480d      	ldr	r0, [pc, #52]	; (80040f0 <prvInitialiseTaskLists+0x64>)
 80040ba:	f7fe fd01 	bl	8002ac0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80040be:	480d      	ldr	r0, [pc, #52]	; (80040f4 <prvInitialiseTaskLists+0x68>)
 80040c0:	f7fe fcfe 	bl	8002ac0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80040c4:	480c      	ldr	r0, [pc, #48]	; (80040f8 <prvInitialiseTaskLists+0x6c>)
 80040c6:	f7fe fcfb 	bl	8002ac0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80040ca:	480c      	ldr	r0, [pc, #48]	; (80040fc <prvInitialiseTaskLists+0x70>)
 80040cc:	f7fe fcf8 	bl	8002ac0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80040d0:	480b      	ldr	r0, [pc, #44]	; (8004100 <prvInitialiseTaskLists+0x74>)
 80040d2:	f7fe fcf5 	bl	8002ac0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80040d6:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <prvInitialiseTaskLists+0x78>)
 80040d8:	4a05      	ldr	r2, [pc, #20]	; (80040f0 <prvInitialiseTaskLists+0x64>)
 80040da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80040dc:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <prvInitialiseTaskLists+0x7c>)
 80040de:	4a05      	ldr	r2, [pc, #20]	; (80040f4 <prvInitialiseTaskLists+0x68>)
 80040e0:	601a      	str	r2, [r3, #0]
}
 80040e2:	bf00      	nop
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	200006d8 	.word	0x200006d8
 80040f0:	20000764 	.word	0x20000764
 80040f4:	20000778 	.word	0x20000778
 80040f8:	20000794 	.word	0x20000794
 80040fc:	200007a8 	.word	0x200007a8
 8004100:	200007c0 	.word	0x200007c0
 8004104:	2000078c 	.word	0x2000078c
 8004108:	20000790 	.word	0x20000790

0800410c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004112:	e019      	b.n	8004148 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004114:	f000 fe7e 	bl	8004e14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004118:	4b10      	ldr	r3, [pc, #64]	; (800415c <prvCheckTasksWaitingTermination+0x50>)
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3304      	adds	r3, #4
 8004124:	4618      	mov	r0, r3
 8004126:	f7fe fd55 	bl	8002bd4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800412a:	4b0d      	ldr	r3, [pc, #52]	; (8004160 <prvCheckTasksWaitingTermination+0x54>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3b01      	subs	r3, #1
 8004130:	4a0b      	ldr	r2, [pc, #44]	; (8004160 <prvCheckTasksWaitingTermination+0x54>)
 8004132:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004134:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <prvCheckTasksWaitingTermination+0x58>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3b01      	subs	r3, #1
 800413a:	4a0a      	ldr	r2, [pc, #40]	; (8004164 <prvCheckTasksWaitingTermination+0x58>)
 800413c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800413e:	f000 fe99 	bl	8004e74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f810 	bl	8004168 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004148:	4b06      	ldr	r3, [pc, #24]	; (8004164 <prvCheckTasksWaitingTermination+0x58>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1e1      	bne.n	8004114 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004150:	bf00      	nop
 8004152:	bf00      	nop
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	200007a8 	.word	0x200007a8
 8004160:	200007d4 	.word	0x200007d4
 8004164:	200007bc 	.word	0x200007bc

08004168 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004176:	2b00      	cmp	r3, #0
 8004178:	d108      	bne.n	800418c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417e:	4618      	mov	r0, r3
 8004180:	f001 f836 	bl	80051f0 <vPortFree>
				vPortFree( pxTCB );
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f001 f833 	bl	80051f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800418a:	e018      	b.n	80041be <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004192:	2b01      	cmp	r3, #1
 8004194:	d103      	bne.n	800419e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f001 f82a 	bl	80051f0 <vPortFree>
	}
 800419c:	e00f      	b.n	80041be <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d00a      	beq.n	80041be <prvDeleteTCB+0x56>
	__asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	60fb      	str	r3, [r7, #12]
}
 80041ba:	bf00      	nop
 80041bc:	e7fe      	b.n	80041bc <prvDeleteTCB+0x54>
	}
 80041be:	bf00      	nop
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041ce:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <prvResetNextTaskUnblockTime+0x38>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d104      	bne.n	80041e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80041d8:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <prvResetNextTaskUnblockTime+0x3c>)
 80041da:	f04f 32ff 	mov.w	r2, #4294967295
 80041de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80041e0:	e008      	b.n	80041f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041e2:	4b07      	ldr	r3, [pc, #28]	; (8004200 <prvResetNextTaskUnblockTime+0x38>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	4a04      	ldr	r2, [pc, #16]	; (8004204 <prvResetNextTaskUnblockTime+0x3c>)
 80041f2:	6013      	str	r3, [r2, #0]
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	2000078c 	.word	0x2000078c
 8004204:	200007f4 	.word	0x200007f4

08004208 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800420e:	4b0b      	ldr	r3, [pc, #44]	; (800423c <xTaskGetSchedulerState+0x34>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d102      	bne.n	800421c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004216:	2301      	movs	r3, #1
 8004218:	607b      	str	r3, [r7, #4]
 800421a:	e008      	b.n	800422e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800421c:	4b08      	ldr	r3, [pc, #32]	; (8004240 <xTaskGetSchedulerState+0x38>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d102      	bne.n	800422a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004224:	2302      	movs	r3, #2
 8004226:	607b      	str	r3, [r7, #4]
 8004228:	e001      	b.n	800422e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800422a:	2300      	movs	r3, #0
 800422c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800422e:	687b      	ldr	r3, [r7, #4]
	}
 8004230:	4618      	mov	r0, r3
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	200007e0 	.word	0x200007e0
 8004240:	200007fc 	.word	0x200007fc

08004244 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004250:	2300      	movs	r3, #0
 8004252:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d06e      	beq.n	8004338 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800425a:	4b3a      	ldr	r3, [pc, #232]	; (8004344 <xTaskPriorityDisinherit+0x100>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	429a      	cmp	r2, r3
 8004262:	d00a      	beq.n	800427a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	60fb      	str	r3, [r7, #12]
}
 8004276:	bf00      	nop
 8004278:	e7fe      	b.n	8004278 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10a      	bne.n	8004298 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	60bb      	str	r3, [r7, #8]
}
 8004294:	bf00      	nop
 8004296:	e7fe      	b.n	8004296 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800429c:	1e5a      	subs	r2, r3, #1
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d044      	beq.n	8004338 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d140      	bne.n	8004338 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	3304      	adds	r3, #4
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fe fc8a 	bl	8002bd4 <uxListRemove>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d115      	bne.n	80042f2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ca:	491f      	ldr	r1, [pc, #124]	; (8004348 <xTaskPriorityDisinherit+0x104>)
 80042cc:	4613      	mov	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10a      	bne.n	80042f2 <xTaskPriorityDisinherit+0xae>
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	2201      	movs	r2, #1
 80042e2:	fa02 f303 	lsl.w	r3, r2, r3
 80042e6:	43da      	mvns	r2, r3
 80042e8:	4b18      	ldr	r3, [pc, #96]	; (800434c <xTaskPriorityDisinherit+0x108>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4013      	ands	r3, r2
 80042ee:	4a17      	ldr	r2, [pc, #92]	; (800434c <xTaskPriorityDisinherit+0x108>)
 80042f0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fe:	f1c3 0207 	rsb	r2, r3, #7
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430a:	2201      	movs	r2, #1
 800430c:	409a      	lsls	r2, r3
 800430e:	4b0f      	ldr	r3, [pc, #60]	; (800434c <xTaskPriorityDisinherit+0x108>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4313      	orrs	r3, r2
 8004314:	4a0d      	ldr	r2, [pc, #52]	; (800434c <xTaskPriorityDisinherit+0x108>)
 8004316:	6013      	str	r3, [r2, #0]
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431c:	4613      	mov	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4a08      	ldr	r2, [pc, #32]	; (8004348 <xTaskPriorityDisinherit+0x104>)
 8004326:	441a      	add	r2, r3
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	3304      	adds	r3, #4
 800432c:	4619      	mov	r1, r3
 800432e:	4610      	mov	r0, r2
 8004330:	f7fe fbf3 	bl	8002b1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004334:	2301      	movs	r3, #1
 8004336:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004338:	697b      	ldr	r3, [r7, #20]
	}
 800433a:	4618      	mov	r0, r3
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	200006d4 	.word	0x200006d4
 8004348:	200006d8 	.word	0x200006d8
 800434c:	200007dc 	.word	0x200007dc

08004350 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800435a:	4b29      	ldr	r3, [pc, #164]	; (8004400 <prvAddCurrentTaskToDelayedList+0xb0>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004360:	4b28      	ldr	r3, [pc, #160]	; (8004404 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3304      	adds	r3, #4
 8004366:	4618      	mov	r0, r3
 8004368:	f7fe fc34 	bl	8002bd4 <uxListRemove>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10b      	bne.n	800438a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004372:	4b24      	ldr	r3, [pc, #144]	; (8004404 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004378:	2201      	movs	r2, #1
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	43da      	mvns	r2, r3
 8004380:	4b21      	ldr	r3, [pc, #132]	; (8004408 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4013      	ands	r3, r2
 8004386:	4a20      	ldr	r2, [pc, #128]	; (8004408 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004388:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004390:	d10a      	bne.n	80043a8 <prvAddCurrentTaskToDelayedList+0x58>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d007      	beq.n	80043a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004398:	4b1a      	ldr	r3, [pc, #104]	; (8004404 <prvAddCurrentTaskToDelayedList+0xb4>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3304      	adds	r3, #4
 800439e:	4619      	mov	r1, r3
 80043a0:	481a      	ldr	r0, [pc, #104]	; (800440c <prvAddCurrentTaskToDelayedList+0xbc>)
 80043a2:	f7fe fbba 	bl	8002b1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80043a6:	e026      	b.n	80043f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4413      	add	r3, r2
 80043ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80043b0:	4b14      	ldr	r3, [pc, #80]	; (8004404 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d209      	bcs.n	80043d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043c0:	4b13      	ldr	r3, [pc, #76]	; (8004410 <prvAddCurrentTaskToDelayedList+0xc0>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	4b0f      	ldr	r3, [pc, #60]	; (8004404 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3304      	adds	r3, #4
 80043ca:	4619      	mov	r1, r3
 80043cc:	4610      	mov	r0, r2
 80043ce:	f7fe fbc8 	bl	8002b62 <vListInsert>
}
 80043d2:	e010      	b.n	80043f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043d4:	4b0f      	ldr	r3, [pc, #60]	; (8004414 <prvAddCurrentTaskToDelayedList+0xc4>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b0a      	ldr	r3, [pc, #40]	; (8004404 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3304      	adds	r3, #4
 80043de:	4619      	mov	r1, r3
 80043e0:	4610      	mov	r0, r2
 80043e2:	f7fe fbbe 	bl	8002b62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043e6:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <prvAddCurrentTaskToDelayedList+0xc8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d202      	bcs.n	80043f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80043f0:	4a09      	ldr	r2, [pc, #36]	; (8004418 <prvAddCurrentTaskToDelayedList+0xc8>)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	6013      	str	r3, [r2, #0]
}
 80043f6:	bf00      	nop
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	200007d8 	.word	0x200007d8
 8004404:	200006d4 	.word	0x200006d4
 8004408:	200007dc 	.word	0x200007dc
 800440c:	200007c0 	.word	0x200007c0
 8004410:	20000790 	.word	0x20000790
 8004414:	2000078c 	.word	0x2000078c
 8004418:	200007f4 	.word	0x200007f4

0800441c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08a      	sub	sp, #40	; 0x28
 8004420:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004422:	2300      	movs	r3, #0
 8004424:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004426:	f000 fb85 	bl	8004b34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800442a:	4b1c      	ldr	r3, [pc, #112]	; (800449c <xTimerCreateTimerTask+0x80>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d021      	beq.n	8004476 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004432:	2300      	movs	r3, #0
 8004434:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004436:	2300      	movs	r3, #0
 8004438:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800443a:	1d3a      	adds	r2, r7, #4
 800443c:	f107 0108 	add.w	r1, r7, #8
 8004440:	f107 030c 	add.w	r3, r7, #12
 8004444:	4618      	mov	r0, r3
 8004446:	f7fc f859 	bl	80004fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	9202      	str	r2, [sp, #8]
 8004452:	9301      	str	r3, [sp, #4]
 8004454:	2306      	movs	r3, #6
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	2300      	movs	r3, #0
 800445a:	460a      	mov	r2, r1
 800445c:	4910      	ldr	r1, [pc, #64]	; (80044a0 <xTimerCreateTimerTask+0x84>)
 800445e:	4811      	ldr	r0, [pc, #68]	; (80044a4 <xTimerCreateTimerTask+0x88>)
 8004460:	f7ff f8ca 	bl	80035f8 <xTaskCreateStatic>
 8004464:	4603      	mov	r3, r0
 8004466:	4a10      	ldr	r2, [pc, #64]	; (80044a8 <xTimerCreateTimerTask+0x8c>)
 8004468:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800446a:	4b0f      	ldr	r3, [pc, #60]	; (80044a8 <xTimerCreateTimerTask+0x8c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004472:	2301      	movs	r3, #1
 8004474:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10a      	bne.n	8004492 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800447c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	613b      	str	r3, [r7, #16]
}
 800448e:	bf00      	nop
 8004490:	e7fe      	b.n	8004490 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004492:	697b      	ldr	r3, [r7, #20]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	20000830 	.word	0x20000830
 80044a0:	080054e8 	.word	0x080054e8
 80044a4:	08004715 	.word	0x08004715
 80044a8:	20000834 	.word	0x20000834

080044ac <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af02      	add	r7, sp, #8
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80044ba:	2028      	movs	r0, #40	; 0x28
 80044bc:	f000 fdcc 	bl	8005058 <pvPortMalloc>
 80044c0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00d      	beq.n	80044e4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	9301      	str	r3, [sp, #4]
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	68b9      	ldr	r1, [r7, #8]
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 f843 	bl	800456a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80044e4:	697b      	ldr	r3, [r7, #20]
	}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3718      	adds	r7, #24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b08a      	sub	sp, #40	; 0x28
 80044f2:	af02      	add	r7, sp, #8
 80044f4:	60f8      	str	r0, [r7, #12]
 80044f6:	60b9      	str	r1, [r7, #8]
 80044f8:	607a      	str	r2, [r7, #4]
 80044fa:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80044fc:	2328      	movs	r3, #40	; 0x28
 80044fe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	2b28      	cmp	r3, #40	; 0x28
 8004504:	d00a      	beq.n	800451c <xTimerCreateStatic+0x2e>
	__asm volatile
 8004506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	61bb      	str	r3, [r7, #24]
}
 8004518:	bf00      	nop
 800451a:	e7fe      	b.n	800451a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800451c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800451e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10a      	bne.n	800453a <xTimerCreateStatic+0x4c>
	__asm volatile
 8004524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	617b      	str	r3, [r7, #20]
}
 8004536:	bf00      	nop
 8004538:	e7fe      	b.n	8004538 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800453a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00d      	beq.n	8004560 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	9301      	str	r3, [sp, #4]
 8004550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	68b9      	ldr	r1, [r7, #8]
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 f805 	bl	800456a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8004560:	69fb      	ldr	r3, [r7, #28]
	}
 8004562:	4618      	mov	r0, r3
 8004564:	3720      	adds	r7, #32
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b086      	sub	sp, #24
 800456e:	af00      	add	r7, sp, #0
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	607a      	str	r2, [r7, #4]
 8004576:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10a      	bne.n	8004594 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	617b      	str	r3, [r7, #20]
}
 8004590:	bf00      	nop
 8004592:	e7fe      	b.n	8004592 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	2b00      	cmp	r3, #0
 8004598:	d01e      	beq.n	80045d8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800459a:	f000 facb 	bl	8004b34 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	6a3a      	ldr	r2, [r7, #32]
 80045b4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	3304      	adds	r3, #4
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fe faa0 	bl	8002b00 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d008      	beq.n	80045d8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045cc:	f043 0304 	orr.w	r3, r3, #4
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80045d8:	bf00      	nop
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08a      	sub	sp, #40	; 0x28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
 80045ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10a      	bne.n	800460e <xTimerGenericCommand+0x2e>
	__asm volatile
 80045f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	623b      	str	r3, [r7, #32]
}
 800460a:	bf00      	nop
 800460c:	e7fe      	b.n	800460c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800460e:	4b1a      	ldr	r3, [pc, #104]	; (8004678 <xTimerGenericCommand+0x98>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d02a      	beq.n	800466c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b05      	cmp	r3, #5
 8004626:	dc18      	bgt.n	800465a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004628:	f7ff fdee 	bl	8004208 <xTaskGetSchedulerState>
 800462c:	4603      	mov	r3, r0
 800462e:	2b02      	cmp	r3, #2
 8004630:	d109      	bne.n	8004646 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004632:	4b11      	ldr	r3, [pc, #68]	; (8004678 <xTimerGenericCommand+0x98>)
 8004634:	6818      	ldr	r0, [r3, #0]
 8004636:	f107 0114 	add.w	r1, r7, #20
 800463a:	2300      	movs	r3, #0
 800463c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800463e:	f7fe fbf3 	bl	8002e28 <xQueueGenericSend>
 8004642:	6278      	str	r0, [r7, #36]	; 0x24
 8004644:	e012      	b.n	800466c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004646:	4b0c      	ldr	r3, [pc, #48]	; (8004678 <xTimerGenericCommand+0x98>)
 8004648:	6818      	ldr	r0, [r3, #0]
 800464a:	f107 0114 	add.w	r1, r7, #20
 800464e:	2300      	movs	r3, #0
 8004650:	2200      	movs	r2, #0
 8004652:	f7fe fbe9 	bl	8002e28 <xQueueGenericSend>
 8004656:	6278      	str	r0, [r7, #36]	; 0x24
 8004658:	e008      	b.n	800466c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800465a:	4b07      	ldr	r3, [pc, #28]	; (8004678 <xTimerGenericCommand+0x98>)
 800465c:	6818      	ldr	r0, [r3, #0]
 800465e:	f107 0114 	add.w	r1, r7, #20
 8004662:	2300      	movs	r3, #0
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	f7fe fcdd 	bl	8003024 <xQueueGenericSendFromISR>
 800466a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800466e:	4618      	mov	r0, r3
 8004670:	3728      	adds	r7, #40	; 0x28
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20000830 	.word	0x20000830

0800467c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b088      	sub	sp, #32
 8004680:	af02      	add	r7, sp, #8
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004686:	4b22      	ldr	r3, [pc, #136]	; (8004710 <prvProcessExpiredTimer+0x94>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	3304      	adds	r3, #4
 8004694:	4618      	mov	r0, r3
 8004696:	f7fe fa9d 	bl	8002bd4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d022      	beq.n	80046ee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	699a      	ldr	r2, [r3, #24]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	18d1      	adds	r1, r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	6978      	ldr	r0, [r7, #20]
 80046b6:	f000 f8d1 	bl	800485c <prvInsertTimerInActiveList>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01f      	beq.n	8004700 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046c0:	2300      	movs	r3, #0
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	2300      	movs	r3, #0
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	2100      	movs	r1, #0
 80046ca:	6978      	ldr	r0, [r7, #20]
 80046cc:	f7ff ff88 	bl	80045e0 <xTimerGenericCommand>
 80046d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d113      	bne.n	8004700 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	60fb      	str	r3, [r7, #12]
}
 80046ea:	bf00      	nop
 80046ec:	e7fe      	b.n	80046ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046f4:	f023 0301 	bic.w	r3, r3, #1
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	6978      	ldr	r0, [r7, #20]
 8004706:	4798      	blx	r3
}
 8004708:	bf00      	nop
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	20000828 	.word	0x20000828

08004714 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800471c:	f107 0308 	add.w	r3, r7, #8
 8004720:	4618      	mov	r0, r3
 8004722:	f000 f857 	bl	80047d4 <prvGetNextExpireTime>
 8004726:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	4619      	mov	r1, r3
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 f803 	bl	8004738 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004732:	f000 f8d5 	bl	80048e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004736:	e7f1      	b.n	800471c <prvTimerTask+0x8>

08004738 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004742:	f7ff f987 	bl	8003a54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004746:	f107 0308 	add.w	r3, r7, #8
 800474a:	4618      	mov	r0, r3
 800474c:	f000 f866 	bl	800481c <prvSampleTimeNow>
 8004750:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d130      	bne.n	80047ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10a      	bne.n	8004774 <prvProcessTimerOrBlockTask+0x3c>
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	429a      	cmp	r2, r3
 8004764:	d806      	bhi.n	8004774 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004766:	f7ff f983 	bl	8003a70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800476a:	68f9      	ldr	r1, [r7, #12]
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7ff ff85 	bl	800467c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004772:	e024      	b.n	80047be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d008      	beq.n	800478c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800477a:	4b13      	ldr	r3, [pc, #76]	; (80047c8 <prvProcessTimerOrBlockTask+0x90>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <prvProcessTimerOrBlockTask+0x50>
 8004784:	2301      	movs	r3, #1
 8004786:	e000      	b.n	800478a <prvProcessTimerOrBlockTask+0x52>
 8004788:	2300      	movs	r3, #0
 800478a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800478c:	4b0f      	ldr	r3, [pc, #60]	; (80047cc <prvProcessTimerOrBlockTask+0x94>)
 800478e:	6818      	ldr	r0, [r3, #0]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	4619      	mov	r1, r3
 800479a:	f7fe fef9 	bl	8003590 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800479e:	f7ff f967 	bl	8003a70 <xTaskResumeAll>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10a      	bne.n	80047be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80047a8:	4b09      	ldr	r3, [pc, #36]	; (80047d0 <prvProcessTimerOrBlockTask+0x98>)
 80047aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	f3bf 8f6f 	isb	sy
}
 80047b8:	e001      	b.n	80047be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80047ba:	f7ff f959 	bl	8003a70 <xTaskResumeAll>
}
 80047be:	bf00      	nop
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	2000082c 	.word	0x2000082c
 80047cc:	20000830 	.word	0x20000830
 80047d0:	e000ed04 	.word	0xe000ed04

080047d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80047dc:	4b0e      	ldr	r3, [pc, #56]	; (8004818 <prvGetNextExpireTime+0x44>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <prvGetNextExpireTime+0x16>
 80047e6:	2201      	movs	r2, #1
 80047e8:	e000      	b.n	80047ec <prvGetNextExpireTime+0x18>
 80047ea:	2200      	movs	r2, #0
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d105      	bne.n	8004804 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047f8:	4b07      	ldr	r3, [pc, #28]	; (8004818 <prvGetNextExpireTime+0x44>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	60fb      	str	r3, [r7, #12]
 8004802:	e001      	b.n	8004808 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004808:	68fb      	ldr	r3, [r7, #12]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	20000828 	.word	0x20000828

0800481c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004824:	f7ff f9c0 	bl	8003ba8 <xTaskGetTickCount>
 8004828:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800482a:	4b0b      	ldr	r3, [pc, #44]	; (8004858 <prvSampleTimeNow+0x3c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	429a      	cmp	r2, r3
 8004832:	d205      	bcs.n	8004840 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004834:	f000 f91a 	bl	8004a6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	e002      	b.n	8004846 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004846:	4a04      	ldr	r2, [pc, #16]	; (8004858 <prvSampleTimeNow+0x3c>)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800484c:	68fb      	ldr	r3, [r7, #12]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20000838 	.word	0x20000838

0800485c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
 8004868:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800486a:	2300      	movs	r3, #0
 800486c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	429a      	cmp	r2, r3
 8004880:	d812      	bhi.n	80048a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	1ad2      	subs	r2, r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	429a      	cmp	r2, r3
 800488e:	d302      	bcc.n	8004896 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004890:	2301      	movs	r3, #1
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	e01b      	b.n	80048ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004896:	4b10      	ldr	r3, [pc, #64]	; (80048d8 <prvInsertTimerInActiveList+0x7c>)
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	3304      	adds	r3, #4
 800489e:	4619      	mov	r1, r3
 80048a0:	4610      	mov	r0, r2
 80048a2:	f7fe f95e 	bl	8002b62 <vListInsert>
 80048a6:	e012      	b.n	80048ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d206      	bcs.n	80048be <prvInsertTimerInActiveList+0x62>
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d302      	bcc.n	80048be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80048b8:	2301      	movs	r3, #1
 80048ba:	617b      	str	r3, [r7, #20]
 80048bc:	e007      	b.n	80048ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048be:	4b07      	ldr	r3, [pc, #28]	; (80048dc <prvInsertTimerInActiveList+0x80>)
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	3304      	adds	r3, #4
 80048c6:	4619      	mov	r1, r3
 80048c8:	4610      	mov	r0, r2
 80048ca:	f7fe f94a 	bl	8002b62 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80048ce:	697b      	ldr	r3, [r7, #20]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	2000082c 	.word	0x2000082c
 80048dc:	20000828 	.word	0x20000828

080048e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08c      	sub	sp, #48	; 0x30
 80048e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048e6:	e0ae      	b.n	8004a46 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f2c0 80aa 	blt.w	8004a44 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d004      	beq.n	8004906 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	3304      	adds	r3, #4
 8004900:	4618      	mov	r0, r3
 8004902:	f7fe f967 	bl	8002bd4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004906:	1d3b      	adds	r3, r7, #4
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff ff87 	bl	800481c <prvSampleTimeNow>
 800490e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2b09      	cmp	r3, #9
 8004914:	f200 8097 	bhi.w	8004a46 <prvProcessReceivedCommands+0x166>
 8004918:	a201      	add	r2, pc, #4	; (adr r2, 8004920 <prvProcessReceivedCommands+0x40>)
 800491a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491e:	bf00      	nop
 8004920:	08004949 	.word	0x08004949
 8004924:	08004949 	.word	0x08004949
 8004928:	08004949 	.word	0x08004949
 800492c:	080049bd 	.word	0x080049bd
 8004930:	080049d1 	.word	0x080049d1
 8004934:	08004a1b 	.word	0x08004a1b
 8004938:	08004949 	.word	0x08004949
 800493c:	08004949 	.word	0x08004949
 8004940:	080049bd 	.word	0x080049bd
 8004944:	080049d1 	.word	0x080049d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	b2da      	uxtb	r2, r3
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	18d1      	adds	r1, r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a3a      	ldr	r2, [r7, #32]
 8004966:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004968:	f7ff ff78 	bl	800485c <prvInsertTimerInActiveList>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d069      	beq.n	8004a46 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004978:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b00      	cmp	r3, #0
 8004986:	d05e      	beq.n	8004a46 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	441a      	add	r2, r3
 8004990:	2300      	movs	r3, #0
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	2300      	movs	r3, #0
 8004996:	2100      	movs	r1, #0
 8004998:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800499a:	f7ff fe21 	bl	80045e0 <xTimerGenericCommand>
 800499e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d14f      	bne.n	8004a46 <prvProcessReceivedCommands+0x166>
	__asm volatile
 80049a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049aa:	f383 8811 	msr	BASEPRI, r3
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	61bb      	str	r3, [r7, #24]
}
 80049b8:	bf00      	nop
 80049ba:	e7fe      	b.n	80049ba <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049c2:	f023 0301 	bic.w	r3, r3, #1
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80049ce:	e03a      	b.n	8004a46 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10a      	bne.n	8004a06 <prvProcessReceivedCommands+0x126>
	__asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	617b      	str	r3, [r7, #20]
}
 8004a02:	bf00      	nop
 8004a04:	e7fe      	b.n	8004a04 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	699a      	ldr	r2, [r3, #24]
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	18d1      	adds	r1, r2, r3
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	6a3a      	ldr	r2, [r7, #32]
 8004a12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a14:	f7ff ff22 	bl	800485c <prvInsertTimerInActiveList>
					break;
 8004a18:	e015      	b.n	8004a46 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d103      	bne.n	8004a30 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8004a28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a2a:	f000 fbe1 	bl	80051f0 <vPortFree>
 8004a2e:	e00a      	b.n	8004a46 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a36:	f023 0301 	bic.w	r3, r3, #1
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004a42:	e000      	b.n	8004a46 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004a44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a46:	4b08      	ldr	r3, [pc, #32]	; (8004a68 <prvProcessReceivedCommands+0x188>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f107 0108 	add.w	r1, r7, #8
 8004a4e:	2200      	movs	r2, #0
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fe fb83 	bl	800315c <xQueueReceive>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f47f af45 	bne.w	80048e8 <prvProcessReceivedCommands+0x8>
	}
}
 8004a5e:	bf00      	nop
 8004a60:	bf00      	nop
 8004a62:	3728      	adds	r7, #40	; 0x28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	20000830 	.word	0x20000830

08004a6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b088      	sub	sp, #32
 8004a70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a72:	e048      	b.n	8004b06 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a74:	4b2d      	ldr	r3, [pc, #180]	; (8004b2c <prvSwitchTimerLists+0xc0>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a7e:	4b2b      	ldr	r3, [pc, #172]	; (8004b2c <prvSwitchTimerLists+0xc0>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	3304      	adds	r3, #4
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fe f8a1 	bl	8002bd4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d02e      	beq.n	8004b06 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	4413      	add	r3, r2
 8004ab0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d90e      	bls.n	8004ad8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ac6:	4b19      	ldr	r3, [pc, #100]	; (8004b2c <prvSwitchTimerLists+0xc0>)
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3304      	adds	r3, #4
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	f7fe f846 	bl	8002b62 <vListInsert>
 8004ad6:	e016      	b.n	8004b06 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ad8:	2300      	movs	r3, #0
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	2300      	movs	r3, #0
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f7ff fd7c 	bl	80045e0 <xTimerGenericCommand>
 8004ae8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10a      	bne.n	8004b06 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	603b      	str	r3, [r7, #0]
}
 8004b02:	bf00      	nop
 8004b04:	e7fe      	b.n	8004b04 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b06:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <prvSwitchTimerLists+0xc0>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1b1      	bne.n	8004a74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004b10:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <prvSwitchTimerLists+0xc0>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b16:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <prvSwitchTimerLists+0xc4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a04      	ldr	r2, [pc, #16]	; (8004b2c <prvSwitchTimerLists+0xc0>)
 8004b1c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004b1e:	4a04      	ldr	r2, [pc, #16]	; (8004b30 <prvSwitchTimerLists+0xc4>)
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	6013      	str	r3, [r2, #0]
}
 8004b24:	bf00      	nop
 8004b26:	3718      	adds	r7, #24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	20000828 	.word	0x20000828
 8004b30:	2000082c 	.word	0x2000082c

08004b34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004b3a:	f000 f96b 	bl	8004e14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004b3e:	4b15      	ldr	r3, [pc, #84]	; (8004b94 <prvCheckForValidListAndQueue+0x60>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d120      	bne.n	8004b88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004b46:	4814      	ldr	r0, [pc, #80]	; (8004b98 <prvCheckForValidListAndQueue+0x64>)
 8004b48:	f7fd ffba 	bl	8002ac0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004b4c:	4813      	ldr	r0, [pc, #76]	; (8004b9c <prvCheckForValidListAndQueue+0x68>)
 8004b4e:	f7fd ffb7 	bl	8002ac0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004b52:	4b13      	ldr	r3, [pc, #76]	; (8004ba0 <prvCheckForValidListAndQueue+0x6c>)
 8004b54:	4a10      	ldr	r2, [pc, #64]	; (8004b98 <prvCheckForValidListAndQueue+0x64>)
 8004b56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004b58:	4b12      	ldr	r3, [pc, #72]	; (8004ba4 <prvCheckForValidListAndQueue+0x70>)
 8004b5a:	4a10      	ldr	r2, [pc, #64]	; (8004b9c <prvCheckForValidListAndQueue+0x68>)
 8004b5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004b5e:	2300      	movs	r3, #0
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	4b11      	ldr	r3, [pc, #68]	; (8004ba8 <prvCheckForValidListAndQueue+0x74>)
 8004b64:	4a11      	ldr	r2, [pc, #68]	; (8004bac <prvCheckForValidListAndQueue+0x78>)
 8004b66:	210c      	movs	r1, #12
 8004b68:	200a      	movs	r0, #10
 8004b6a:	f7fe f8c5 	bl	8002cf8 <xQueueGenericCreateStatic>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	4a08      	ldr	r2, [pc, #32]	; (8004b94 <prvCheckForValidListAndQueue+0x60>)
 8004b72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004b74:	4b07      	ldr	r3, [pc, #28]	; (8004b94 <prvCheckForValidListAndQueue+0x60>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d005      	beq.n	8004b88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b7c:	4b05      	ldr	r3, [pc, #20]	; (8004b94 <prvCheckForValidListAndQueue+0x60>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	490b      	ldr	r1, [pc, #44]	; (8004bb0 <prvCheckForValidListAndQueue+0x7c>)
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fe fcda 	bl	800353c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b88:	f000 f974 	bl	8004e74 <vPortExitCritical>
}
 8004b8c:	bf00      	nop
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20000830 	.word	0x20000830
 8004b98:	20000800 	.word	0x20000800
 8004b9c:	20000814 	.word	0x20000814
 8004ba0:	20000828 	.word	0x20000828
 8004ba4:	2000082c 	.word	0x2000082c
 8004ba8:	200008b4 	.word	0x200008b4
 8004bac:	2000083c 	.word	0x2000083c
 8004bb0:	080054f0 	.word	0x080054f0

08004bb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	3b04      	subs	r3, #4
 8004bc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004bcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	3b04      	subs	r3, #4
 8004bd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f023 0201 	bic.w	r2, r3, #1
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	3b04      	subs	r3, #4
 8004be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004be4:	4a0c      	ldr	r2, [pc, #48]	; (8004c18 <pxPortInitialiseStack+0x64>)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	3b14      	subs	r3, #20
 8004bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	3b04      	subs	r3, #4
 8004bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f06f 0202 	mvn.w	r2, #2
 8004c02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	3b20      	subs	r3, #32
 8004c08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	08004c1d 	.word	0x08004c1d

08004c1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004c22:	2300      	movs	r3, #0
 8004c24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c26:	4b12      	ldr	r3, [pc, #72]	; (8004c70 <prvTaskExitError+0x54>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2e:	d00a      	beq.n	8004c46 <prvTaskExitError+0x2a>
	__asm volatile
 8004c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c34:	f383 8811 	msr	BASEPRI, r3
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	60fb      	str	r3, [r7, #12]
}
 8004c42:	bf00      	nop
 8004c44:	e7fe      	b.n	8004c44 <prvTaskExitError+0x28>
	__asm volatile
 8004c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4a:	f383 8811 	msr	BASEPRI, r3
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f3bf 8f4f 	dsb	sy
 8004c56:	60bb      	str	r3, [r7, #8]
}
 8004c58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c5a:	bf00      	nop
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0fc      	beq.n	8004c5c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c62:	bf00      	nop
 8004c64:	bf00      	nop
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	2000000c 	.word	0x2000000c
	...

08004c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c80:	4b07      	ldr	r3, [pc, #28]	; (8004ca0 <pxCurrentTCBConst2>)
 8004c82:	6819      	ldr	r1, [r3, #0]
 8004c84:	6808      	ldr	r0, [r1, #0]
 8004c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c8a:	f380 8809 	msr	PSP, r0
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	f04f 0000 	mov.w	r0, #0
 8004c96:	f380 8811 	msr	BASEPRI, r0
 8004c9a:	4770      	bx	lr
 8004c9c:	f3af 8000 	nop.w

08004ca0 <pxCurrentTCBConst2>:
 8004ca0:	200006d4 	.word	0x200006d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ca4:	bf00      	nop
 8004ca6:	bf00      	nop

08004ca8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ca8:	4808      	ldr	r0, [pc, #32]	; (8004ccc <prvPortStartFirstTask+0x24>)
 8004caa:	6800      	ldr	r0, [r0, #0]
 8004cac:	6800      	ldr	r0, [r0, #0]
 8004cae:	f380 8808 	msr	MSP, r0
 8004cb2:	f04f 0000 	mov.w	r0, #0
 8004cb6:	f380 8814 	msr	CONTROL, r0
 8004cba:	b662      	cpsie	i
 8004cbc:	b661      	cpsie	f
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	df00      	svc	0
 8004cc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004cca:	bf00      	nop
 8004ccc:	e000ed08 	.word	0xe000ed08

08004cd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004cd6:	4b46      	ldr	r3, [pc, #280]	; (8004df0 <xPortStartScheduler+0x120>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a46      	ldr	r2, [pc, #280]	; (8004df4 <xPortStartScheduler+0x124>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d10a      	bne.n	8004cf6 <xPortStartScheduler+0x26>
	__asm volatile
 8004ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	613b      	str	r3, [r7, #16]
}
 8004cf2:	bf00      	nop
 8004cf4:	e7fe      	b.n	8004cf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004cf6:	4b3e      	ldr	r3, [pc, #248]	; (8004df0 <xPortStartScheduler+0x120>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a3f      	ldr	r2, [pc, #252]	; (8004df8 <xPortStartScheduler+0x128>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d10a      	bne.n	8004d16 <xPortStartScheduler+0x46>
	__asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	60fb      	str	r3, [r7, #12]
}
 8004d12:	bf00      	nop
 8004d14:	e7fe      	b.n	8004d14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d16:	4b39      	ldr	r3, [pc, #228]	; (8004dfc <xPortStartScheduler+0x12c>)
 8004d18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	22ff      	movs	r2, #255	; 0xff
 8004d26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d30:	78fb      	ldrb	r3, [r7, #3]
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	4b31      	ldr	r3, [pc, #196]	; (8004e00 <xPortStartScheduler+0x130>)
 8004d3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d3e:	4b31      	ldr	r3, [pc, #196]	; (8004e04 <xPortStartScheduler+0x134>)
 8004d40:	2207      	movs	r2, #7
 8004d42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d44:	e009      	b.n	8004d5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004d46:	4b2f      	ldr	r3, [pc, #188]	; (8004e04 <xPortStartScheduler+0x134>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	4a2d      	ldr	r2, [pc, #180]	; (8004e04 <xPortStartScheduler+0x134>)
 8004d4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d5a:	78fb      	ldrb	r3, [r7, #3]
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d62:	2b80      	cmp	r3, #128	; 0x80
 8004d64:	d0ef      	beq.n	8004d46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d66:	4b27      	ldr	r3, [pc, #156]	; (8004e04 <xPortStartScheduler+0x134>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f1c3 0307 	rsb	r3, r3, #7
 8004d6e:	2b04      	cmp	r3, #4
 8004d70:	d00a      	beq.n	8004d88 <xPortStartScheduler+0xb8>
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	60bb      	str	r3, [r7, #8]
}
 8004d84:	bf00      	nop
 8004d86:	e7fe      	b.n	8004d86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d88:	4b1e      	ldr	r3, [pc, #120]	; (8004e04 <xPortStartScheduler+0x134>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	021b      	lsls	r3, r3, #8
 8004d8e:	4a1d      	ldr	r2, [pc, #116]	; (8004e04 <xPortStartScheduler+0x134>)
 8004d90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d92:	4b1c      	ldr	r3, [pc, #112]	; (8004e04 <xPortStartScheduler+0x134>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d9a:	4a1a      	ldr	r2, [pc, #104]	; (8004e04 <xPortStartScheduler+0x134>)
 8004d9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004da6:	4b18      	ldr	r3, [pc, #96]	; (8004e08 <xPortStartScheduler+0x138>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a17      	ldr	r2, [pc, #92]	; (8004e08 <xPortStartScheduler+0x138>)
 8004dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004db0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004db2:	4b15      	ldr	r3, [pc, #84]	; (8004e08 <xPortStartScheduler+0x138>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a14      	ldr	r2, [pc, #80]	; (8004e08 <xPortStartScheduler+0x138>)
 8004db8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004dbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004dbe:	f000 f8dd 	bl	8004f7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004dc2:	4b12      	ldr	r3, [pc, #72]	; (8004e0c <xPortStartScheduler+0x13c>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004dc8:	f000 f8fc 	bl	8004fc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004dcc:	4b10      	ldr	r3, [pc, #64]	; (8004e10 <xPortStartScheduler+0x140>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a0f      	ldr	r2, [pc, #60]	; (8004e10 <xPortStartScheduler+0x140>)
 8004dd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004dd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004dd8:	f7ff ff66 	bl	8004ca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ddc:	f7fe ffac 	bl	8003d38 <vTaskSwitchContext>
	prvTaskExitError();
 8004de0:	f7ff ff1c 	bl	8004c1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3718      	adds	r7, #24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	e000ed00 	.word	0xe000ed00
 8004df4:	410fc271 	.word	0x410fc271
 8004df8:	410fc270 	.word	0x410fc270
 8004dfc:	e000e400 	.word	0xe000e400
 8004e00:	200008fc 	.word	0x200008fc
 8004e04:	20000900 	.word	0x20000900
 8004e08:	e000ed20 	.word	0xe000ed20
 8004e0c:	2000000c 	.word	0x2000000c
 8004e10:	e000ef34 	.word	0xe000ef34

08004e14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
	__asm volatile
 8004e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	607b      	str	r3, [r7, #4]
}
 8004e2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e2e:	4b0f      	ldr	r3, [pc, #60]	; (8004e6c <vPortEnterCritical+0x58>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3301      	adds	r3, #1
 8004e34:	4a0d      	ldr	r2, [pc, #52]	; (8004e6c <vPortEnterCritical+0x58>)
 8004e36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e38:	4b0c      	ldr	r3, [pc, #48]	; (8004e6c <vPortEnterCritical+0x58>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d10f      	bne.n	8004e60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e40:	4b0b      	ldr	r3, [pc, #44]	; (8004e70 <vPortEnterCritical+0x5c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <vPortEnterCritical+0x4c>
	__asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	603b      	str	r3, [r7, #0]
}
 8004e5c:	bf00      	nop
 8004e5e:	e7fe      	b.n	8004e5e <vPortEnterCritical+0x4a>
	}
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	2000000c 	.word	0x2000000c
 8004e70:	e000ed04 	.word	0xe000ed04

08004e74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e7a:	4b12      	ldr	r3, [pc, #72]	; (8004ec4 <vPortExitCritical+0x50>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10a      	bne.n	8004e98 <vPortExitCritical+0x24>
	__asm volatile
 8004e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e86:	f383 8811 	msr	BASEPRI, r3
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	607b      	str	r3, [r7, #4]
}
 8004e94:	bf00      	nop
 8004e96:	e7fe      	b.n	8004e96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e98:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <vPortExitCritical+0x50>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	4a09      	ldr	r2, [pc, #36]	; (8004ec4 <vPortExitCritical+0x50>)
 8004ea0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ea2:	4b08      	ldr	r3, [pc, #32]	; (8004ec4 <vPortExitCritical+0x50>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d105      	bne.n	8004eb6 <vPortExitCritical+0x42>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	f383 8811 	msr	BASEPRI, r3
}
 8004eb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	2000000c 	.word	0x2000000c
	...

08004ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ed0:	f3ef 8009 	mrs	r0, PSP
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	4b15      	ldr	r3, [pc, #84]	; (8004f30 <pxCurrentTCBConst>)
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	f01e 0f10 	tst.w	lr, #16
 8004ee0:	bf08      	it	eq
 8004ee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eea:	6010      	str	r0, [r2, #0]
 8004eec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ef4:	f380 8811 	msr	BASEPRI, r0
 8004ef8:	f3bf 8f4f 	dsb	sy
 8004efc:	f3bf 8f6f 	isb	sy
 8004f00:	f7fe ff1a 	bl	8003d38 <vTaskSwitchContext>
 8004f04:	f04f 0000 	mov.w	r0, #0
 8004f08:	f380 8811 	msr	BASEPRI, r0
 8004f0c:	bc09      	pop	{r0, r3}
 8004f0e:	6819      	ldr	r1, [r3, #0]
 8004f10:	6808      	ldr	r0, [r1, #0]
 8004f12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f16:	f01e 0f10 	tst.w	lr, #16
 8004f1a:	bf08      	it	eq
 8004f1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f20:	f380 8809 	msr	PSP, r0
 8004f24:	f3bf 8f6f 	isb	sy
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	f3af 8000 	nop.w

08004f30 <pxCurrentTCBConst>:
 8004f30:	200006d4 	.word	0x200006d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f34:	bf00      	nop
 8004f36:	bf00      	nop

08004f38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	607b      	str	r3, [r7, #4]
}
 8004f50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f52:	f7fe fe39 	bl	8003bc8 <xTaskIncrementTick>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f5c:	4b06      	ldr	r3, [pc, #24]	; (8004f78 <SysTick_Handler+0x40>)
 8004f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	2300      	movs	r3, #0
 8004f66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	f383 8811 	msr	BASEPRI, r3
}
 8004f6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f70:	bf00      	nop
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	e000ed04 	.word	0xe000ed04

08004f7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f80:	4b0b      	ldr	r3, [pc, #44]	; (8004fb0 <vPortSetupTimerInterrupt+0x34>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f86:	4b0b      	ldr	r3, [pc, #44]	; (8004fb4 <vPortSetupTimerInterrupt+0x38>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f8c:	4b0a      	ldr	r3, [pc, #40]	; (8004fb8 <vPortSetupTimerInterrupt+0x3c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a0a      	ldr	r2, [pc, #40]	; (8004fbc <vPortSetupTimerInterrupt+0x40>)
 8004f92:	fba2 2303 	umull	r2, r3, r2, r3
 8004f96:	099b      	lsrs	r3, r3, #6
 8004f98:	4a09      	ldr	r2, [pc, #36]	; (8004fc0 <vPortSetupTimerInterrupt+0x44>)
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f9e:	4b04      	ldr	r3, [pc, #16]	; (8004fb0 <vPortSetupTimerInterrupt+0x34>)
 8004fa0:	2207      	movs	r2, #7
 8004fa2:	601a      	str	r2, [r3, #0]
}
 8004fa4:	bf00      	nop
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	e000e010 	.word	0xe000e010
 8004fb4:	e000e018 	.word	0xe000e018
 8004fb8:	20000000 	.word	0x20000000
 8004fbc:	10624dd3 	.word	0x10624dd3
 8004fc0:	e000e014 	.word	0xe000e014

08004fc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004fc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004fd4 <vPortEnableVFP+0x10>
 8004fc8:	6801      	ldr	r1, [r0, #0]
 8004fca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004fce:	6001      	str	r1, [r0, #0]
 8004fd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004fd2:	bf00      	nop
 8004fd4:	e000ed88 	.word	0xe000ed88

08004fd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004fde:	f3ef 8305 	mrs	r3, IPSR
 8004fe2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b0f      	cmp	r3, #15
 8004fe8:	d914      	bls.n	8005014 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004fea:	4a17      	ldr	r2, [pc, #92]	; (8005048 <vPortValidateInterruptPriority+0x70>)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4413      	add	r3, r2
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ff4:	4b15      	ldr	r3, [pc, #84]	; (800504c <vPortValidateInterruptPriority+0x74>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	7afa      	ldrb	r2, [r7, #11]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d20a      	bcs.n	8005014 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	607b      	str	r3, [r7, #4]
}
 8005010:	bf00      	nop
 8005012:	e7fe      	b.n	8005012 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005014:	4b0e      	ldr	r3, [pc, #56]	; (8005050 <vPortValidateInterruptPriority+0x78>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800501c:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <vPortValidateInterruptPriority+0x7c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	429a      	cmp	r2, r3
 8005022:	d90a      	bls.n	800503a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	603b      	str	r3, [r7, #0]
}
 8005036:	bf00      	nop
 8005038:	e7fe      	b.n	8005038 <vPortValidateInterruptPriority+0x60>
	}
 800503a:	bf00      	nop
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	e000e3f0 	.word	0xe000e3f0
 800504c:	200008fc 	.word	0x200008fc
 8005050:	e000ed0c 	.word	0xe000ed0c
 8005054:	20000900 	.word	0x20000900

08005058 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b08a      	sub	sp, #40	; 0x28
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005060:	2300      	movs	r3, #0
 8005062:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005064:	f7fe fcf6 	bl	8003a54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005068:	4b5b      	ldr	r3, [pc, #364]	; (80051d8 <pvPortMalloc+0x180>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005070:	f000 f920 	bl	80052b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005074:	4b59      	ldr	r3, [pc, #356]	; (80051dc <pvPortMalloc+0x184>)
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4013      	ands	r3, r2
 800507c:	2b00      	cmp	r3, #0
 800507e:	f040 8093 	bne.w	80051a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d01d      	beq.n	80050c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005088:	2208      	movs	r2, #8
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4413      	add	r3, r2
 800508e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	2b00      	cmp	r3, #0
 8005098:	d014      	beq.n	80050c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f023 0307 	bic.w	r3, r3, #7
 80050a0:	3308      	adds	r3, #8
 80050a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <pvPortMalloc+0x6c>
	__asm volatile
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	617b      	str	r3, [r7, #20]
}
 80050c0:	bf00      	nop
 80050c2:	e7fe      	b.n	80050c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d06e      	beq.n	80051a8 <pvPortMalloc+0x150>
 80050ca:	4b45      	ldr	r3, [pc, #276]	; (80051e0 <pvPortMalloc+0x188>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d869      	bhi.n	80051a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80050d4:	4b43      	ldr	r3, [pc, #268]	; (80051e4 <pvPortMalloc+0x18c>)
 80050d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80050d8:	4b42      	ldr	r3, [pc, #264]	; (80051e4 <pvPortMalloc+0x18c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050de:	e004      	b.n	80050ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d903      	bls.n	80050fc <pvPortMalloc+0xa4>
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1f1      	bne.n	80050e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80050fc:	4b36      	ldr	r3, [pc, #216]	; (80051d8 <pvPortMalloc+0x180>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005102:	429a      	cmp	r2, r3
 8005104:	d050      	beq.n	80051a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2208      	movs	r2, #8
 800510c:	4413      	add	r3, r2
 800510e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	1ad2      	subs	r2, r2, r3
 8005120:	2308      	movs	r3, #8
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	429a      	cmp	r2, r3
 8005126:	d91f      	bls.n	8005168 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4413      	add	r3, r2
 800512e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	f003 0307 	and.w	r3, r3, #7
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <pvPortMalloc+0xf8>
	__asm volatile
 800513a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513e:	f383 8811 	msr	BASEPRI, r3
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	613b      	str	r3, [r7, #16]
}
 800514c:	bf00      	nop
 800514e:	e7fe      	b.n	800514e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	1ad2      	subs	r2, r2, r3
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005162:	69b8      	ldr	r0, [r7, #24]
 8005164:	f000 f908 	bl	8005378 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005168:	4b1d      	ldr	r3, [pc, #116]	; (80051e0 <pvPortMalloc+0x188>)
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	4a1b      	ldr	r2, [pc, #108]	; (80051e0 <pvPortMalloc+0x188>)
 8005174:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005176:	4b1a      	ldr	r3, [pc, #104]	; (80051e0 <pvPortMalloc+0x188>)
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	4b1b      	ldr	r3, [pc, #108]	; (80051e8 <pvPortMalloc+0x190>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	429a      	cmp	r2, r3
 8005180:	d203      	bcs.n	800518a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005182:	4b17      	ldr	r3, [pc, #92]	; (80051e0 <pvPortMalloc+0x188>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a18      	ldr	r2, [pc, #96]	; (80051e8 <pvPortMalloc+0x190>)
 8005188:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	4b13      	ldr	r3, [pc, #76]	; (80051dc <pvPortMalloc+0x184>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	431a      	orrs	r2, r3
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800519e:	4b13      	ldr	r3, [pc, #76]	; (80051ec <pvPortMalloc+0x194>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	3301      	adds	r3, #1
 80051a4:	4a11      	ldr	r2, [pc, #68]	; (80051ec <pvPortMalloc+0x194>)
 80051a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80051a8:	f7fe fc62 	bl	8003a70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	f003 0307 	and.w	r3, r3, #7
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <pvPortMalloc+0x174>
	__asm volatile
 80051b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ba:	f383 8811 	msr	BASEPRI, r3
 80051be:	f3bf 8f6f 	isb	sy
 80051c2:	f3bf 8f4f 	dsb	sy
 80051c6:	60fb      	str	r3, [r7, #12]
}
 80051c8:	bf00      	nop
 80051ca:	e7fe      	b.n	80051ca <pvPortMalloc+0x172>
	return pvReturn;
 80051cc:	69fb      	ldr	r3, [r7, #28]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3728      	adds	r7, #40	; 0x28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	2000450c 	.word	0x2000450c
 80051dc:	20004520 	.word	0x20004520
 80051e0:	20004510 	.word	0x20004510
 80051e4:	20004504 	.word	0x20004504
 80051e8:	20004514 	.word	0x20004514
 80051ec:	20004518 	.word	0x20004518

080051f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d04d      	beq.n	800529e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005202:	2308      	movs	r3, #8
 8005204:	425b      	negs	r3, r3
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	4413      	add	r3, r2
 800520a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	4b24      	ldr	r3, [pc, #144]	; (80052a8 <vPortFree+0xb8>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4013      	ands	r3, r2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10a      	bne.n	8005234 <vPortFree+0x44>
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	60fb      	str	r3, [r7, #12]
}
 8005230:	bf00      	nop
 8005232:	e7fe      	b.n	8005232 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00a      	beq.n	8005252 <vPortFree+0x62>
	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	60bb      	str	r3, [r7, #8]
}
 800524e:	bf00      	nop
 8005250:	e7fe      	b.n	8005250 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	4b14      	ldr	r3, [pc, #80]	; (80052a8 <vPortFree+0xb8>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4013      	ands	r3, r2
 800525c:	2b00      	cmp	r3, #0
 800525e:	d01e      	beq.n	800529e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d11a      	bne.n	800529e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	4b0e      	ldr	r3, [pc, #56]	; (80052a8 <vPortFree+0xb8>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	43db      	mvns	r3, r3
 8005272:	401a      	ands	r2, r3
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005278:	f7fe fbec 	bl	8003a54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	4b0a      	ldr	r3, [pc, #40]	; (80052ac <vPortFree+0xbc>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4413      	add	r3, r2
 8005286:	4a09      	ldr	r2, [pc, #36]	; (80052ac <vPortFree+0xbc>)
 8005288:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800528a:	6938      	ldr	r0, [r7, #16]
 800528c:	f000 f874 	bl	8005378 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005290:	4b07      	ldr	r3, [pc, #28]	; (80052b0 <vPortFree+0xc0>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3301      	adds	r3, #1
 8005296:	4a06      	ldr	r2, [pc, #24]	; (80052b0 <vPortFree+0xc0>)
 8005298:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800529a:	f7fe fbe9 	bl	8003a70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800529e:	bf00      	nop
 80052a0:	3718      	adds	r7, #24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	20004520 	.word	0x20004520
 80052ac:	20004510 	.word	0x20004510
 80052b0:	2000451c 	.word	0x2000451c

080052b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80052ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80052be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80052c0:	4b27      	ldr	r3, [pc, #156]	; (8005360 <prvHeapInit+0xac>)
 80052c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00c      	beq.n	80052e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	3307      	adds	r3, #7
 80052d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 0307 	bic.w	r3, r3, #7
 80052da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	4a1f      	ldr	r2, [pc, #124]	; (8005360 <prvHeapInit+0xac>)
 80052e4:	4413      	add	r3, r2
 80052e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052ec:	4a1d      	ldr	r2, [pc, #116]	; (8005364 <prvHeapInit+0xb0>)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80052f2:	4b1c      	ldr	r3, [pc, #112]	; (8005364 <prvHeapInit+0xb0>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	4413      	add	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005300:	2208      	movs	r2, #8
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	1a9b      	subs	r3, r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0307 	bic.w	r3, r3, #7
 800530e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4a15      	ldr	r2, [pc, #84]	; (8005368 <prvHeapInit+0xb4>)
 8005314:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005316:	4b14      	ldr	r3, [pc, #80]	; (8005368 <prvHeapInit+0xb4>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2200      	movs	r2, #0
 800531c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800531e:	4b12      	ldr	r3, [pc, #72]	; (8005368 <prvHeapInit+0xb4>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	1ad2      	subs	r2, r2, r3
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005334:	4b0c      	ldr	r3, [pc, #48]	; (8005368 <prvHeapInit+0xb4>)
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	4a0a      	ldr	r2, [pc, #40]	; (800536c <prvHeapInit+0xb8>)
 8005342:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	4a09      	ldr	r2, [pc, #36]	; (8005370 <prvHeapInit+0xbc>)
 800534a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800534c:	4b09      	ldr	r3, [pc, #36]	; (8005374 <prvHeapInit+0xc0>)
 800534e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005352:	601a      	str	r2, [r3, #0]
}
 8005354:	bf00      	nop
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	20000904 	.word	0x20000904
 8005364:	20004504 	.word	0x20004504
 8005368:	2000450c 	.word	0x2000450c
 800536c:	20004514 	.word	0x20004514
 8005370:	20004510 	.word	0x20004510
 8005374:	20004520 	.word	0x20004520

08005378 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005380:	4b28      	ldr	r3, [pc, #160]	; (8005424 <prvInsertBlockIntoFreeList+0xac>)
 8005382:	60fb      	str	r3, [r7, #12]
 8005384:	e002      	b.n	800538c <prvInsertBlockIntoFreeList+0x14>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	429a      	cmp	r2, r3
 8005394:	d8f7      	bhi.n	8005386 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	4413      	add	r3, r2
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d108      	bne.n	80053ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	441a      	add	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	441a      	add	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d118      	bne.n	8005400 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	4b15      	ldr	r3, [pc, #84]	; (8005428 <prvInsertBlockIntoFreeList+0xb0>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d00d      	beq.n	80053f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	441a      	add	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	e008      	b.n	8005408 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80053f6:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <prvInsertBlockIntoFreeList+0xb0>)
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	e003      	b.n	8005408 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	429a      	cmp	r2, r3
 800540e:	d002      	beq.n	8005416 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005416:	bf00      	nop
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	20004504 	.word	0x20004504
 8005428:	2000450c 	.word	0x2000450c

0800542c <__libc_init_array>:
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	4d0d      	ldr	r5, [pc, #52]	; (8005464 <__libc_init_array+0x38>)
 8005430:	4c0d      	ldr	r4, [pc, #52]	; (8005468 <__libc_init_array+0x3c>)
 8005432:	1b64      	subs	r4, r4, r5
 8005434:	10a4      	asrs	r4, r4, #2
 8005436:	2600      	movs	r6, #0
 8005438:	42a6      	cmp	r6, r4
 800543a:	d109      	bne.n	8005450 <__libc_init_array+0x24>
 800543c:	4d0b      	ldr	r5, [pc, #44]	; (800546c <__libc_init_array+0x40>)
 800543e:	4c0c      	ldr	r4, [pc, #48]	; (8005470 <__libc_init_array+0x44>)
 8005440:	f000 f82e 	bl	80054a0 <_init>
 8005444:	1b64      	subs	r4, r4, r5
 8005446:	10a4      	asrs	r4, r4, #2
 8005448:	2600      	movs	r6, #0
 800544a:	42a6      	cmp	r6, r4
 800544c:	d105      	bne.n	800545a <__libc_init_array+0x2e>
 800544e:	bd70      	pop	{r4, r5, r6, pc}
 8005450:	f855 3b04 	ldr.w	r3, [r5], #4
 8005454:	4798      	blx	r3
 8005456:	3601      	adds	r6, #1
 8005458:	e7ee      	b.n	8005438 <__libc_init_array+0xc>
 800545a:	f855 3b04 	ldr.w	r3, [r5], #4
 800545e:	4798      	blx	r3
 8005460:	3601      	adds	r6, #1
 8005462:	e7f2      	b.n	800544a <__libc_init_array+0x1e>
 8005464:	08005518 	.word	0x08005518
 8005468:	08005518 	.word	0x08005518
 800546c:	08005518 	.word	0x08005518
 8005470:	0800551c 	.word	0x0800551c

08005474 <memcpy>:
 8005474:	440a      	add	r2, r1
 8005476:	4291      	cmp	r1, r2
 8005478:	f100 33ff 	add.w	r3, r0, #4294967295
 800547c:	d100      	bne.n	8005480 <memcpy+0xc>
 800547e:	4770      	bx	lr
 8005480:	b510      	push	{r4, lr}
 8005482:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005486:	f803 4f01 	strb.w	r4, [r3, #1]!
 800548a:	4291      	cmp	r1, r2
 800548c:	d1f9      	bne.n	8005482 <memcpy+0xe>
 800548e:	bd10      	pop	{r4, pc}

08005490 <memset>:
 8005490:	4402      	add	r2, r0
 8005492:	4603      	mov	r3, r0
 8005494:	4293      	cmp	r3, r2
 8005496:	d100      	bne.n	800549a <memset+0xa>
 8005498:	4770      	bx	lr
 800549a:	f803 1b01 	strb.w	r1, [r3], #1
 800549e:	e7f9      	b.n	8005494 <memset+0x4>

080054a0 <_init>:
 80054a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a2:	bf00      	nop
 80054a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054a6:	bc08      	pop	{r3}
 80054a8:	469e      	mov	lr, r3
 80054aa:	4770      	bx	lr

080054ac <_fini>:
 80054ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ae:	bf00      	nop
 80054b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054b2:	bc08      	pop	{r3}
 80054b4:	469e      	mov	lr, r3
 80054b6:	4770      	bx	lr
